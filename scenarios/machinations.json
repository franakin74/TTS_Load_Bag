{
  "SaveName": "",
  "Date": "",
  "VersionNumber": "",
  "GameMode": "",
  "GameType": "",
  "GameComplexity": "",
  "Tags": [],
  "Gravity": 0.5,
  "PlayArea": 0.5,
  "Table": "",
  "Sky": "",
  "Note": "",
  "TabStates": {},
  "LuaScript": "",
  "LuaScriptState": "",
  "XmlUI": "",
  "ObjectStates": [
    {
      "GUID": "82d39b",
      "Name": "Custom_Model_Bag",
      "Transform": {
        "posX": 12.9999495,
        "posY": 5.84359932,
        "posZ": 51.49995,
        "rotX": 3.55184149E-08,
        "rotY": 179.968582,
        "rotZ": 5.072715E-06,
        "scaleX": 1.20052135,
        "scaleY": 0.249882281,
        "scaleZ": 1.3145982
      },
      "Nickname": "Machinations au Fil du Temps",
      "Description": "",
      "GMNotes": "Machinations au Fil du Temps",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/advboxes/tuckbox_h_MSH.obj",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/1849293764609930695/A32186E44882FD6EF5753CCB9D325B4EC6848B5A/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 6,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "Bag": {
        "Order": 0
      },
      "LuaScript": "-- Utility memory bag by Directsun\r\n-- Version 2.7.0\r\n-- Fork of Memory Bag 2.0 by MrStump\r\n--\r\n-- Want to contribute? Create an issue or fork the code on GitHub and submit a pull request:\r\n-- https://github.com/sunflowermans/TTS-UtilityMemoryBag\r\n\r\n\r\nfunction updateSave()\r\n    local data_to_save = {[\"ml\"]=memoryList}\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n        -- memoryList[guid].rot.x = movedRotation.x\r\n        -- memoryList[guid].rot.y = movedRotation.y\r\n        -- memoryList[guid].rot.z = movedRotation.z\r\n    end\r\n\r\n    --theList[obj.getGUID()] = {\r\n    --    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n    --    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n    --    lock=obj.getLock()\r\n    --}\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n\r\n--Beginning Setup\r\n\r\n\r\n--Make setup button\r\n function createSetupButton()\r\n    self.createButton({\r\n      label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n      position={0,0.1,-2.1}, rotation={0,0,0}, height=275, width=625,\r\n      font_size=150, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n end\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", {0.75, 0.75, 1})\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\n    -- return getAllObjects()\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1* 1/self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor + 2\r\n            objPos.z = objPos.z * globalScaleFactor * 0.9\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = {0.75,0.25,0.25,0.6}\r\n            local colorMove = {0,0,1,0.6}\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function=funcName, function_owner=self,\r\n                position=objPos, rotation=rot, height=500, width=500,\r\n                color=color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n--Creates submit and cancel buttons\r\nfunction createSetupActionButtons(move)\r\n    self.createButton({\r\n        label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n      position={-0.7,0.1,2.1}, rotation={0,0,0}, height=275, width=625,\r\n      font_size=145, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    self.createButton({\r\n        label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n        position={-0.7,0.3,2.6}, rotation={0,0,0}, height=275, width=625,\r\n        font_size=140, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    if move == false then\r\n      self.createButton({\r\n          label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n          position={0.7,0.3,2.1}, rotation={0,0,0}, height=275, width=625,\r\n          font_size=140, color={0,0,0}, font_color={0.25,1,0.25}\r\n      })\r\n\r\n        self.createButton({\r\n            label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n            position={-0.7,0.3,3.1}, rotation={0,0,0}, height=275, width=625,\r\n            font_size=125, color={0,0,0}, font_color={1,1,1}\r\n        })\r\n\r\n        if fresh == false then\r\n                self.createButton({\r\n                    label=\"Mise à jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                    position={0.7,0.3,3.1}, rotation={0,0,0}, height=275, width=625,\r\n                    font_size=105, color={0,0,0}, font_color={0.75,0.75,1}\r\n                })\r\n                self.createButton({\r\n                    label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                    position={0.7,0.3,2.6}, rotation={0,0,0}, height=275, width=625,\r\n                    font_size=140, color={0,0,0}, font_color={1,0.25,0.25}\r\n                })\r\n            end\r\n        end\r\n\r\n        self.createButton({\r\n            label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n            position={0,0.3,-2.1}, rotation={0,0,0}, height=275, width=625,\r\n            font_size=165, color={0,0,0}, font_color={1,1,1}\r\n        })\r\n    end\r\n\r\n\r\n--During Setup\r\n\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = {0,0,1,0.6}\r\n    local color = {0,1,0,0.6}\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({index=previousIndex, color=colorMove})\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({index=index, color=color})\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n            lock=obj.getLock(),\r\n            tint=obj.getColorTint()\r\n        }\r\n        obj.highlightOn({0,1,0})\r\n    else\r\n        color = {0.75,0.25,0.25,0.6}\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({index=index, color=color})\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({index=index, color={0,1,0,0.6}})\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n                    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n                    lock=obj.getLock(),\r\n                    tint=obj.getColorTint()\r\n                }\r\n                obj.highlightOn({0,1,0})\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = {0.75,0.25,0.25,0.6}\r\n                self.editButton({index=index, color=color})\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", {1,1,1})\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", {1, 0.25, 0.25})\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", {0.75, 0.75, 1})\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", {0.75, 0.25, 0.25})\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k,v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", {0.25, 0.75, 0.25})\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", {1.0, 0.25, 0.25})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Removed\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", {0.75, 0.75, 1})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\n\r\n--After Setup\r\n\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0.7,0.1,2.2}, rotation={0,0,0}, height=275, width=625,\r\n        font_size=150, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={-0.7,0.1,2.2}, rotation={0,0,0}, height=275, width=625,\r\n        font_size=150, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={0,0.1,-2.2}, rotation={0,0,0}, height=275, width=625,\r\n        font_size=150, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---\r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    local bagObjList = self.getObjects()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid=guid, position=entry.pos, rotation=entry.rot, smooth=false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n\r\n--Utility functions\r\n\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x-p1.x)\r\n    deltaPos.y = (p2.y-p1.y) + yOffset\r\n    deltaPos.z = (p2.z-p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10^(dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample:\r\n{'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'}\r\n--]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend\r\n",
      "LuaScriptState": "{\"ml\":{\"06edc7\":{\"lock\":false,\"pos\":{\"x\":10.9999980926514,\"y\":1.5195460319519,\"z\":19.0000038146973},\"rot\":{\"x\":0.0108915204182267,\"y\":179.999481201172,\"z\":0.00494821881875396},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"0aeab2\":{\"lock\":false,\"pos\":{\"x\":2.99999833106995,\"y\":1.50492143630981,\"z\":10.0000038146973},\"rot\":{\"x\":0.00420764088630676,\"y\":224.975219726563,\"z\":0.0112025709822774},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"1067a4\":{\"lock\":false,\"pos\":{\"x\":-26,\"y\":1.76629984378815,\"z\":20},\"rot\":{\"x\":4.90871207148302E-06,\"y\":0.000233057013247162,\"z\":7.65027792226647E-08},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}},\"14a5bc\":{\"lock\":false,\"pos\":{\"x\":-1.47033983921574E-06,\"y\":1.50575077533722,\"z\":13.0000038146973},\"rot\":{\"x\":0.0108915092423558,\"y\":179.999481201172,\"z\":0.00495147379115224},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"195e4a\":{\"lock\":false,\"pos\":{\"x\":-1.63377376338758E-06,\"y\":1.50575077533722,\"z\":13.0000038146973},\"rot\":{\"x\":0.0108916405588388,\"y\":179.999572753906,\"z\":0.00495276739820838},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"1c7fa1\":{\"lock\":false,\"pos\":{\"x\":-2.42264218286437E-06,\"y\":1.52049601078033,\"z\":19.0000038146973},\"rot\":{\"x\":0.0108918845653534,\"y\":179.994827270508,\"z\":0.0049472595565021},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"204732\":{\"lock\":false,\"pos\":{\"x\":2.99999833106995,\"y\":1.50492143630981,\"z\":10.0000028610229},\"rot\":{\"x\":0.00420642038807273,\"y\":224.98258972168,\"z\":0.0112033812329173},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"21bfdd\":{\"lock\":false,\"pos\":{\"x\":-2.67850850832474E-06,\"y\":1.51821494102478,\"z\":7.00000333786011},\"rot\":{\"x\":0.010891592130065,\"y\":179.998596191406,\"z\":0.00494797481223941},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"220649\":{\"lock\":false,\"pos\":{\"x\":-1.52764232552727E-06,\"y\":1.50575077533722,\"z\":13.0000038146973},\"rot\":{\"x\":0.0108916712924838,\"y\":179.999633789063,\"z\":0.00495215505361557},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"232a70\":{\"lock\":false,\"pos\":{\"x\":2.99999833106995,\"y\":1.50492143630981,\"z\":10.0000028610229},\"rot\":{\"x\":0.00420428346842527,\"y\":224.996231079102,\"z\":0.0112114017829299},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"2a823b\":{\"lock\":false,\"pos\":{\"x\":-33.0000038146973,\"y\":1.76530027389526,\"z\":16.9999980926514},\"rot\":{\"x\":-5.18173283126089E-06,\"y\":179.986633300781,\"z\":8.31077784368972E-08},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"2f42e1\":{\"lock\":false,\"pos\":{\"x\":16.4999980926514,\"y\":1.50546622276306,\"z\":19.0000038146973},\"rot\":{\"x\":-0.00494585977867246,\"y\":269.989013671875,\"z\":0.0108934249728918},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"337126\":{\"lock\":false,\"pos\":{\"x\":30.5002002716064,\"y\":1.54100012779236,\"z\":-11},\"rot\":{\"x\":-1.21103511219189E-07,\"y\":-9.1902077059558E-09,\"z\":-5.07090908286045E-06},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}},\"39d218\":{\"lock\":false,\"pos\":{\"x\":-22.4999980926514,\"y\":1.76629984378815,\"z\":20.0000019073486},\"rot\":{\"x\":5.35624849362648E-06,\"y\":-9.17828510864638E-05,\"z\":-1.05583175979973E-07},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}},\"3c6cd6\":{\"lock\":false,\"pos\":{\"x\":5.49999809265137,\"y\":1.50413525104523,\"z\":7.00000333786011},\"rot\":{\"x\":-0.00494676688686013,\"y\":269.994842529297,\"z\":0.0108987940475345},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"3d0be8\":{\"lock\":false,\"pos\":{\"x\":10.9999980926514,\"y\":1.51726496219635,\"z\":7.00000238418579},\"rot\":{\"x\":0.0108916237950325,\"y\":179.998062133789,\"z\":0.00494782626628876},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"3d81f6\":{\"lock\":false,\"pos\":{\"x\":2.99999833106995,\"y\":1.50606203079224,\"z\":16.0000019073486},\"rot\":{\"x\":0.0112025337293744,\"y\":135.024139404297,\"z\":-0.00419866479933262},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"3fd269\":{\"lock\":false,\"pos\":{\"x\":-32,\"y\":1.76629936695099,\"z\":25.5},\"rot\":{\"x\":5.60997568754829E-06,\"y\":0.000304002314805985,\"z\":4.57152367516755E-07},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}},\"400164\":{\"lock\":false,\"pos\":{\"x\":7.99999856948853,\"y\":1.50448966026306,\"z\":10.0000038146973},\"rot\":{\"x\":0.0112019293010235,\"y\":135.019546508789,\"z\":-0.00420065829530358},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"43f53e\":{\"lock\":false,\"pos\":{\"x\":5.49999856948853,\"y\":1.50641632080078,\"z\":19.0000038146973},\"rot\":{\"x\":-0.00494691077619791,\"y\":269.9951171875,\"z\":0.0108991591259837},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"46ef5f\":{\"lock\":false,\"pos\":{\"x\":-3.08861694975349E-06,\"y\":1.52049601078033,\"z\":19.0000057220459},\"rot\":{\"x\":0.0108915697783232,\"y\":180.000106811523,\"z\":0.00494823185727},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"4f9c28\":{\"lock\":false,\"pos\":{\"x\":7.99999809265137,\"y\":1.50448966026306,\"z\":10.0000028610229},\"rot\":{\"x\":0.0112026762217283,\"y\":135.028564453125,\"z\":-0.00419864058494568},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"5354b7\":{\"lock\":false,\"pos\":{\"x\":7.99999856948853,\"y\":1.50563013553619,\"z\":16.0000019073486},\"rot\":{\"x\":0.00420761248096824,\"y\":224.976593017578,\"z\":0.0112026147544384},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"584123\":{\"lock\":false,\"pos\":{\"x\":3,\"y\":1.5018,\"z\":-6.5},\"rot\":{\"x\":0.0109,\"y\":179.9917,\"z\":0.0049},\"tint\":{\"a\":1,\"b\":0.701960802078247,\"g\":0.800000011920929,\"r\":0.874509811401367}},\"59a561\":{\"lock\":false,\"pos\":{\"x\":-30.5009517669678,\"y\":1.8353134393692,\"z\":24.0044841766357},\"rot\":{\"x\":-7.56775398258469E-06,\"y\":179.99543762207,\"z\":-4.34082608080644E-07},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"60bf33\":{\"lock\":false,\"pos\":{\"x\":-3.60467652171792E-06,\"y\":1.51821494102478,\"z\":7.00000286102295},\"rot\":{\"x\":0.0108914952725172,\"y\":179.999969482422,\"z\":0.00494821881875396},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"63027a\":{\"lock\":false,\"pos\":{\"x\":-19.9999961853027,\"y\":1.83529961109161,\"z\":24.0000038146973},\"rot\":{\"x\":-2.49158961196372E-06,\"y\":179.990203857422,\"z\":6.24646929736628E-07},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"63c308\":{\"lock\":false,\"pos\":{\"x\":-33.5007438659668,\"y\":1.83529961109161,\"z\":24.008638381958},\"rot\":{\"x\":-4.99723591929069E-06,\"y\":179.993743896484,\"z\":-3.1693321034254E-07},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"66f933\":{\"lock\":false,\"pos\":{\"x\":10.9999980926514,\"y\":1.51726496219635,\"z\":7.00000286102295},\"rot\":{\"x\":0.0108915437012911,\"y\":179.999481201172,\"z\":0.00494812848046422},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"6be9fb\":{\"lock\":false,\"pos\":{\"x\":7.99999761581421,\"y\":1.50563013553619,\"z\":16.0000019073486},\"rot\":{\"x\":0.0042084320448339,\"y\":224.972137451172,\"z\":0.0112020205706358},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"6cc831\":{\"lock\":false,\"pos\":{\"x\":10.9999980926514,\"y\":1.51726496219635,\"z\":7.00000238418579},\"rot\":{\"x\":0.0108914226293564,\"y\":180.000961303711,\"z\":0.00494834966957569},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"70a1d6\":{\"lock\":false,\"pos\":{\"x\":10.9999980926514,\"y\":1.5195460319519,\"z\":19.0000057220459},\"rot\":{\"x\":0.0108919115737081,\"y\":179.995880126953,\"z\":0.00494739599525929},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"72f879\":{\"lock\":false,\"pos\":{\"x\":21.9999980926514,\"y\":1.51859605312347,\"z\":19.0000038146973},\"rot\":{\"x\":0.0108908703550696,\"y\":180.008255004883,\"z\":0.00494970986619592},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"7558e3\":{\"lock\":false,\"pos\":{\"x\":5.49999856948853,\"y\":1.50641632080078,\"z\":19.0000038146973},\"rot\":{\"x\":-0.00494688050821424,\"y\":269.9951171875,\"z\":0.0108987474814057},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"75f5b7\":{\"lock\":false,\"pos\":{\"x\":-29.0001,\"y\":1.7653,\"z\":16.9998},\"rot\":{\"x\":0,\"y\":179.9994,\"z\":0},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"794871\":{\"lock\":false,\"pos\":{\"x\":35.0009994506836,\"y\":1.54099977016449,\"z\":-10.999400138855},\"rot\":{\"x\":-1.40003905357844E-07,\"y\":359.991302490234,\"z\":-4.91707078253967E-06},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}},\"825940\":{\"lock\":false,\"pos\":{\"x\":-3.29086174133408E-06,\"y\":1.52049601078033,\"z\":19.0000038146973},\"rot\":{\"x\":0.0108917579054832,\"y\":179.997573852539,\"z\":0.00494787562638521},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"8330b2\":{\"lock\":false,\"pos\":{\"x\":12.5007944107056,\"y\":1.5146609544754,\"z\":-6.01675081253052},\"rot\":{\"x\":0.00494414381682873,\"y\":89.9785766601563,\"z\":359.989105224609},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"88507a\":{\"lock\":false,\"pos\":{\"x\":21.9999980926514,\"y\":1.51859605312347,\"z\":19.0000038146973},\"rot\":{\"x\":0.0108915492892265,\"y\":180.000122070313,\"z\":0.00494832079857588},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"8eb5a4\":{\"lock\":false,\"pos\":{\"x\":-2.39801624957181E-06,\"y\":1.51821494102478,\"z\":7.00000333786011},\"rot\":{\"x\":0.0108912289142609,\"y\":180.003875732422,\"z\":0.00494897970929742},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"8fefda\":{\"lock\":false,\"pos\":{\"x\":12,\"y\":1.51546776294708,\"z\":-1.99999964237213},\"rot\":{\"x\":0.0108915865421295,\"y\":179.998794555664,\"z\":0.00494807865470648},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"92eaf8\":{\"lock\":false,\"pos\":{\"x\":7.99999809265137,\"y\":1.50448966026306,\"z\":10.0000038146973},\"rot\":{\"x\":0.0112019032239914,\"y\":135.024887084961,\"z\":-0.00419870857149363},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"9d232c\":{\"lock\":false,\"pos\":{\"x\":16.4999980926514,\"y\":1.50546646118164,\"z\":19.0000038146973},\"rot\":{\"x\":-0.00495155202224851,\"y\":270.018188476563,\"z\":0.0108900060877204},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"9f298f\":{\"lock\":false,\"pos\":{\"x\":-2.99983406066895,\"y\":1.51847398281097,\"z\":7.00018119812012},\"rot\":{\"x\":0.0108902687206864,\"y\":180.013488769531,\"z\":0.0049507743678987},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"a43d95\":{\"lock\":false,\"pos\":{\"x\":-5.5,\"y\":1.5055,\"z\":4},\"rot\":{\"x\":359.9891,\"y\":0.005,\"z\":-0.0049},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}},\"a7b6bf\":{\"lock\":false,\"pos\":{\"x\":10.9999990463257,\"y\":1.50480079650879,\"z\":13.0000028610229},\"rot\":{\"x\":0.0108919627964497,\"y\":179.994979858398,\"z\":0.00495126144960523},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"a7fa09\":{\"lock\":false,\"pos\":{\"x\":7.99999856948853,\"y\":1.50563013553619,\"z\":16.0000038146973},\"rot\":{\"x\":0.0042079845443368,\"y\":224.973831176758,\"z\":0.0112018417567015},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"a99e44\":{\"lock\":false,\"pos\":{\"x\":5.49999856948853,\"y\":1.50413525104523,\"z\":7.00000333786011},\"rot\":{\"x\":-0.00494666025042534,\"y\":269.994812011719,\"z\":0.0109037151560187},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"ad3e8b\":{\"lock\":false,\"pos\":{\"x\":2.99999833106995,\"y\":1.50606203079224,\"z\":16.0000038146973},\"rot\":{\"x\":0.0112000983208418,\"y\":134.993942260742,\"z\":-0.00420540571212769},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"b03248\":{\"lock\":false,\"pos\":{\"x\":-19.5006008148193,\"y\":1.77890634536743,\"z\":2.49939846992493},\"rot\":{\"x\":-5.12278847963898E-06,\"y\":180.006011962891,\"z\":1.24222694353193E-07},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"b042a5\":{\"lock\":false,\"pos\":{\"x\":-22.9999961853027,\"y\":1.76629936695099,\"z\":25.5000038146973},\"rot\":{\"x\":5.27182737641851E-06,\"y\":-0.00010300687426934,\"z\":7.7373456974783E-08},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}},\"b6b78f\":{\"lock\":true,\"pos\":{\"x\":33.0035018920898,\"y\":1.53999996185303,\"z\":-8.13529968261719},\"rot\":{\"x\":0,\"y\":180,\"z\":180},\"tint\":{\"a\":1,\"b\":0.0899658724665642,\"g\":0.230958044528961,\"r\":0.442958056926727}},\"b931de\":{\"lock\":false,\"pos\":{\"x\":16.5,\"y\":1.5053,\"z\":13},\"rot\":{\"x\":359.9891,\"y\":0.0051,\"z\":-0.0049},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}},\"bad694\":{\"lock\":false,\"pos\":{\"x\":5.49999856948853,\"y\":1.50760626792908,\"z\":20.0000038146973},\"rot\":{\"x\":359.989105224609,\"y\":-0.000806594849564135,\"z\":-0.00494815921410918},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}},\"bc0ba0\":{\"lock\":true,\"pos\":{\"x\":22,\"y\":1.51859605312347,\"z\":19.0000038146973},\"rot\":{\"x\":0.0108926240354776,\"y\":179.985473632813,\"z\":0.00494556641206145},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"be55dc\":{\"lock\":false,\"pos\":{\"x\":5.48669958114624,\"y\":1.50413489341736,\"z\":6.99215078353882},\"rot\":{\"x\":-0.00494658062234521,\"y\":269.994873046875,\"z\":0.0109011745080352},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"c72403\":{\"lock\":false,\"pos\":{\"x\":-25.9999961853027,\"y\":1.83529949188232,\"z\":24.0000019073486},\"rot\":{\"x\":-5.17955413670279E-06,\"y\":180.001190185547,\"z\":1.34551532937621E-06},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"cade6c\":{\"lock\":false,\"pos\":{\"x\":5.5,\"y\":1.51888048648834,\"z\":13},\"rot\":{\"x\":0.01089165546,\"y\":179.998306274414,\"z\":0.00494808051735163},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"d38e7c\":{\"lock\":false,\"pos\":{\"x\":2.99999761581421,\"y\":1.50606203079224,\"z\":16.0000038146973},\"rot\":{\"x\":0.0112019684165716,\"y\":135.022857666016,\"z\":-0.00420006131753325},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"d3f185\":{\"lock\":false,\"pos\":{\"x\":16.4999980926514,\"y\":1.50546634197235,\"z\":19.0000038146973},\"rot\":{\"x\":0.00495009962469339,\"y\":90.0118713378906,\"z\":359.989105224609},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"d42bcb\":{\"lock\":false,\"pos\":{\"x\":15,\"y\":1.5152086019516,\"z\":-2.00010800361633},\"rot\":{\"x\":0.0108911115676165,\"y\":180.00471496582,\"z\":0.00494911521673203},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"d6fa6a\":{\"lock\":false,\"pos\":{\"x\":10.9999980926514,\"y\":1.51659965515137,\"z\":3.50000333786011},\"rot\":{\"x\":0.0108936429023743,\"y\":179.974807739258,\"z\":0.00494349002838135},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"d7b93b\":{\"lock\":false,\"pos\":{\"x\":-5.5,\"y\":1.5089,\"z\":22},\"rot\":{\"x\":359.9891,\"y\":0.005,\"z\":-0.005},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}},\"d83899\":{\"lock\":false,\"pos\":{\"x\":10.9999990463257,\"y\":1.50480079650879,\"z\":13.0000038146973},\"rot\":{\"x\":0.0108920400962234,\"y\":179.995162963867,\"z\":0.00495448987931013},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"da61d5\":{\"lock\":false,\"pos\":{\"x\":17.5009994506836,\"y\":1.53118240833282,\"z\":-6.01959991455078},\"rot\":{\"x\":0.00494812009856105,\"y\":90.0001983642578,\"z\":359.989105224609},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"dc7905\":{\"lock\":false,\"pos\":{\"x\":10.9999980926514,\"y\":1.5195460319519,\"z\":19.0000038146973},\"rot\":{\"x\":0.0108913872390985,\"y\":180.001754760742,\"z\":0.00494860904291272},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e1f999\":{\"lock\":false,\"pos\":{\"x\":-22.0000019073486,\"y\":1.83530139923096,\"z\":2.49999690055847},\"rot\":{\"x\":-6.13020529272035E-06,\"y\":179.983627319336,\"z\":6.99828774486377E-07},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"e30486\":{\"lock\":false,\"pos\":{\"x\":18,\"y\":1.51494956016541,\"z\":-2},\"rot\":{\"x\":0.0108915790915489,\"y\":179.999221801758,\"z\":0.00494802044704556},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e46534\":{\"lock\":false,\"pos\":{\"x\":10.9999980926514,\"y\":1.50480079650879,\"z\":13.0000038146973},\"rot\":{\"x\":0.0108918761834502,\"y\":179.995056152344,\"z\":0.00494691776111722},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"ea6c1e\":{\"lock\":false,\"pos\":{\"x\":30.5,\"y\":1.72431862354279,\"z\":-2.99979996681213},\"rot\":{\"x\":-0.000590977200772613,\"y\":179.998901367188,\"z\":180.001068115234},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"ea7bc0\":{\"lock\":false,\"pos\":{\"x\":-22,\"y\":1.76630055904388,\"z\":13},\"rot\":{\"x\":5.12599581270479E-06,\"y\":0.000880237901583314,\"z\":-3.95888690718493E-07},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}},\"f12ee8\":{\"lock\":false,\"pos\":{\"x\":5.49999856948853,\"y\":1.50641644001007,\"z\":19.0000038146973},\"rot\":{\"x\":-0.00494708493351936,\"y\":269.994934082031,\"z\":0.0108967944979668},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"f2c013\":{\"lock\":false,\"pos\":{\"x\":5.49999856948853,\"y\":1.50760626792908,\"z\":20.0000038146973},\"rot\":{\"x\":359.989105224609,\"y\":0.00545277679339051,\"z\":-0.00494927167892456},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}},\"f3db90\":{\"lock\":false,\"pos\":{\"x\":-22.9999961853027,\"y\":1.83529961109161,\"z\":24.0000038146973},\"rot\":{\"x\":-4.68025109512382E-06,\"y\":179.989715576172,\"z\":3.05738069528161E-07},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"f6f7f9\":{\"lock\":false,\"pos\":{\"x\":23.50119972229,\"y\":1.51380479335785,\"z\":-5.52310085296631},\"rot\":{\"x\":0.0108912214636803,\"y\":180.003997802734,\"z\":0.00494905468076468},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"f9e05e\":{\"lock\":false,\"pos\":{\"x\":-29,\"y\":1.76530027389526,\"z\":17},\"rot\":{\"x\":-4.93075094709639E-06,\"y\":179.999481201172,\"z\":3.02360490422871E-07},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"fa019f\":{\"lock\":false,\"pos\":{\"x\":-19.5,\"y\":1.4799,\"z\":-4.5},\"rot\":{\"x\":0,\"y\":180,\"z\":0},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"fbb748\":{\"lock\":false,\"pos\":{\"x\":-29,\"y\":1.7653,\"z\":17},\"rot\":{\"x\":0,\"y\":180,\"z\":0},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"fe84d6\":{\"lock\":false,\"pos\":{\"x\":5.49999856948853,\"y\":1.50760626792908,\"z\":20.0000038146973},\"rot\":{\"x\":359.989105224609,\"y\":359.982208251953,\"z\":-0.0049451207742095},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}}}}",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "337126",
          "Name": "Custom_Model",
          "Transform": {
            "posX": 30.5002,
            "posY": 1.54100013,
            "posZ": -11.0,
            "rotX": -1.3005101E-08,
            "rotY": -1.91523757E-08,
            "rotZ": -5.064063E-06,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Text Tool",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.0,
            "g": 0.0,
            "b": 0.0,
            "a": 0.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": false,
          "Tooltip": false,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/1478820768302617365/27883B7913E0E69143C3AA03493B7E7C4E8C29C0/",
            "DiffuseURL": "",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 1,
            "TypeIndex": 0,
            "CastShadows": true
          },
          "LuaScript": "-- Code for bag to identify text tool objects\r\nmovableTextTool_cowgoesmoo33 = true\r\n\r\n-- Number of characters before the text box width expands.\r\nEXPAND_INTERVAL = 20\r\n\r\n-- This table controls what is passed between save/load\r\ndata = {}\r\n\r\nfunction onLoad(saved_data)\r\n  if saved_data ~= '' then\r\n    data = JSON.decode(saved_data)\r\n    if data.text ~= '' then\r\n      self.interactable = data.interactable\r\n      staticMode()\r\n      return\r\n    end\r\n  else\r\n    data = {size=200, color=Color(0,0,0), text='', interactable=true,\r\n        enter_to_finish=false, autolock=false, autolift=false,\r\n        hover_height=0.05, box_transparency=1}\r\n  end\r\n\r\n  inputMode()\r\nend\r\n\r\n-- True if in the middle of delay after pressing Enter (with enter_to_finish on)\r\nfinishing = false\r\nfunction input_func(obj, color, input, stillEditing)\r\n  local params = getBox(input)\r\n  if params then\r\n    params.value = input\r\n    self.editInput(params)\r\n  end\r\n\r\n  if not stillEditing then\r\n    data.text = input\r\n    updateState()\r\n    if input ~= '' then staticMode(color) end\r\n  elseif data.enter_to_finish then\r\n    -- If enter is pressed: remove last newline and force finish\r\n    if not finishing and input:sub(-1) == '\\n' then\r\n      finishing = true\r\n      -- Delay to avoid user's Enter keypress being detected (opens chat box)\r\n      Wait.frames(function()\r\n        input = input:sub(1, -2)\r\n        data.text = input\r\n        updateState()\r\n        if input ~= '' then staticMode(color) else inputMode() end\r\n        finishing = false\r\n      end, 10)\r\n    end\r\n  end\r\nend\r\n\r\n-- When the inpupt box appears and lets the player type in it.\r\nfunction inputMode()\r\n  self.clearContextMenu()\r\n  self.clearInputs()\r\n  self.clearButtons()\r\n\r\n  local size = getBox(data.text, true)\r\n\r\n  self.createInput({\r\n    input_function = \"input_func\",\r\n    function_owner = self,\r\n    label          = \"Type Here\",\r\n    alignment      = 3,\r\n    position       = {x=0, y=data.hover_height, z=0},\r\n    rotation       = {0, 180, 0},\r\n    width          = size.width,\r\n    height         = size.height,\r\n    color          = getBackground(data.color),\r\n    font_color     = data.color,\r\n    font_size      = data.size,\r\n    value          = data.text,\r\n  })\r\n\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\nend\r\n\r\n-- When the input box disappears and displays the text.\r\nfunction staticMode(player)\r\n  self.clearContextMenu()\r\n  if data.autolock then\r\n    self.locked = true\r\n  end\r\n  if self.getInputs() and #self.getInputs() ~= 0 then\r\n    self.removeInput(0)\r\n  end\r\n\r\n  -- Clear from selecting player\r\n  if player then\r\n    self.removeFromPlayerSelection(player)\r\n  end\r\n\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  self.createButton({\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=self,\r\n    position={0,data.hover_height,0}, rotation={0,180,0}, height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  })\r\n\r\n  self.addContextMenuItem('Edit Text', function(color)\r\n    self.removeFromPlayerSelection(color)\r\n    inputMode()\r\n  end)\r\n  self.addContextMenuItem('Clear', function(color)\r\n    applyMultiple(color, 'clear', _, true)\r\n  end)\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\n  self.addContextMenuItem('Permanently Attach', attemptAttach)\r\n  self.addContextMenuItem('Permalock', function(color)\r\n    applyMultiple(color, 'permalock', _, true)\r\n  end)\r\nend\r\n\r\nfunction changeSize(params)\r\n  local delta = params[1]\r\n  local newSize = data.size + delta\r\n  if newSize > 800  or newSize < 50 then\r\n    return\r\n  end\r\n  data.size = newSize\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_size=data.size})\r\n  else\r\n    local size = getBox(data.text, true)\r\n    self.editInput({width=size.width, height=size.height, font_size=data.size})\r\n  end\r\nend\r\n\r\nfunction setColor(params)\r\n  if params and params[1] then\r\n    data.color = params[1]\r\n  else\r\n    data.color = self.getColorTint():setAt('a', 1) -- Take on color of object tint\r\n  end\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_color=data.color})\r\n  else\r\n    self.editInput({font_color=data.color, color=getBackground(data.color)})\r\n  end\r\nend\r\n\r\nfunction getBackground(color) --determines whether to use black or white depending on luminance\r\n  local r,g,b = Color(color):get()\r\n\r\n  local lum = 0.2126*r + 0.7152*g + 0.0722*b\r\n  if lum > 0.75 then\r\n    return {0.2,0.2,0.2, data.box_transparency}\r\n  else\r\n    return {1,1,1, data.box_transparency}\r\n  end\r\nend\r\n\r\nfunction clear()\r\n  data.text = ''\r\n  updateState()\r\n  inputMode()\r\nend\r\n\r\nfunction permalock()\r\n  self.interactable = false\r\n  data.interactable = false\r\n  updateState()\r\nend\r\n\r\nlocal target_script = [[\r\nfunction onLoad(script_state)\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    for _,entry in ipairs(state) do\r\n      self.createButton(entry)\r\n    end\r\n    self.addContextMenuItem('Clear All Text', function(color)\r\n      self.clearContextMenu()\r\n      self.clearButtons()\r\n      self.script_state = ''\r\n      self.script_code = ''\r\n    end)\r\n  end\r\nend\r\n]]\r\n\r\nfunction attemptAttach(player_color)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  local attachee\r\n  local attachers = {}\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if obj ~= self then\r\n        table.insert(attachers, obj)\r\n      end\r\n    else\r\n      if attachee then\r\n        broadcastToColor(\"More than one target selected.\", player_color)\r\n        return\r\n      else\r\n        attachee = obj\r\n      end\r\n    end\r\n  end\r\n  if attachee then\r\n    local code = attachee.script_code\r\n    if code and code ~= '' and code ~= target_script then\r\n      broadcastToColor(\"Warning: script on card has been overriden. Rewind time to undo.\", player_color)\r\n    end\r\n    for i,attacher in ipairs(attachers) do\r\n      attacher.call('attach', {target = attachee})\r\n    end\r\n    attach({target = attachee})\r\n    local type, flip = attachee.type, attachee.getRotation().z\r\n    if (type == 'Card' or type == 'Deck') and flip > 175 and flip < 185 then\r\n      broadcastToColor(\"Warning: text will not display if card or deck is facing down.\", player_color)\r\n    end\r\n  else\r\n    broadcastToColor(\"You must have a target object in your selection (using click-and-drag or Ctrl+Click) to use this option.\", player_color)\r\n  end\r\nend\r\n\r\nfunction attach(params)\r\n  local target = params.target\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  local textRotation = self.getRotation():sub(target.getRotation())\r\n    :add(Vector(180, 0, 180))\r\n\r\n  local textPosition = target.positionToLocal(\r\n    self.getPosition():add(Vector(0, data.hover_height, 0))\r\n  )\r\n  textPosition.x = -textPosition.x\r\n\r\n  local textScale = {}\r\n  textScale.x = self.getScale().x / target.getScale().x\r\n  textScale.y = self.getScale().x / target.getScale().y\r\n  textScale.z = self.getScale().x / target.getScale().z\r\n\r\n  local details = {\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=nil,\r\n    position=textPosition,\r\n    rotation=textRotation,\r\n    scale=textScale,\r\n    height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  }\r\n\r\n  target.createButton(details)\r\n\r\n  local script_state = target.script_state\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    table.insert(state, details)\r\n    target.script_state = JSON.encode(state)\r\n  else\r\n    target.script_state = JSON.encode({[1]=details})\r\n  end\r\n\r\n  target.script_code = target_script\r\n\r\n  self.destruct()\r\nend\r\n\r\nfunction applyMultiple(player_color, func_string, params, static_only)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if not static_only or obj.call('isStatic') then\r\n        obj.call(func_string, params)\r\n      end\r\n    end\r\n  end\r\nend\r\n\r\nfunction isStatic()\r\n  local input = self.getInputs()\r\n  return not input or #input == 0\r\nend\r\n\r\nfunction getBox(input, force)\r\n  local maxLength, lineCount = EXPAND_INTERVAL, 1\r\n  local lineLength = 0\r\n  for i = 1, #input do\r\n    local c = input:sub(i,i)\r\n    if c == '\\n' then\r\n      lineCount = lineCount + 1\r\n      if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n      lineLength = 0\r\n    else\r\n      lineLength = lineLength + 1\r\n    end\r\n  end\r\n  if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n\r\n  newWidth = data.size * maxLength * 0.9\r\n  newHeight = data.size * lineCount + 23\r\n\r\n  if force or boxWidth ~= newWidth or boxHeight ~= newHeight then\r\n    boxWidth, boxHeight = newWidth, newHeight\r\n    return {width = boxWidth, height = boxHeight}\r\n  end\r\n  return nil\r\nend\r\n\r\ntemp_lift = nil\r\nfunction onPickUp(player_color)\r\n  if data.autolift then\r\n    local player = Player[player_color]\r\n    temp_lift = player.lift_height\r\n    player.lift_height = 0\r\n  end\r\nend\r\n\r\nfunction onDrop(player_color)\r\n  if data.autolift and temp_lift then\r\n    Player[player_color].lift_height = temp_lift\r\n  end\r\nend\r\n\r\n-- Should be called every time data is modified, allows info to be saved on copy/paste\r\nfunction updateState()\r\n  self.script_state = JSON.encode(data)\r\nend\r\n\r\nfunction onSave()\r\n  self.script_state = JSON.encode(data)\r\n  return self.script_state\r\nend",
          "LuaScriptState": "{\"autolift\":false,\"autolock\":false,\"box_transparency\":1,\"color\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1},\"enter_to_finish\":false,\"hover_height\":0.05,\"interactable\":true,\"size\":250,\"text\":\"Complot\\n\"}",
          "XmlUI": ""
        },
        {
          "GUID": "3fd269",
          "Name": "Custom_Model",
          "Transform": {
            "posX": -32.0,
            "posY": 1.77099919,
            "posZ": 25.5,
            "rotX": 5.046582E-06,
            "rotY": 0.000334491982,
            "rotZ": 3.141063E-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Text Tool",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.0,
            "g": 0.0,
            "b": 0.0,
            "a": 0.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": false,
          "Tooltip": false,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/1478820768302617365/27883B7913E0E69143C3AA03493B7E7C4E8C29C0/",
            "DiffuseURL": "",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 1,
            "TypeIndex": 0,
            "CastShadows": true
          },
          "LuaScript": "-- Code for bag to identify text tool objects\r\nmovableTextTool_cowgoesmoo33 = true\r\n\r\n-- Number of characters before the text box width expands.\r\nEXPAND_INTERVAL = 20\r\n\r\n-- This table controls what is passed between save/load\r\ndata = {}\r\n\r\nfunction onLoad(saved_data)\r\n  if saved_data ~= '' then\r\n    data = JSON.decode(saved_data)\r\n    if data.text ~= '' then\r\n      self.interactable = data.interactable\r\n      staticMode()\r\n      return\r\n    end\r\n  else\r\n    data = {size=200, color=Color(0,0,0), text='', interactable=true,\r\n        enter_to_finish=false, autolock=false, autolift=false,\r\n        hover_height=0.05, box_transparency=1}\r\n  end\r\n\r\n  inputMode()\r\nend\r\n\r\n-- True if in the middle of delay after pressing Enter (with enter_to_finish on)\r\nfinishing = false\r\nfunction input_func(obj, color, input, stillEditing)\r\n  local params = getBox(input)\r\n  if params then\r\n    params.value = input\r\n    self.editInput(params)\r\n  end\r\n\r\n  if not stillEditing then\r\n    data.text = input\r\n    updateState()\r\n    if input ~= '' then staticMode(color) end\r\n  elseif data.enter_to_finish then\r\n    -- If enter is pressed: remove last newline and force finish\r\n    if not finishing and input:sub(-1) == '\\n' then\r\n      finishing = true\r\n      -- Delay to avoid user's Enter keypress being detected (opens chat box)\r\n      Wait.frames(function()\r\n        input = input:sub(1, -2)\r\n        data.text = input\r\n        updateState()\r\n        if input ~= '' then staticMode(color) else inputMode() end\r\n        finishing = false\r\n      end, 10)\r\n    end\r\n  end\r\nend\r\n\r\n-- When the inpupt box appears and lets the player type in it.\r\nfunction inputMode()\r\n  self.clearContextMenu()\r\n  self.clearInputs()\r\n  self.clearButtons()\r\n\r\n  local size = getBox(data.text, true)\r\n\r\n  self.createInput({\r\n    input_function = \"input_func\",\r\n    function_owner = self,\r\n    label          = \"Type Here\",\r\n    alignment      = 3,\r\n    position       = {x=0, y=data.hover_height, z=0},\r\n    rotation       = {0, 180, 0},\r\n    width          = size.width,\r\n    height         = size.height,\r\n    color          = getBackground(data.color),\r\n    font_color     = data.color,\r\n    font_size      = data.size,\r\n    value          = data.text,\r\n  })\r\n\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\nend\r\n\r\n-- When the input box disappears and displays the text.\r\nfunction staticMode(player)\r\n  self.clearContextMenu()\r\n  if data.autolock then\r\n    self.locked = true\r\n  end\r\n  if self.getInputs() and #self.getInputs() ~= 0 then\r\n    self.removeInput(0)\r\n  end\r\n\r\n  -- Clear from selecting player\r\n  if player then\r\n    self.removeFromPlayerSelection(player)\r\n  end\r\n\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  self.createButton({\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=self,\r\n    position={0,data.hover_height,0}, rotation={0,180,0}, height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  })\r\n\r\n  self.addContextMenuItem('Edit Text', function(color)\r\n    self.removeFromPlayerSelection(color)\r\n    inputMode()\r\n  end)\r\n  self.addContextMenuItem('Clear', function(color)\r\n    applyMultiple(color, 'clear', _, true)\r\n  end)\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\n  self.addContextMenuItem('Permanently Attach', attemptAttach)\r\n  self.addContextMenuItem('Permalock', function(color)\r\n    applyMultiple(color, 'permalock', _, true)\r\n  end)\r\nend\r\n\r\nfunction changeSize(params)\r\n  local delta = params[1]\r\n  local newSize = data.size + delta\r\n  if newSize > 800  or newSize < 50 then\r\n    return\r\n  end\r\n  data.size = newSize\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_size=data.size})\r\n  else\r\n    local size = getBox(data.text, true)\r\n    self.editInput({width=size.width, height=size.height, font_size=data.size})\r\n  end\r\nend\r\n\r\nfunction setColor(params)\r\n  if params and params[1] then\r\n    data.color = params[1]\r\n  else\r\n    data.color = self.getColorTint():setAt('a', 1) -- Take on color of object tint\r\n  end\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_color=data.color})\r\n  else\r\n    self.editInput({font_color=data.color, color=getBackground(data.color)})\r\n  end\r\nend\r\n\r\nfunction getBackground(color) --determines whether to use black or white depending on luminance\r\n  local r,g,b = Color(color):get()\r\n\r\n  local lum = 0.2126*r + 0.7152*g + 0.0722*b\r\n  if lum > 0.75 then\r\n    return {0.2,0.2,0.2, data.box_transparency}\r\n  else\r\n    return {1,1,1, data.box_transparency}\r\n  end\r\nend\r\n\r\nfunction clear()\r\n  data.text = ''\r\n  updateState()\r\n  inputMode()\r\nend\r\n\r\nfunction permalock()\r\n  self.interactable = false\r\n  data.interactable = false\r\n  updateState()\r\nend\r\n\r\nlocal target_script = [[\r\nfunction onLoad(script_state)\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    for _,entry in ipairs(state) do\r\n      self.createButton(entry)\r\n    end\r\n    self.addContextMenuItem('Clear All Text', function(color)\r\n      self.clearContextMenu()\r\n      self.clearButtons()\r\n      self.script_state = ''\r\n      self.script_code = ''\r\n    end)\r\n  end\r\nend\r\n]]\r\n\r\nfunction attemptAttach(player_color)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  local attachee\r\n  local attachers = {}\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if obj ~= self then\r\n        table.insert(attachers, obj)\r\n      end\r\n    else\r\n      if attachee then\r\n        broadcastToColor(\"More than one target selected.\", player_color)\r\n        return\r\n      else\r\n        attachee = obj\r\n      end\r\n    end\r\n  end\r\n  if attachee then\r\n    local code = attachee.script_code\r\n    if code and code ~= '' and code ~= target_script then\r\n      broadcastToColor(\"Warning: script on card has been overriden. Rewind time to undo.\", player_color)\r\n    end\r\n    for i,attacher in ipairs(attachers) do\r\n      attacher.call('attach', {target = attachee})\r\n    end\r\n    attach({target = attachee})\r\n    local type, flip = attachee.type, attachee.getRotation().z\r\n    if (type == 'Card' or type == 'Deck') and flip > 175 and flip < 185 then\r\n      broadcastToColor(\"Warning: text will not display if card or deck is facing down.\", player_color)\r\n    end\r\n  else\r\n    broadcastToColor(\"You must have a target object in your selection (using click-and-drag or Ctrl+Click) to use this option.\", player_color)\r\n  end\r\nend\r\n\r\nfunction attach(params)\r\n  local target = params.target\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  local textRotation = self.getRotation():sub(target.getRotation())\r\n    :add(Vector(180, 0, 180))\r\n\r\n  local textPosition = target.positionToLocal(\r\n    self.getPosition():add(Vector(0, data.hover_height, 0))\r\n  )\r\n  textPosition.x = -textPosition.x\r\n\r\n  local textScale = {}\r\n  textScale.x = self.getScale().x / target.getScale().x\r\n  textScale.y = self.getScale().x / target.getScale().y\r\n  textScale.z = self.getScale().x / target.getScale().z\r\n\r\n  local details = {\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=nil,\r\n    position=textPosition,\r\n    rotation=textRotation,\r\n    scale=textScale,\r\n    height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  }\r\n\r\n  target.createButton(details)\r\n\r\n  local script_state = target.script_state\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    table.insert(state, details)\r\n    target.script_state = JSON.encode(state)\r\n  else\r\n    target.script_state = JSON.encode({[1]=details})\r\n  end\r\n\r\n  target.script_code = target_script\r\n\r\n  self.destruct()\r\nend\r\n\r\nfunction applyMultiple(player_color, func_string, params, static_only)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if not static_only or obj.call('isStatic') then\r\n        obj.call(func_string, params)\r\n      end\r\n    end\r\n  end\r\nend\r\n\r\nfunction isStatic()\r\n  local input = self.getInputs()\r\n  return not input or #input == 0\r\nend\r\n\r\nfunction getBox(input, force)\r\n  local maxLength, lineCount = EXPAND_INTERVAL, 1\r\n  local lineLength = 0\r\n  for i = 1, #input do\r\n    local c = input:sub(i,i)\r\n    if c == '\\n' then\r\n      lineCount = lineCount + 1\r\n      if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n      lineLength = 0\r\n    else\r\n      lineLength = lineLength + 1\r\n    end\r\n  end\r\n  if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n\r\n  newWidth = data.size * maxLength * 0.9\r\n  newHeight = data.size * lineCount + 23\r\n\r\n  if force or boxWidth ~= newWidth or boxHeight ~= newHeight then\r\n    boxWidth, boxHeight = newWidth, newHeight\r\n    return {width = boxWidth, height = boxHeight}\r\n  end\r\n  return nil\r\nend\r\n\r\ntemp_lift = nil\r\nfunction onPickUp(player_color)\r\n  if data.autolift then\r\n    local player = Player[player_color]\r\n    temp_lift = player.lift_height\r\n    player.lift_height = 0\r\n  end\r\nend\r\n\r\nfunction onDrop(player_color)\r\n  if data.autolift and temp_lift then\r\n    Player[player_color].lift_height = temp_lift\r\n  end\r\nend\r\n\r\n-- Should be called every time data is modified, allows info to be saved on copy/paste\r\nfunction updateState()\r\n  self.script_state = JSON.encode(data)\r\nend\r\n\r\nfunction onSave()\r\n  self.script_state = JSON.encode(data)\r\n  return self.script_state\r\nend",
          "LuaScriptState": "{\"autolift\":false,\"autolock\":false,\"box_transparency\":1,\"color\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1},\"enter_to_finish\":false,\"hover_height\":0.05,\"interactable\":true,\"size\":250,\"text\":\"1) Choisir le mode\"}",
          "XmlUI": ""
        },
        {
          "GUID": "584123",
          "Name": "Custom_Tile",
          "Transform": {
            "posX": 2.99999928,
            "posY": 1.49178529,
            "posZ": -6.5,
            "rotX": 0.0108923158,
            "rotY": 179.991684,
            "rotZ": 0.00494703744,
            "scaleX": 1.6428808,
            "scaleY": 1.0,
            "scaleZ": 1.6428808
          },
          "Nickname": "Mise en place du Chaos Bag",
          "Description": "Machinations au Fil du Temps",
          "GMNotes": "{\"data\":\"Machinations\",\"easy\":true,\"expert\":true,\"hard\":true,\"normal\":true,\"standalone\":false}",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.8745098,
            "g": 0.8,
            "b": 0.7019608
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "CustomImage": {
            "ImageURL": "https://steamusercontent-a.akamaihd.net/ugc/2011456161884106028/81BF2DAD34FE18B6788B56E21F16B81E6525AD99/",
            "ImageSecondaryURL": "https://steamusercontent-a.akamaihd.net/ugc/2011456161884106028/81BF2DAD34FE18B6788B56E21F16B81E6525AD99/",
            "ImageScalar": 1.0,
            "WidthScale": 0.0,
            "CustomTile": {
              "Type": 3,
              "Thickness": 0.1,
              "Stackable": false,
              "Stretch": true
            }
          },
          "LuaScript": "\r\njacqueline_guid = '42cd6e'\r\n\r\nbuttonparams = {\r\n   ['easy'] = {label = \"Facile\", click_function = 'modeEasy', z_i = -0.2},\r\n   ['normal'] = {label = \"Standard\", click_function = 'modeNormal', z_i = 0.1},\r\n   ['hard'] = {label = \"Difficile\", click_function = 'modeHard', z_i = 0.4},\r\n   ['expert'] = {label = \"Expert\", click_function = 'modeExpert', z_i = 0.7},\r\n   ['standalone'] = {label = \"Indépendant\", click_function = 'modeStandalone', z_i = 0},\r\n}\r\n\r\nfunction onLoad()\r\n\r\n    metadata = JSON.decode(self.getGMNotes())\r\n    buttontable = {}\r\n    for key, value in pairs(buttonparams) do\r\n        if metadata[key] == true then\r\n            table.insert(buttontable,value)\r\n        end\r\n        \r\n    end\r\n\r\n    for _, button in pairs(buttontable) do\r\n        local data = {\r\n            click_function = button.click_function, \r\n            function_owner = self, \r\n            label = button.label, \r\n            position = {0, 0.1, button.z_i}, \r\n            scale = {0.3, 0.5, 0.3}, \r\n            width = 1500, \r\n            height = 400, \r\n            font_size = 250, \r\n            tooltip = \"Chaos bag du mode \"..button.label,\r\n            color = {0.5647, 0.4627, 0.2353, 1}, \r\n            font_color = {0.9041, 0.8313, 0.7356, 1},\r\n            hover_color = {99/255, 85/255, 48/255},\r\n            press_color = {192/255, 152/255, 94/255} }\r\n        self.createButton(data)\r\n        \r\n    end\r\n    jacqueline = getObjectFromGUID(jacqueline_guid)\r\n    chaosdata = jacqueline.getTable('chaosdata')\r\nend\r\n\r\nfunction modeEasy()\r\n    local  params ={}\r\n     params.mode = 'easy'\r\n     params.data = metadata.data\r\n     jacqueline.call('setChaosBag', params)\r\n  \r\nend\r\n\r\nfunction modeNormal()\r\n      local  params ={}\r\n       params.mode = 'normal'\r\n       params.data = metadata.data\r\n       jacqueline.call('setChaosBag', params)\r\n    \r\nend\r\n\r\nfunction modeHard()\r\n    local  params ={}\r\n     params.mode = 'hard'\r\n     params.data = metadata.data\r\n     jacqueline.call('setChaosBag', params)\r\n  \r\nend\r\n\r\nfunction modeExpert()\r\n    local  params ={}\r\n     params.mode = 'expert'\r\n     params.data = metadata.data\r\n     jacqueline.call('setChaosBag', params)\r\n  \r\nend\r\n\r\nfunction modeStandalone()\r\n    local  params ={}\r\n     params.mode = 'standalone'\r\n     params.data = metadata.data\r\n     jacqueline.call('setChaosBag', params)\r\n  \r\nend",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "59a561",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": -30.500948,
            "posY": 1.83999932,
            "posZ": 24.0044861,
            "rotX": -5.302809E-06,
            "rotY": 179.995544,
            "rotZ": 2.679219E-07,
            "scaleX": 0.7,
            "scaleY": 0.7,
            "scaleZ": 0.7
          },
          "Nickname": "Mode Multijoueur Épique",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "CustomMesh": {
            "MeshURL": "https://pastebin.com/raw/ALrYhQGb",
            "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/1932636510528591705/02DC1C54165DD4FC8E9FBC46539ECBF9498BF8F0/",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "-- Utility memory bag by Directsun\r\n-- Version 2.7.0\r\n-- Fork of Memory Bag 2.0 by MrStump\r\n--\r\n-- Want to contribute? Create an issue or fork the code on GitHub and submit a pull request:\r\n-- https://github.com/sunflowermans/TTS-UtilityMemoryBag\r\n\r\n\r\nfunction updateSave()\r\n    local data_to_save = {[\"ml\"]=memoryList}\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n        -- memoryList[guid].rot.x = movedRotation.x\r\n        -- memoryList[guid].rot.y = movedRotation.y\r\n        -- memoryList[guid].rot.z = movedRotation.z\r\n    end\r\n\r\n    --theList[obj.getGUID()] = {\r\n    --    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n    --    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n    --    lock=obj.getLock()\r\n    --}\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n\r\n--Beginning Setup\r\n\r\n\r\n--Make setup button\r\nfunction createSetupButton()\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", {0.75, 0.75, 1})\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\n    -- return getAllObjects()\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1 * 1/self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor +2\r\n            objPos.z = objPos.z * globalScaleFactor\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = {0.75,0.25,0.25,0.6}\r\n            local colorMove = {0,0,1,0.6}\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function=funcName, function_owner=self,\r\n                position=objPos, rotation=rot, height=1000, width=1000,\r\n                color=color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n--Creates submit and cancel buttons\r\nfunction createSetupActionButtons(move)\r\n    self.createButton({\r\n       label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n       position={-1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n       font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    self.createButton({\r\n      label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n      position={-1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n      font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    if move == false then\r\n      self.createButton({\r\n          label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n          position={1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n          font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\r\n        })\r\n\r\n        self.createButton({\r\n            label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n            position={-1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n            font_size=250, color={0,0,0}, font_color={1,1,1}\r\n        })\r\n\r\n        if fresh == false then\r\n            self.createButton({\r\n                label=\"Mise à Jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                position={1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=180, color={0,0,0}, font_color={0.75,0.75,1}\r\n            })\r\n            self.createButton({\r\n                label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                position={1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\r\n            })\r\n        end\r\n    end\r\n\r\n    self.createButton({\r\n        label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n        position={0,0.3,-2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n\r\n--During Setup\r\n\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = {0,0,1,0.6}\r\n    local color = {0,1,0,0.6}\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({index=previousIndex, color=colorMove})\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({index=index, color=color})\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n            lock=obj.getLock(),\r\n            tint=obj.getColorTint()\r\n        }\r\n        obj.highlightOn({0,1,0})\r\n    else\r\n        color = {0.75,0.25,0.25,0.6}\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({index=index, color=color})\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({index=index, color={0,1,0,0.6}})\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n                    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n                    lock=obj.getLock(),\r\n                    tint=obj.getColorTint()\r\n                }\r\n                obj.highlightOn({0,1,0})\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = {0.75,0.25,0.25,0.6}\r\n                self.editButton({index=index, color=color})\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", {1,1,1})\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", {1, 0.25, 0.25})\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", {0.75, 0.75, 1})\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", {0.75, 0.25, 0.25})\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k,v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", {0.25, 0.75, 0.25})\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", {1.0, 0.25, 0.25})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Removed\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", {0.75, 0.75, 1})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\n\r\n--After Setup\r\n\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={0,0.3,2.8}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={2,0.3,0}, rotation={0,90,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---  \r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    local bagObjList = self.getObjects()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid=guid, position=entry.pos, rotation=entry.rot, smooth=false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n\r\n--Utility functions\r\n\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x-p1.x)\r\n    deltaPos.y = (p2.y-p1.y) + yOffset\r\n    deltaPos.z = (p2.z-p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10^(dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample:\r\n{'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'}\r\n--]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend",
          "LuaScriptState": "{\"ml\":{\"06edc7\":{\"lock\":false,\"pos\":{\"x\":10.9999980926514,\"y\":1.5195460319519,\"z\":19.0000038146973},\"rot\":{\"x\":0.0108915204182267,\"y\":179.999481201172,\"z\":0.00494821881875396},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"0aeab2\":{\"lock\":false,\"pos\":{\"x\":2.99999833106995,\"y\":1.50492143630981,\"z\":10.0000038146973},\"rot\":{\"x\":0.00420764088630676,\"y\":224.975219726563,\"z\":0.0112025709822774},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"1067a4\":{\"lock\":false,\"pos\":{\"x\":-25.9996490478516,\"y\":1.76629984378815,\"z\":20.0000152587891},\"rot\":{\"x\":4.77394041809021E-06,\"y\":0.000296575715765357,\"z\":3.63383847457044E-08},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}},\"14a5bc\":{\"lock\":false,\"pos\":{\"x\":-1.47033983921574E-06,\"y\":1.50575077533722,\"z\":13.0000038146973},\"rot\":{\"x\":0.0108915092423558,\"y\":179.999481201172,\"z\":0.00495147379115224},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"195e4a\":{\"lock\":false,\"pos\":{\"x\":-1.63377376338758E-06,\"y\":1.50575077533722,\"z\":13.0000038146973},\"rot\":{\"x\":0.0108916405588388,\"y\":179.999572753906,\"z\":0.00495276739820838},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"1c7fa1\":{\"lock\":false,\"pos\":{\"x\":-2.42264218286437E-06,\"y\":1.52049601078033,\"z\":19.0000038146973},\"rot\":{\"x\":0.0108918845653534,\"y\":179.994827270508,\"z\":0.0049472595565021},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"204732\":{\"lock\":false,\"pos\":{\"x\":2.99999833106995,\"y\":1.50492143630981,\"z\":10.0000028610229},\"rot\":{\"x\":0.00420642038807273,\"y\":224.98258972168,\"z\":0.0112033812329173},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"21bfdd\":{\"lock\":false,\"pos\":{\"x\":-2.67850850832474E-06,\"y\":1.51821494102478,\"z\":7.00000333786011},\"rot\":{\"x\":0.010891592130065,\"y\":179.998596191406,\"z\":0.00494797481223941},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"220649\":{\"lock\":false,\"pos\":{\"x\":-1.52764232552727E-06,\"y\":1.50575077533722,\"z\":13.0000038146973},\"rot\":{\"x\":0.0108916712924838,\"y\":179.999633789063,\"z\":0.00495215505361557},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"232a70\":{\"lock\":false,\"pos\":{\"x\":2.99999833106995,\"y\":1.50492143630981,\"z\":10.0000028610229},\"rot\":{\"x\":0.00420428346842527,\"y\":224.996231079102,\"z\":0.0112114017829299},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"2a823b\":{\"lock\":false,\"pos\":{\"x\":-33.0000114440918,\"y\":1.76530003547668,\"z\":16.9999942779541},\"rot\":{\"x\":-2.59302441918408E-06,\"y\":179.986770629883,\"z\":-1.14685781227308E-06},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"2f42e1\":{\"lock\":false,\"pos\":{\"x\":16.4999980926514,\"y\":1.50546622276306,\"z\":19.0000038146973},\"rot\":{\"x\":-0.00494585977867246,\"y\":269.989013671875,\"z\":0.0108934249728918},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"39d218\":{\"lock\":false,\"pos\":{\"x\":-22.4999942779541,\"y\":1.76629984378815,\"z\":20.0000057220459},\"rot\":{\"x\":4.65550874650944E-06,\"y\":2.52667596214451E-05,\"z\":-3.86322724921229E-08},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}},\"3c6cd6\":{\"lock\":false,\"pos\":{\"x\":5.49999809265137,\"y\":1.50413525104523,\"z\":7.00000333786011},\"rot\":{\"x\":-0.00494676688686013,\"y\":269.994842529297,\"z\":0.0108987940475345},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"3d0be8\":{\"lock\":false,\"pos\":{\"x\":10.9999980926514,\"y\":1.51726496219635,\"z\":7.00000238418579},\"rot\":{\"x\":0.0108916237950325,\"y\":179.998062133789,\"z\":0.00494782626628876},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"3d81f6\":{\"lock\":false,\"pos\":{\"x\":2.99999833106995,\"y\":1.50606203079224,\"z\":16.0000019073486},\"rot\":{\"x\":0.0112025337293744,\"y\":135.024139404297,\"z\":-0.00419866479933262},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"400164\":{\"lock\":false,\"pos\":{\"x\":7.99999856948853,\"y\":1.50448966026306,\"z\":10.0000038146973},\"rot\":{\"x\":0.0112019293010235,\"y\":135.019546508789,\"z\":-0.00420065829530358},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"43f53e\":{\"lock\":false,\"pos\":{\"x\":5.49999856948853,\"y\":1.50641632080078,\"z\":19.0000038146973},\"rot\":{\"x\":-0.00494691077619791,\"y\":269.9951171875,\"z\":0.0108991591259837},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"46ef5f\":{\"lock\":false,\"pos\":{\"x\":-3.08861694975349E-06,\"y\":1.52049601078033,\"z\":19.0000057220459},\"rot\":{\"x\":0.0108915697783232,\"y\":180.000106811523,\"z\":0.00494823185727},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"4f9c28\":{\"lock\":false,\"pos\":{\"x\":7.99999809265137,\"y\":1.50448966026306,\"z\":10.0000028610229},\"rot\":{\"x\":0.0112026762217283,\"y\":135.028564453125,\"z\":-0.00419864058494568},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"5354b7\":{\"lock\":false,\"pos\":{\"x\":7.99999856948853,\"y\":1.50563013553619,\"z\":16.0000019073486},\"rot\":{\"x\":0.00420761248096824,\"y\":224.976593017578,\"z\":0.0112026147544384},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"60bf33\":{\"lock\":false,\"pos\":{\"x\":-3.60467652171792E-06,\"y\":1.51821494102478,\"z\":7.00000286102295},\"rot\":{\"x\":0.0108914952725172,\"y\":179.999969482422,\"z\":0.00494821881875396},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"63027a\":{\"lock\":false,\"pos\":{\"x\":-20.4999961853027,\"y\":1.83529949188232,\"z\":24.0000019073486},\"rot\":{\"x\":-3.65178448191728E-06,\"y\":179.990921020508,\"z\":1.33164371618477E-06},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"66f933\":{\"lock\":false,\"pos\":{\"x\":10.9999980926514,\"y\":1.51726496219635,\"z\":7.00000286102295},\"rot\":{\"x\":0.0108915437012911,\"y\":179.999481201172,\"z\":0.00494812848046422},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"6be9fb\":{\"lock\":false,\"pos\":{\"x\":7.99999761581421,\"y\":1.50563013553619,\"z\":16.0000019073486},\"rot\":{\"x\":0.0042084320448339,\"y\":224.972137451172,\"z\":0.0112020205706358},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"6cc831\":{\"lock\":false,\"pos\":{\"x\":10.9999980926514,\"y\":1.51726496219635,\"z\":7.00000238418579},\"rot\":{\"x\":0.0108914226293564,\"y\":180.000961303711,\"z\":0.00494834966957569},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"70a1d6\":{\"lock\":false,\"pos\":{\"x\":10.9999980926514,\"y\":1.5195460319519,\"z\":19.0000057220459},\"rot\":{\"x\":0.0108919115737081,\"y\":179.995880126953,\"z\":0.00494739599525929},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"72f879\":{\"lock\":false,\"pos\":{\"x\":21.9999980926514,\"y\":1.51859605312347,\"z\":19.0000038146973},\"rot\":{\"x\":0.0108908703550696,\"y\":180.008255004883,\"z\":0.00494970986619592},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"7558e3\":{\"lock\":false,\"pos\":{\"x\":5.49999856948853,\"y\":1.50641632080078,\"z\":19.0000038146973},\"rot\":{\"x\":-0.00494688050821424,\"y\":269.9951171875,\"z\":0.0108987474814057},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"75f5b7\":{\"lock\":false,\"pos\":{\"x\":-29.0001,\"y\":1.7653,\"z\":16.9998},\"rot\":{\"x\":0,\"y\":179.9994,\"z\":0},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"825940\":{\"lock\":false,\"pos\":{\"x\":-3.29086174133408E-06,\"y\":1.52049601078033,\"z\":19.0000038146973},\"rot\":{\"x\":0.0108917579054832,\"y\":179.997573852539,\"z\":0.00494787562638521},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"88507a\":{\"lock\":false,\"pos\":{\"x\":21.9999980926514,\"y\":1.51859605312347,\"z\":19.0000038146973},\"rot\":{\"x\":0.0108915492892265,\"y\":180.000122070313,\"z\":0.00494832079857588},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"8eb5a4\":{\"lock\":false,\"pos\":{\"x\":-2.39801624957181E-06,\"y\":1.51821494102478,\"z\":7.00000333786011},\"rot\":{\"x\":0.0108912289142609,\"y\":180.003875732422,\"z\":0.00494897970929742},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"8fefda\":{\"lock\":false,\"pos\":{\"x\":12,\"y\":1.51546776294708,\"z\":-1.99999964237213},\"rot\":{\"x\":0.0108915865421295,\"y\":179.998794555664,\"z\":0.00494807865470648},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"92eaf8\":{\"lock\":false,\"pos\":{\"x\":7.99999809265137,\"y\":1.50448966026306,\"z\":10.0000038146973},\"rot\":{\"x\":0.0112019032239914,\"y\":135.024887084961,\"z\":-0.00419870857149363},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"9d232c\":{\"lock\":false,\"pos\":{\"x\":16.4999980926514,\"y\":1.50546646118164,\"z\":19.0000038146973},\"rot\":{\"x\":-0.00495155202224851,\"y\":270.018188476563,\"z\":0.0108900060877204},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"9f298f\":{\"lock\":false,\"pos\":{\"x\":-2.99983406066895,\"y\":1.51847398281097,\"z\":7.00018119812012},\"rot\":{\"x\":0.0108902687206864,\"y\":180.013488769531,\"z\":0.0049507743678987},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"a43d95\":{\"lock\":false,\"pos\":{\"x\":-5.5,\"y\":1.5055,\"z\":4},\"rot\":{\"x\":359.9891,\"y\":0.005,\"z\":-0.0049},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}},\"a7b6bf\":{\"lock\":false,\"pos\":{\"x\":10.9999990463257,\"y\":1.50480079650879,\"z\":13.0000028610229},\"rot\":{\"x\":0.0108919627964497,\"y\":179.994979858398,\"z\":0.00495126144960523},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"a7fa09\":{\"lock\":false,\"pos\":{\"x\":7.99999856948853,\"y\":1.50563013553619,\"z\":16.0000038146973},\"rot\":{\"x\":0.0042079845443368,\"y\":224.973831176758,\"z\":0.0112018417567015},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"a99e44\":{\"lock\":false,\"pos\":{\"x\":5.49999856948853,\"y\":1.50413525104523,\"z\":7.00000333786011},\"rot\":{\"x\":-0.00494666025042534,\"y\":269.994812011719,\"z\":0.0109037151560187},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"ad3e8b\":{\"lock\":false,\"pos\":{\"x\":2.99999833106995,\"y\":1.50606203079224,\"z\":16.0000038146973},\"rot\":{\"x\":0.0112000983208418,\"y\":134.993942260742,\"z\":-0.00420540571212769},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"b042a5\":{\"lock\":false,\"pos\":{\"x\":-23.4999980926514,\"y\":1.76629936695099,\"z\":25.5000038146973},\"rot\":{\"x\":5.29966746398713E-06,\"y\":0.000116949406219646,\"z\":6.99919553426298E-07},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}},\"bad694\":{\"lock\":false,\"pos\":{\"x\":5.49999856948853,\"y\":1.50760626792908,\"z\":20.0000038146973},\"rot\":{\"x\":359.989105224609,\"y\":-0.000806594849564135,\"z\":-0.00494815921410918},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}},\"bc0ba0\":{\"lock\":true,\"pos\":{\"x\":22,\"y\":1.51859605312347,\"z\":19.0000038146973},\"rot\":{\"x\":0.0108926240354776,\"y\":179.985473632813,\"z\":0.00494556641206145},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"be55dc\":{\"lock\":false,\"pos\":{\"x\":5.48669958114624,\"y\":1.50413489341736,\"z\":6.99215078353882},\"rot\":{\"x\":-0.00494658062234521,\"y\":269.994873046875,\"z\":0.0109011745080352},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"c72403\":{\"lock\":false,\"pos\":{\"x\":-26.4999961853027,\"y\":1.83529949188232,\"z\":24.0000019073486},\"rot\":{\"x\":-5.09198252984788E-06,\"y\":180.005523681641,\"z\":2.85412795619777E-07},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"cade6c\":{\"lock\":false,\"pos\":{\"x\":5.5001974105835,\"y\":1.51888048648834,\"z\":13.0000076293945},\"rot\":{\"x\":0.0108920000493526,\"y\":179.994537353516,\"z\":180.004959106445},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"d38e7c\":{\"lock\":false,\"pos\":{\"x\":2.99999761581421,\"y\":1.50606203079224,\"z\":16.0000038146973},\"rot\":{\"x\":0.0112019684165716,\"y\":135.022857666016,\"z\":-0.00420006131753325},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"d3f185\":{\"lock\":false,\"pos\":{\"x\":16.4999980926514,\"y\":1.50546634197235,\"z\":19.0000038146973},\"rot\":{\"x\":0.00495009962469339,\"y\":90.0118713378906,\"z\":359.989105224609},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"d42bcb\":{\"lock\":false,\"pos\":{\"x\":15,\"y\":1.5152086019516,\"z\":-2.00010800361633},\"rot\":{\"x\":0.0108911115676165,\"y\":180.00471496582,\"z\":0.00494911521673203},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"d6fa6a\":{\"lock\":false,\"pos\":{\"x\":10.9999980926514,\"y\":1.51659965515137,\"z\":3.50000333786011},\"rot\":{\"x\":0.0108936429023743,\"y\":179.974807739258,\"z\":0.00494349002838135},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"d7b93b\":{\"lock\":false,\"pos\":{\"x\":-5.5,\"y\":1.5089,\"z\":22},\"rot\":{\"x\":359.9891,\"y\":0.005,\"z\":-0.005},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}},\"d83899\":{\"lock\":false,\"pos\":{\"x\":10.9999990463257,\"y\":1.50480079650879,\"z\":13.0000038146973},\"rot\":{\"x\":0.0108920400962234,\"y\":179.995162963867,\"z\":0.00495448987931013},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"dc7905\":{\"lock\":false,\"pos\":{\"x\":10.9999980926514,\"y\":1.5195460319519,\"z\":19.0000038146973},\"rot\":{\"x\":0.0108913872390985,\"y\":180.001754760742,\"z\":0.00494860904291272},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e30486\":{\"lock\":false,\"pos\":{\"x\":18,\"y\":1.51494956016541,\"z\":-2},\"rot\":{\"x\":0.0108915790915489,\"y\":179.999221801758,\"z\":0.00494802044704556},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e46534\":{\"lock\":false,\"pos\":{\"x\":10.9999980926514,\"y\":1.50480079650879,\"z\":13.0000038146973},\"rot\":{\"x\":0.0108918761834502,\"y\":179.995056152344,\"z\":0.00494691776111722},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"ea7bc0\":{\"lock\":false,\"pos\":{\"x\":-22,\"y\":1.76630055904388,\"z\":13},\"rot\":{\"x\":5.12599581270479E-06,\"y\":0.000880237901583314,\"z\":-3.95888690718493E-07},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}},\"f12ee8\":{\"lock\":false,\"pos\":{\"x\":5.49999856948853,\"y\":1.50641644001007,\"z\":19.0000038146973},\"rot\":{\"x\":-0.00494708493351936,\"y\":269.994934082031,\"z\":0.0108967944979668},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"f2c013\":{\"lock\":false,\"pos\":{\"x\":5.49999856948853,\"y\":1.50760626792908,\"z\":20.0000038146973},\"rot\":{\"x\":359.989105224609,\"y\":0.00545277679339051,\"z\":-0.00494927167892456},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}},\"f3db90\":{\"lock\":false,\"pos\":{\"x\":-23.4999961853027,\"y\":1.83529949188232,\"z\":24.0000038146973},\"rot\":{\"x\":-6.94834488967899E-06,\"y\":179.992248535156,\"z\":-3.2621775858388E-07},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"f9e05e\":{\"lock\":false,\"pos\":{\"x\":-29,\"y\":1.7653,\"z\":17},\"rot\":{\"x\":0,\"y\":179.9995,\"z\":0},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"fbb748\":{\"lock\":false,\"pos\":{\"x\":-29,\"y\":1.7653,\"z\":17},\"rot\":{\"x\":0,\"y\":180,\"z\":0},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"fe84d6\":{\"lock\":false,\"pos\":{\"x\":5.49999856948853,\"y\":1.50760626792908,\"z\":20.0000038146973},\"rot\":{\"x\":359.989105224609,\"y\":359.982208251953,\"z\":-0.0049451207742095},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}}}}",
          "XmlUI": "",
          "ContainedObjects": [
            {
              "GUID": "1067a4",
              "Name": "Custom_Model",
              "Transform": {
                "posX": -25.99965,
                "posY": 1.77099967,
                "posZ": 20.0000153,
                "rotX": 5.152983E-06,
                "rotY": 0.0004006817,
                "rotZ": 1.48671035E-07,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "Text Tool",
              "Description": "",
              "GMNotes": "",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 0.0,
                "g": 0.0,
                "b": 0.0,
                "a": 0.0
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": false,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": false,
              "Tooltip": false,
              "GridProjection": false,
              "HideWhenFaceDown": false,
              "Hands": false,
              "CustomMesh": {
                "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/1478820768302617365/27883B7913E0E69143C3AA03493B7E7C4E8C29C0/",
                "DiffuseURL": "",
                "NormalURL": "",
                "ColliderURL": "",
                "Convex": true,
                "MaterialIndex": 1,
                "TypeIndex": 0,
                "CastShadows": true
              },
              "LuaScript": "-- Code for bag to identify text tool objects\r\nmovableTextTool_cowgoesmoo33 = true\r\n\r\n-- Number of characters before the text box width expands.\r\nEXPAND_INTERVAL = 20\r\n\r\n-- This table controls what is passed between save/load\r\ndata = {}\r\n\r\nfunction onLoad(saved_data)\r\n  if saved_data ~= '' then\r\n    data = JSON.decode(saved_data)\r\n    if data.text ~= '' then\r\n      self.interactable = data.interactable\r\n      staticMode()\r\n      return\r\n    end\r\n  else\r\n    data = {size=200, color=Color(0,0,0), text='', interactable=true,\r\n        enter_to_finish=false, autolock=false, autolift=false,\r\n        hover_height=0.05, box_transparency=1}\r\n  end\r\n\r\n  inputMode()\r\nend\r\n\r\n-- True if in the middle of delay after pressing Enter (with enter_to_finish on)\r\nfinishing = false\r\nfunction input_func(obj, color, input, stillEditing)\r\n  local params = getBox(input)\r\n  if params then\r\n    params.value = input\r\n    self.editInput(params)\r\n  end\r\n\r\n  if not stillEditing then\r\n    data.text = input\r\n    updateState()\r\n    if input ~= '' then staticMode(color) end\r\n  elseif data.enter_to_finish then\r\n    -- If enter is pressed: remove last newline and force finish\r\n    if not finishing and input:sub(-1) == '\\n' then\r\n      finishing = true\r\n      -- Delay to avoid user's Enter keypress being detected (opens chat box)\r\n      Wait.frames(function()\r\n        input = input:sub(1, -2)\r\n        data.text = input\r\n        updateState()\r\n        if input ~= '' then staticMode(color) else inputMode() end\r\n        finishing = false\r\n      end, 10)\r\n    end\r\n  end\r\nend\r\n\r\n-- When the inpupt box appears and lets the player type in it.\r\nfunction inputMode()\r\n  self.clearContextMenu()\r\n  self.clearInputs()\r\n  self.clearButtons()\r\n\r\n  local size = getBox(data.text, true)\r\n\r\n  self.createInput({\r\n    input_function = \"input_func\",\r\n    function_owner = self,\r\n    label          = \"Type Here\",\r\n    alignment      = 3,\r\n    position       = {x=0, y=data.hover_height, z=0},\r\n    rotation       = {0, 180, 0},\r\n    width          = size.width,\r\n    height         = size.height,\r\n    color          = getBackground(data.color),\r\n    font_color     = data.color,\r\n    font_size      = data.size,\r\n    value          = data.text,\r\n  })\r\n\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\nend\r\n\r\n-- When the input box disappears and displays the text.\r\nfunction staticMode(player)\r\n  self.clearContextMenu()\r\n  if data.autolock then\r\n    self.locked = true\r\n  end\r\n  if self.getInputs() and #self.getInputs() ~= 0 then\r\n    self.removeInput(0)\r\n  end\r\n\r\n  -- Clear from selecting player\r\n  if player then\r\n    self.removeFromPlayerSelection(player)\r\n  end\r\n\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  self.createButton({\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=self,\r\n    position={0,data.hover_height,0}, rotation={0,180,0}, height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  })\r\n\r\n  self.addContextMenuItem('Edit Text', function(color)\r\n    self.removeFromPlayerSelection(color)\r\n    inputMode()\r\n  end)\r\n  self.addContextMenuItem('Clear', function(color)\r\n    applyMultiple(color, 'clear', _, true)\r\n  end)\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\n  self.addContextMenuItem('Permanently Attach', attemptAttach)\r\n  self.addContextMenuItem('Permalock', function(color)\r\n    applyMultiple(color, 'permalock', _, true)\r\n  end)\r\nend\r\n\r\nfunction changeSize(params)\r\n  local delta = params[1]\r\n  local newSize = data.size + delta\r\n  if newSize > 800  or newSize < 50 then\r\n    return\r\n  end\r\n  data.size = newSize\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_size=data.size})\r\n  else\r\n    local size = getBox(data.text, true)\r\n    self.editInput({width=size.width, height=size.height, font_size=data.size})\r\n  end\r\nend\r\n\r\nfunction setColor(params)\r\n  if params and params[1] then\r\n    data.color = params[1]\r\n  else\r\n    data.color = self.getColorTint():setAt('a', 1) -- Take on color of object tint\r\n  end\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_color=data.color})\r\n  else\r\n    self.editInput({font_color=data.color, color=getBackground(data.color)})\r\n  end\r\nend\r\n\r\nfunction getBackground(color) --determines whether to use black or white depending on luminance\r\n  local r,g,b = Color(color):get()\r\n\r\n  local lum = 0.2126*r + 0.7152*g + 0.0722*b\r\n  if lum > 0.75 then\r\n    return {0.2,0.2,0.2, data.box_transparency}\r\n  else\r\n    return {1,1,1, data.box_transparency}\r\n  end\r\nend\r\n\r\nfunction clear()\r\n  data.text = ''\r\n  updateState()\r\n  inputMode()\r\nend\r\n\r\nfunction permalock()\r\n  self.interactable = false\r\n  data.interactable = false\r\n  updateState()\r\nend\r\n\r\nlocal target_script = [[\r\nfunction onLoad(script_state)\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    for _,entry in ipairs(state) do\r\n      self.createButton(entry)\r\n    end\r\n    self.addContextMenuItem('Clear All Text', function(color)\r\n      self.clearContextMenu()\r\n      self.clearButtons()\r\n      self.script_state = ''\r\n      self.script_code = ''\r\n    end)\r\n  end\r\nend\r\n]]\r\n\r\nfunction attemptAttach(player_color)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  local attachee\r\n  local attachers = {}\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if obj ~= self then\r\n        table.insert(attachers, obj)\r\n      end\r\n    else\r\n      if attachee then\r\n        broadcastToColor(\"More than one target selected.\", player_color)\r\n        return\r\n      else\r\n        attachee = obj\r\n      end\r\n    end\r\n  end\r\n  if attachee then\r\n    local code = attachee.script_code\r\n    if code and code ~= '' and code ~= target_script then\r\n      broadcastToColor(\"Warning: script on card has been overriden. Rewind time to undo.\", player_color)\r\n    end\r\n    for i,attacher in ipairs(attachers) do\r\n      attacher.call('attach', {target = attachee})\r\n    end\r\n    attach({target = attachee})\r\n    local type, flip = attachee.type, attachee.getRotation().z\r\n    if (type == 'Card' or type == 'Deck') and flip > 175 and flip < 185 then\r\n      broadcastToColor(\"Warning: text will not display if card or deck is facing down.\", player_color)\r\n    end\r\n  else\r\n    broadcastToColor(\"You must have a target object in your selection (using click-and-drag or Ctrl+Click) to use this option.\", player_color)\r\n  end\r\nend\r\n\r\nfunction attach(params)\r\n  local target = params.target\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  local textRotation = self.getRotation():sub(target.getRotation())\r\n    :add(Vector(180, 0, 180))\r\n\r\n  local textPosition = target.positionToLocal(\r\n    self.getPosition():add(Vector(0, data.hover_height, 0))\r\n  )\r\n  textPosition.x = -textPosition.x\r\n\r\n  local textScale = {}\r\n  textScale.x = self.getScale().x / target.getScale().x\r\n  textScale.y = self.getScale().x / target.getScale().y\r\n  textScale.z = self.getScale().x / target.getScale().z\r\n\r\n  local details = {\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=nil,\r\n    position=textPosition,\r\n    rotation=textRotation,\r\n    scale=textScale,\r\n    height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  }\r\n\r\n  target.createButton(details)\r\n\r\n  local script_state = target.script_state\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    table.insert(state, details)\r\n    target.script_state = JSON.encode(state)\r\n  else\r\n    target.script_state = JSON.encode({[1]=details})\r\n  end\r\n\r\n  target.script_code = target_script\r\n\r\n  self.destruct()\r\nend\r\n\r\nfunction applyMultiple(player_color, func_string, params, static_only)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if not static_only or obj.call('isStatic') then\r\n        obj.call(func_string, params)\r\n      end\r\n    end\r\n  end\r\nend\r\n\r\nfunction isStatic()\r\n  local input = self.getInputs()\r\n  return not input or #input == 0\r\nend\r\n\r\nfunction getBox(input, force)\r\n  local maxLength, lineCount = EXPAND_INTERVAL, 1\r\n  local lineLength = 0\r\n  for i = 1, #input do\r\n    local c = input:sub(i,i)\r\n    if c == '\\n' then\r\n      lineCount = lineCount + 1\r\n      if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n      lineLength = 0\r\n    else\r\n      lineLength = lineLength + 1\r\n    end\r\n  end\r\n  if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n\r\n  newWidth = data.size * maxLength * 0.9\r\n  newHeight = data.size * lineCount + 23\r\n\r\n  if force or boxWidth ~= newWidth or boxHeight ~= newHeight then\r\n    boxWidth, boxHeight = newWidth, newHeight\r\n    return {width = boxWidth, height = boxHeight}\r\n  end\r\n  return nil\r\nend\r\n\r\ntemp_lift = nil\r\nfunction onPickUp(player_color)\r\n  if data.autolift then\r\n    local player = Player[player_color]\r\n    temp_lift = player.lift_height\r\n    player.lift_height = 0\r\n  end\r\nend\r\n\r\nfunction onDrop(player_color)\r\n  if data.autolift and temp_lift then\r\n    Player[player_color].lift_height = temp_lift\r\n  end\r\nend\r\n\r\n-- Should be called every time data is modified, allows info to be saved on copy/paste\r\nfunction updateState()\r\n  self.script_state = JSON.encode(data)\r\nend\r\n\r\nfunction onSave()\r\n  self.script_state = JSON.encode(data)\r\n  return self.script_state\r\nend",
              "LuaScriptState": "{\"autolift\":false,\"autolock\":false,\"box_transparency\":1,\"color\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1},\"enter_to_finish\":false,\"hover_height\":0.05,\"interactable\":true,\"size\":250,\"text\":\"3)\"}",
              "XmlUI": ""
            },
            {
              "GUID": "2a823b",
              "Name": "Custom_Model_Bag",
              "Transform": {
                "posX": -33.0000153,
                "posY": 1.77000022,
                "posZ": 16.9999924,
                "rotX": -4.27960231E-06,
                "rotY": 179.986816,
                "rotZ": -2.469759E-06,
                "scaleX": 1.0,
                "scaleY": 0.562042058,
                "scaleZ": 1.0
              },
              "Nickname": "Complots",
              "Description": "",
              "GMNotes": "",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": true,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": true,
              "Tooltip": true,
              "GridProjection": false,
              "HideWhenFaceDown": false,
              "Hands": false,
              "MaterialIndex": -1,
              "MeshIndex": -1,
              "CustomMesh": {
                "MeshURL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/advboxes/tuckbox_h_MSH.obj",
                "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/1983303656990210870/D2994AC54A968C74968E19B4F03195BC3664AEE5/",
                "NormalURL": "",
                "ColliderURL": "",
                "Convex": true,
                "MaterialIndex": 3,
                "TypeIndex": 6,
                "CustomShader": {
                  "SpecularColor": {
                    "r": 1.0,
                    "g": 1.0,
                    "b": 1.0
                  },
                  "SpecularIntensity": 0.0,
                  "SpecularSharpness": 2.0,
                  "FresnelStrength": 0.0
                },
                "CastShadows": true
              },
              "Bag": {
                "Order": 2
              },
              "LuaScript": "",
              "LuaScriptState": "",
              "XmlUI": "",
              "ContainedObjects": [
                {
                  "GUID": "de50fc",
                  "Name": "Custom_Model_Bag",
                  "Transform": {
                    "posX": -34.0,
                    "posY": 2.415914,
                    "posZ": 17.0,
                    "rotX": -0.000298604835,
                    "rotY": 180.015167,
                    "rotZ": -0.00185496977,
                    "scaleX": 0.7,
                    "scaleY": 0.7,
                    "scaleZ": 0.7
                  },
                  "Nickname": "Indicibles Abominations",
                  "Description": "Complot",
                  "GMNotes": "",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 1.0,
                    "g": 1.0,
                    "b": 1.0
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": true,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": true,
                  "Tooltip": true,
                  "GridProjection": false,
                  "HideWhenFaceDown": false,
                  "Hands": false,
                  "MaterialIndex": -1,
                  "MeshIndex": -1,
                  "CustomMesh": {
                    "MeshURL": "https://pastebin.com/raw/ALrYhQGb",
                    "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/5077277234366558480/31140655872853ACBC44735F25B0EE7E19C72536/",
                    "NormalURL": "",
                    "ColliderURL": "",
                    "Convex": true,
                    "MaterialIndex": 3,
                    "TypeIndex": 6,
                    "CustomShader": {
                      "SpecularColor": {
                        "r": 1.0,
                        "g": 1.0,
                        "b": 1.0
                      },
                      "SpecularIntensity": 0.0,
                      "SpecularSharpness": 2.0,
                      "FresnelStrength": 0.0
                    },
                    "CastShadows": true
                  },
                  "Bag": {
                    "Order": 0
                  },
                  "LuaScript": "-- Utility memory bag by Directsun\r\n-- Version 2.7.0\r\n-- Fork of Memory Bag 2.0 by MrStump\r\n--\r\n-- Want to contribute? Create an issue or fork the code on GitHub and submit a pull request:\r\n-- https://github.com/sunflowermans/TTS-UtilityMemoryBag\r\n\r\n\r\nfunction updateSave()\r\n    local data_to_save = {[\"ml\"]=memoryList}\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n        -- memoryList[guid].rot.x = movedRotation.x\r\n        -- memoryList[guid].rot.y = movedRotation.y\r\n        -- memoryList[guid].rot.z = movedRotation.z\r\n    end\r\n\r\n    --theList[obj.getGUID()] = {\r\n    --    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n    --    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n    --    lock=obj.getLock()\r\n    --}\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n\r\n--Beginning Setup\r\n\r\n\r\n--Make setup button\r\nfunction createSetupButton()\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", {0.75, 0.75, 1})\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\n    -- return getAllObjects()\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1 * 1/self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor +2\r\n            objPos.z = objPos.z * globalScaleFactor\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = {0.75,0.25,0.25,0.6}\r\n            local colorMove = {0,0,1,0.6}\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function=funcName, function_owner=self,\r\n                position=objPos, rotation=rot, height=1000, width=1000,\r\n                color=color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n--Creates submit and cancel buttons\r\nfunction createSetupActionButtons(move)\r\n    self.createButton({\r\n       label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n       position={-1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n       font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    self.createButton({\r\n      label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n      position={-1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n      font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    if move == false then\r\n      self.createButton({\r\n          label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n          position={1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n          font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\r\n        })\r\n\r\n        self.createButton({\r\n            label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n            position={-1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n            font_size=250, color={0,0,0}, font_color={1,1,1}\r\n        })\r\n\r\n        if fresh == false then\r\n            self.createButton({\r\n                label=\"Mise à Jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                position={1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=180, color={0,0,0}, font_color={0.75,0.75,1}\r\n            })\r\n            self.createButton({\r\n                label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                position={1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\r\n            })\r\n        end\r\n    end\r\n\r\n    self.createButton({\r\n        label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n        position={0,0.3,-2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n\r\n--During Setup\r\n\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = {0,0,1,0.6}\r\n    local color = {0,1,0,0.6}\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({index=previousIndex, color=colorMove})\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({index=index, color=color})\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n            lock=obj.getLock(),\r\n            tint=obj.getColorTint()\r\n        }\r\n        obj.highlightOn({0,1,0})\r\n    else\r\n        color = {0.75,0.25,0.25,0.6}\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({index=index, color=color})\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({index=index, color={0,1,0,0.6}})\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n                    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n                    lock=obj.getLock(),\r\n                    tint=obj.getColorTint()\r\n                }\r\n                obj.highlightOn({0,1,0})\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = {0.75,0.25,0.25,0.6}\r\n                self.editButton({index=index, color=color})\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", {1,1,1})\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", {1, 0.25, 0.25})\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", {0.75, 0.75, 1})\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", {0.75, 0.25, 0.25})\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k,v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", {0.25, 0.75, 0.25})\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", {1.0, 0.25, 0.25})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Removed\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", {0.75, 0.75, 1})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\n\r\n--After Setup\r\n\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={0,0.3,2.8}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={2,0.3,0}, rotation={0,90,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---  \r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    local bagObjList = self.getObjects()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid=guid, position=entry.pos, rotation=entry.rot, smooth=false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n\r\n--Utility functions\r\n\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x-p1.x)\r\n    deltaPos.y = (p2.y-p1.y) + yOffset\r\n    deltaPos.z = (p2.z-p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10^(dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample:\r\n{'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'}\r\n--]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend",
                  "LuaScriptState": "{\"ml\":{\"7972d3\":{\"lock\":false,\"pos\":{\"x\":-24.5,\"y\":1.7789,\"z\":2.5},\"rot\":{\"x\":0,\"y\":179.9754,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"a985e3\":{\"lock\":false,\"pos\":{\"x\":30.5,\"y\":1.5561,\"z\":-8.5},\"rot\":{\"x\":0.0942,\"y\":180.001,\"z\":180.0002},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}}}}",
                  "XmlUI": "",
                  "ContainedObjects": [
                    {
                      "GUID": "7972d3",
                      "Name": "Card",
                      "Transform": {
                        "posX": -28.0000057,
                        "posY": 1.77890623,
                        "posZ": 2.999994,
                        "rotX": -4.796686E-06,
                        "rotY": 179.9754,
                        "rotZ": -2.66070934E-08,
                        "scaleX": 1.0,
                        "scaleY": 1.0,
                        "scaleZ": 1.0
                      },
                      "Nickname": "",
                      "Description": "",
                      "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": -2,\n  \"id\": \"87043\",\n  \"traits\": \"Ancient One. Tindalos. Elite.\",\n  \"type\": \"Enemy\",\n  \"victory\": 0\n}",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 0.713235259,
                        "g": 0.713235259,
                        "b": 0.713235259
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": true,
                      "GridProjection": false,
                      "HideWhenFaceDown": true,
                      "Hands": true,
                      "CardID": 1110604,
                      "SidewaysCard": false,
                      "CustomDeck": {
                        "11106": {
                          "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                          "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                          "NumWidth": 10,
                          "NumHeight": 7,
                          "BackIsHidden": true,
                          "UniqueBack": false,
                          "Type": 0
                        }
                      },
                      "LuaScript": "",
                      "LuaScriptState": "",
                      "XmlUI": ""
                    },
                    {
                      "GUID": "a985e3",
                      "Name": "Card",
                      "Transform": {
                        "posX": -31.50001,
                        "posY": 1.77890635,
                        "posZ": 2.4999783,
                        "rotX": -4.959654E-06,
                        "rotY": 180.000381,
                        "rotZ": 180.0,
                        "scaleX": 1.0,
                        "scaleY": 1.0,
                        "scaleZ": 1.0
                      },
                      "Nickname": "Indicibles Abominations",
                      "Description": "Complot",
                      "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87042\",\n  \"traits\": \"Plot.\",\n  \"type\": \"Story\",\n  \"victory\": 1\n}",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 0.713235259,
                        "g": 0.713235259,
                        "b": 0.713235259
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": true,
                      "GridProjection": false,
                      "HideWhenFaceDown": true,
                      "Hands": true,
                      "CardID": 1104902,
                      "SidewaysCard": false,
                      "CustomDeck": {
                        "11049": {
                          "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                          "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                          "NumWidth": 10,
                          "NumHeight": 7,
                          "BackIsHidden": true,
                          "UniqueBack": true,
                          "Type": 0
                        }
                      },
                      "LuaScript": "",
                      "LuaScriptState": "",
                      "XmlUI": ""
                    }
                  ]
                },
                {
                  "GUID": "caf359",
                  "Name": "Custom_Model_Bag",
                  "Transform": {
                    "posX": -33.0,
                    "posY": 2.41593027,
                    "posZ": 17.5,
                    "rotX": -3.605771E-05,
                    "rotY": 179.998611,
                    "rotZ": -0.00020565161,
                    "scaleX": 0.7,
                    "scaleY": 0.7,
                    "scaleZ": 0.7
                  },
                  "Nickname": "Anomalies Spacio-Temporelles",
                  "Description": "Complot",
                  "GMNotes": "",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 1.0,
                    "g": 1.0,
                    "b": 1.0
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": true,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": true,
                  "Tooltip": true,
                  "GridProjection": false,
                  "HideWhenFaceDown": false,
                  "Hands": false,
                  "MaterialIndex": -1,
                  "MeshIndex": -1,
                  "CustomMesh": {
                    "MeshURL": "https://pastebin.com/raw/ALrYhQGb",
                    "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/5077277234366558480/31140655872853ACBC44735F25B0EE7E19C72536/",
                    "NormalURL": "",
                    "ColliderURL": "",
                    "Convex": true,
                    "MaterialIndex": 3,
                    "TypeIndex": 6,
                    "CustomShader": {
                      "SpecularColor": {
                        "r": 1.0,
                        "g": 1.0,
                        "b": 1.0
                      },
                      "SpecularIntensity": 0.0,
                      "SpecularSharpness": 2.0,
                      "FresnelStrength": 0.0
                    },
                    "CastShadows": true
                  },
                  "Bag": {
                    "Order": 0
                  },
                  "LuaScript": "-- Utility memory bag by Directsun\r\n-- Version 2.7.0\r\n-- Fork of Memory Bag 2.0 by MrStump\r\n--\r\n-- Want to contribute? Create an issue or fork the code on GitHub and submit a pull request:\r\n-- https://github.com/sunflowermans/TTS-UtilityMemoryBag\r\n\r\n\r\nfunction updateSave()\r\n    local data_to_save = {[\"ml\"]=memoryList}\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n        -- memoryList[guid].rot.x = movedRotation.x\r\n        -- memoryList[guid].rot.y = movedRotation.y\r\n        -- memoryList[guid].rot.z = movedRotation.z\r\n    end\r\n\r\n    --theList[obj.getGUID()] = {\r\n    --    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n    --    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n    --    lock=obj.getLock()\r\n    --}\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n\r\n--Beginning Setup\r\n\r\n\r\n--Make setup button\r\nfunction createSetupButton()\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", {0.75, 0.75, 1})\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\n    -- return getAllObjects()\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1 * 1/self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor +2\r\n            objPos.z = objPos.z * globalScaleFactor\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = {0.75,0.25,0.25,0.6}\r\n            local colorMove = {0,0,1,0.6}\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function=funcName, function_owner=self,\r\n                position=objPos, rotation=rot, height=1000, width=1000,\r\n                color=color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n--Creates submit and cancel buttons\r\nfunction createSetupActionButtons(move)\r\n    self.createButton({\r\n       label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n       position={-1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n       font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    self.createButton({\r\n      label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n      position={-1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n      font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    if move == false then\r\n      self.createButton({\r\n          label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n          position={1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n          font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\r\n        })\r\n\r\n        self.createButton({\r\n            label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n            position={-1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n            font_size=250, color={0,0,0}, font_color={1,1,1}\r\n        })\r\n\r\n        if fresh == false then\r\n            self.createButton({\r\n                label=\"Mise à Jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                position={1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=180, color={0,0,0}, font_color={0.75,0.75,1}\r\n            })\r\n            self.createButton({\r\n                label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                position={1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\r\n            })\r\n        end\r\n    end\r\n\r\n    self.createButton({\r\n        label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n        position={0,0.3,-2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n\r\n--During Setup\r\n\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = {0,0,1,0.6}\r\n    local color = {0,1,0,0.6}\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({index=previousIndex, color=colorMove})\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({index=index, color=color})\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n            lock=obj.getLock(),\r\n            tint=obj.getColorTint()\r\n        }\r\n        obj.highlightOn({0,1,0})\r\n    else\r\n        color = {0.75,0.25,0.25,0.6}\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({index=index, color=color})\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({index=index, color={0,1,0,0.6}})\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n                    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n                    lock=obj.getLock(),\r\n                    tint=obj.getColorTint()\r\n                }\r\n                obj.highlightOn({0,1,0})\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = {0.75,0.25,0.25,0.6}\r\n                self.editButton({index=index, color=color})\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", {1,1,1})\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", {1, 0.25, 0.25})\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", {0.75, 0.75, 1})\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", {0.75, 0.25, 0.25})\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k,v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", {0.25, 0.75, 0.25})\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", {1.0, 0.25, 0.25})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Removed\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", {0.75, 0.75, 1})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\n\r\n--After Setup\r\n\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={0,0.3,2.8}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={2,0.3,0}, rotation={0,90,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---  \r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    local bagObjList = self.getObjects()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid=guid, position=entry.pos, rotation=entry.rot, smooth=false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n\r\n--Utility functions\r\n\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x-p1.x)\r\n    deltaPos.y = (p2.y-p1.y) + yOffset\r\n    deltaPos.z = (p2.z-p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10^(dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample:\r\n{'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'}\r\n--]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend",
                  "LuaScriptState": "{\"ml\":{\"0fffb3\":{\"lock\":false,\"pos\":{\"x\":30.5,\"y\":1.5561203956604,\"z\":-8.50010013580322},\"rot\":{\"x\":0.0941801220178604,\"y\":180.000045776367,\"z\":-6.60400910419412E-05},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"463080\":{\"lock\":false,\"pos\":{\"x\":21,\"y\":1.5543,\"z\":15},\"rot\":{\"x\":0.0109,\"y\":179.9713,\"z\":0.0049},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"75aab0\":{\"lock\":false,\"pos\":{\"x\":10.9999,\"y\":1.5555,\"z\":16.502},\"rot\":{\"x\":0.012,\"y\":179.9662,\"z\":0.0054},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"b56d63\":{\"lock\":false,\"pos\":{\"x\":-1.50874257087708E-06,\"y\":1.55641603469849,\"z\":16.5000038146973},\"rot\":{\"x\":0.0108885485678911,\"y\":179.971267700195,\"z\":0.0049327053129673},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"d3c60f\":{\"lock\":false,\"pos\":{\"x\":-7.00913369655609E-05,\"y\":1.55413508415222,\"z\":4.50012874603271},\"rot\":{\"x\":0.0108704688027501,\"y\":180.018127441406,\"z\":0.0049693020991981},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}}}}",
                  "XmlUI": "",
                  "ContainedObjects": [
                    {
                      "GUID": "0fffb3",
                      "Name": "Card",
                      "Transform": {
                        "posX": -30.9999542,
                        "posY": 1.832924,
                        "posZ": 11.4998913,
                        "rotX": 6.838255E-05,
                        "rotY": 179.99971,
                        "rotZ": 2.94136858,
                        "scaleX": 1.0,
                        "scaleY": 1.0,
                        "scaleZ": 1.0
                      },
                      "Nickname": "Anomalies Spacio-Temporelles",
                      "Description": "Complot",
                      "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87038\",\n  \"traits\": \"Plot.\",\n  \"type\": \"Story\",\n  \"victory\": 1\n}",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 0.713235259,
                        "g": 0.713235259,
                        "b": 0.713235259
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": true,
                      "GridProjection": false,
                      "HideWhenFaceDown": true,
                      "Hands": true,
                      "CardID": 1104904,
                      "SidewaysCard": false,
                      "CustomDeck": {
                        "11049": {
                          "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                          "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                          "NumWidth": 10,
                          "NumHeight": 7,
                          "BackIsHidden": true,
                          "UniqueBack": true,
                          "Type": 0
                        }
                      },
                      "LuaScript": "",
                      "LuaScriptState": "",
                      "XmlUI": ""
                    },
                    {
                      "GUID": "75aab0",
                      "Name": "Custom_Token",
                      "Transform": {
                        "posX": -32.5000038,
                        "posY": 1.81530142,
                        "posZ": 12.4999819,
                        "rotX": 0.0040617357,
                        "rotY": 179.9652,
                        "rotZ": 0.00174296391,
                        "scaleX": 0.3,
                        "scaleY": 1.0,
                        "scaleZ": 0.3
                      },
                      "Nickname": "Horror",
                      "Description": "Left click - Increase\nRight click - Decrease",
                      "GMNotes": "",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 1.0,
                        "g": 1.0,
                        "b": 1.0
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": false,
                      "GridProjection": false,
                      "HideWhenFaceDown": false,
                      "Hands": false,
                      "CustomImage": {
                        "ImageURL": "https://steamusercontent-a.akamaihd.net/ugc/949599153663403796/E6FC1B82A5BC3893CFDCDF3CD580D05E9218AE52/",
                        "ImageSecondaryURL": "",
                        "ImageScalar": 1.0,
                        "WidthScale": 0.0,
                        "CustomToken": {
                          "Thickness": 0.1,
                          "MergeDistancePixels": 5.0,
                          "StandUp": false,
                          "Stackable": false
                        }
                      },
                      "LuaScript": "MIN_VALUE = -99\r\nMAX_VALUE = 999\r\n\r\nfunction onload(saved_data)\r\n    light_mode = true\r\n    val = 0\r\n\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        light_mode = loaded_data[1]\r\n        val = loaded_data[2]\r\n    end\r\n\r\n    createAll()\r\nend\r\n\r\nfunction updateSave()\r\n    local data_to_save = {light_mode, val}\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction createAll()\r\n    s_color = {0,0,0,100}\r\n\n    if light_mode then\r\n        f_color = {1,1,1,100}\r\n    else\r\n        f_color = {0,0,0,100}\r\n    end\r\n\r\n\r\n\r\n    self.createButton({\r\n      label=tostring(val),\r\n      click_function=\"add_subtract\",\r\n      function_owner=self,\r\n      position={-0.025,0.05,-0.025},\r\n      height=600,\r\n      width=1000,\r\n      alignment = 3,\r\n      scale={x=1.5, y=1.5, z=1.5},\r\n      font_size=600,\r\n      font_color=f_color,\r\n      color={1,1,1,0}\r\n      })\r\n\r\n\r\n\r\n\r\n    if light_mode then\r\n        lightButtonText = \"[ Set dark ]\"\r\n    else\r\n        lightButtonText = \"[ Set light ]\"\r\n    end\r\n \r\nend\r\n\r\nfunction removeAll()\r\n    self.removeInput(0)\r\n    self.removeInput(1)\r\n    self.removeButton(0)\r\n    self.removeButton(1)\r\n    self.removeButton(2)\r\nend\r\n\r\nfunction reloadAll()\r\n    removeAll()\r\n    createAll()\r\n\r\n    updateSave()\r\nend\r\n\r\nfunction swap_fcolor(_obj, _color, alt_click)\r\n    light_mode = not light_mode\r\n    reloadAll()\r\nend\r\n\r\nfunction swap_align(_obj, _color, alt_click)\r\n    center_mode = not center_mode\r\n    reloadAll()\r\nend\r\n\r\nfunction editName(_obj, _string, value) \r\n    self.setName(value)\r\n    setTooltips()\r\nend\r\n\r\nfunction add_subtract(_obj, _color, alt_click)\r\n    mod = alt_click and -1 or 1\r\n    new_value = math.min(math.max(val + mod, MIN_VALUE), MAX_VALUE)\r\n    if val ~= new_value then\r\n        val = new_value\r\n      updateVal()\r\n        updateSave()\r\n    end\r\nend\r\n\r\nfunction updateVal()\r\n\r\n    self.editButton({\r\n        index = 0,\r\n        label = tostring(val),\r\n\r\n        })\r\nend\r\n\r\nfunction reset_val()\r\n    val = 0\r\n    updateVal()\r\n    updateSave()\r\nend\r\n\r\nfunction setTooltips()\r\n    self.editInput({\r\n        index = 0,\r\n        value = self.getName(),\r\n        tooltip = ttText\r\n        })\r\n    self.editButton({\r\n        index = 0,\r\n        value = tostring(val),\r\n        tooltip = ttText\r\n        })\r\nend\r\n\r\nfunction null()\r\nend\r\n\r\nfunction keepSample(_obj, _string, value) \r\n    reloadAll()\r\nend",
                      "LuaScriptState": "[true,0]",
                      "XmlUI": ""
                    },
                    {
                      "GUID": "b56d63",
                      "Name": "Custom_Token",
                      "Transform": {
                        "posX": -36.0000076,
                        "posY": 1.81530046,
                        "posZ": 12.5000076,
                        "rotX": 8.613943E-05,
                        "rotY": 179.970963,
                        "rotZ": 0.000115118004,
                        "scaleX": 0.3,
                        "scaleY": 1.0,
                        "scaleZ": 0.3
                      },
                      "Nickname": "Horror",
                      "Description": "Left click - Increase\nRight click - Decrease",
                      "GMNotes": "",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 1.0,
                        "g": 1.0,
                        "b": 1.0
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": false,
                      "GridProjection": false,
                      "HideWhenFaceDown": false,
                      "Hands": false,
                      "CustomImage": {
                        "ImageURL": "https://steamusercontent-a.akamaihd.net/ugc/949599153663403796/E6FC1B82A5BC3893CFDCDF3CD580D05E9218AE52/",
                        "ImageSecondaryURL": "",
                        "ImageScalar": 1.0,
                        "WidthScale": 0.0,
                        "CustomToken": {
                          "Thickness": 0.1,
                          "MergeDistancePixels": 5.0,
                          "StandUp": false,
                          "Stackable": false
                        }
                      },
                      "LuaScript": "MIN_VALUE = -99\r\nMAX_VALUE = 999\r\n\r\nfunction onload(saved_data)\r\n    light_mode = true\r\n    val = 0\r\n\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        light_mode = loaded_data[1]\r\n        val = loaded_data[2]\r\n    end\r\n\r\n    createAll()\r\nend\r\n\r\nfunction updateSave()\r\n    local data_to_save = {light_mode, val}\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction createAll()\r\n    s_color = {0,0,0,100}\r\n\n    if light_mode then\r\n        f_color = {1,1,1,100}\r\n    else\r\n        f_color = {0,0,0,100}\r\n    end\r\n\r\n\r\n\r\n    self.createButton({\r\n      label=tostring(val),\r\n      click_function=\"add_subtract\",\r\n      function_owner=self,\r\n      position={-0.025,0.05,-0.025},\r\n      height=600,\r\n      width=1000,\r\n      alignment = 3,\r\n      scale={x=1.5, y=1.5, z=1.5},\r\n      font_size=600,\r\n      font_color=f_color,\r\n      color={1,1,1,0}\r\n      })\r\n\r\n\r\n\r\n\r\n    if light_mode then\r\n        lightButtonText = \"[ Set dark ]\"\r\n    else\r\n        lightButtonText = \"[ Set light ]\"\r\n    end\r\n \r\nend\r\n\r\nfunction removeAll()\r\n    self.removeInput(0)\r\n    self.removeInput(1)\r\n    self.removeButton(0)\r\n    self.removeButton(1)\r\n    self.removeButton(2)\r\nend\r\n\r\nfunction reloadAll()\r\n    removeAll()\r\n    createAll()\r\n\r\n    updateSave()\r\nend\r\n\r\nfunction swap_fcolor(_obj, _color, alt_click)\r\n    light_mode = not light_mode\r\n    reloadAll()\r\nend\r\n\r\nfunction swap_align(_obj, _color, alt_click)\r\n    center_mode = not center_mode\r\n    reloadAll()\r\nend\r\n\r\nfunction editName(_obj, _string, value) \r\n    self.setName(value)\r\n    setTooltips()\r\nend\r\n\r\nfunction add_subtract(_obj, _color, alt_click)\r\n    mod = alt_click and -1 or 1\r\n    new_value = math.min(math.max(val + mod, MIN_VALUE), MAX_VALUE)\r\n    if val ~= new_value then\r\n        val = new_value\r\n      updateVal()\r\n        updateSave()\r\n    end\r\nend\r\n\r\nfunction updateVal()\r\n\r\n    self.editButton({\r\n        index = 0,\r\n        label = tostring(val),\r\n\r\n        })\r\nend\r\n\r\nfunction reset_val()\r\n    val = 0\r\n    updateVal()\r\n    updateSave()\r\nend\r\n\r\nfunction setTooltips()\r\n    self.editInput({\r\n        index = 0,\r\n        value = self.getName(),\r\n        tooltip = ttText\r\n        })\r\n    self.editButton({\r\n        index = 0,\r\n        value = tostring(val),\r\n        tooltip = ttText\r\n        })\r\nend\r\n\r\nfunction null()\r\nend\r\n\r\nfunction keepSample(_obj, _string, value) \r\n    reloadAll()\r\nend",
                      "LuaScriptState": "[true,0]",
                      "XmlUI": ""
                    },
                    {
                      "GUID": "d3c60f",
                      "Name": "Custom_Token",
                      "Transform": {
                        "posX": -36.0000076,
                        "posY": 1.81530118,
                        "posZ": 8.499996,
                        "rotX": -5.223237E-05,
                        "rotY": 180.018112,
                        "rotZ": 0.000127472114,
                        "scaleX": 0.3,
                        "scaleY": 1.0,
                        "scaleZ": 0.3
                      },
                      "Nickname": "Horror",
                      "Description": "Left click - Increase\nRight click - Decrease",
                      "GMNotes": "",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 1.0,
                        "g": 1.0,
                        "b": 1.0
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": false,
                      "GridProjection": false,
                      "HideWhenFaceDown": false,
                      "Hands": false,
                      "CustomImage": {
                        "ImageURL": "https://steamusercontent-a.akamaihd.net/ugc/949599153663403796/E6FC1B82A5BC3893CFDCDF3CD580D05E9218AE52/",
                        "ImageSecondaryURL": "",
                        "ImageScalar": 1.0,
                        "WidthScale": 0.0,
                        "CustomToken": {
                          "Thickness": 0.1,
                          "MergeDistancePixels": 5.0,
                          "StandUp": false,
                          "Stackable": false
                        }
                      },
                      "LuaScript": "MIN_VALUE = -99\r\nMAX_VALUE = 999\r\n\r\nfunction onload(saved_data)\r\n    light_mode = true\r\n    val = 0\r\n\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        light_mode = loaded_data[1]\r\n        val = loaded_data[2]\r\n    end\r\n\r\n    createAll()\r\nend\r\n\r\nfunction updateSave()\r\n    local data_to_save = {light_mode, val}\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction createAll()\r\n    s_color = {0,0,0,100}\r\n\n    if light_mode then\r\n        f_color = {1,1,1,100}\r\n    else\r\n        f_color = {0,0,0,100}\r\n    end\r\n\r\n\r\n\r\n    self.createButton({\r\n      label=tostring(val),\r\n      click_function=\"add_subtract\",\r\n      function_owner=self,\r\n      position={-0.025,0.05,-0.025},\r\n      height=600,\r\n      width=1000,\r\n      alignment = 3,\r\n      scale={x=1.5, y=1.5, z=1.5},\r\n      font_size=600,\r\n      font_color=f_color,\r\n      color={1,1,1,0}\r\n      })\r\n\r\n\r\n\r\n\r\n    if light_mode then\r\n        lightButtonText = \"[ Set dark ]\"\r\n    else\r\n        lightButtonText = \"[ Set light ]\"\r\n    end\r\n \r\nend\r\n\r\nfunction removeAll()\r\n    self.removeInput(0)\r\n    self.removeInput(1)\r\n    self.removeButton(0)\r\n    self.removeButton(1)\r\n    self.removeButton(2)\r\nend\r\n\r\nfunction reloadAll()\r\n    removeAll()\r\n    createAll()\r\n\r\n    updateSave()\r\nend\r\n\r\nfunction swap_fcolor(_obj, _color, alt_click)\r\n    light_mode = not light_mode\r\n    reloadAll()\r\nend\r\n\r\nfunction swap_align(_obj, _color, alt_click)\r\n    center_mode = not center_mode\r\n    reloadAll()\r\nend\r\n\r\nfunction editName(_obj, _string, value) \r\n    self.setName(value)\r\n    setTooltips()\r\nend\r\n\r\nfunction add_subtract(_obj, _color, alt_click)\r\n    mod = alt_click and -1 or 1\r\n    new_value = math.min(math.max(val + mod, MIN_VALUE), MAX_VALUE)\r\n    if val ~= new_value then\r\n        val = new_value\r\n      updateVal()\r\n        updateSave()\r\n    end\r\nend\r\n\r\nfunction updateVal()\r\n\r\n    self.editButton({\r\n        index = 0,\r\n        label = tostring(val),\r\n\r\n        })\r\nend\r\n\r\nfunction reset_val()\r\n    val = 0\r\n    updateVal()\r\n    updateSave()\r\nend\r\n\r\nfunction setTooltips()\r\n    self.editInput({\r\n        index = 0,\r\n        value = self.getName(),\r\n        tooltip = ttText\r\n        })\r\n    self.editButton({\r\n        index = 0,\r\n        value = tostring(val),\r\n        tooltip = ttText\r\n        })\r\nend\r\n\r\nfunction null()\r\nend\r\n\r\nfunction keepSample(_obj, _string, value) \r\n    reloadAll()\r\nend",
                      "LuaScriptState": "[true,0]",
                      "XmlUI": ""
                    }
                  ]
                },
                {
                  "GUID": "9d0d3e",
                  "Name": "Custom_Model_Bag",
                  "Transform": {
                    "posX": -33.5,
                    "posY": 2.420614,
                    "posZ": 17.5,
                    "rotX": -0.000416750961,
                    "rotY": 179.994232,
                    "rotZ": -0.0002067808,
                    "scaleX": 0.700000048,
                    "scaleY": 0.7,
                    "scaleZ": 0.700000048
                  },
                  "Nickname": "Problèmes avec la Pègre",
                  "Description": "Complot",
                  "GMNotes": "",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 1.0,
                    "g": 1.0,
                    "b": 1.0
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": true,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": true,
                  "Tooltip": true,
                  "GridProjection": false,
                  "HideWhenFaceDown": false,
                  "Hands": false,
                  "MaterialIndex": -1,
                  "MeshIndex": -1,
                  "CustomMesh": {
                    "MeshURL": "https://pastebin.com/raw/ALrYhQGb",
                    "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/5077277234366558480/31140655872853ACBC44735F25B0EE7E19C72536/",
                    "NormalURL": "",
                    "ColliderURL": "",
                    "Convex": true,
                    "MaterialIndex": 3,
                    "TypeIndex": 6,
                    "CustomShader": {
                      "SpecularColor": {
                        "r": 1.0,
                        "g": 1.0,
                        "b": 1.0
                      },
                      "SpecularIntensity": 0.0,
                      "SpecularSharpness": 2.0,
                      "FresnelStrength": 0.0
                    },
                    "CastShadows": true
                  },
                  "Bag": {
                    "Order": 0
                  },
                  "LuaScript": "-- Utility memory bag by Directsun\r\n-- Version 2.7.0\r\n-- Fork of Memory Bag 2.0 by MrStump\r\n--\r\n-- Want to contribute? Create an issue or fork the code on GitHub and submit a pull request:\r\n-- https://github.com/sunflowermans/TTS-UtilityMemoryBag\r\n\r\n\r\nfunction updateSave()\r\n    local data_to_save = {[\"ml\"]=memoryList}\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n        -- memoryList[guid].rot.x = movedRotation.x\r\n        -- memoryList[guid].rot.y = movedRotation.y\r\n        -- memoryList[guid].rot.z = movedRotation.z\r\n    end\r\n\r\n    --theList[obj.getGUID()] = {\r\n    --    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n    --    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n    --    lock=obj.getLock()\r\n    --}\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n\r\n--Beginning Setup\r\n\r\n\r\n--Make setup button\r\nfunction createSetupButton()\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", {0.75, 0.75, 1})\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\n    -- return getAllObjects()\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1 * 1/self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor +2\r\n            objPos.z = objPos.z * globalScaleFactor\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = {0.75,0.25,0.25,0.6}\r\n            local colorMove = {0,0,1,0.6}\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function=funcName, function_owner=self,\r\n                position=objPos, rotation=rot, height=1000, width=1000,\r\n                color=color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n--Creates submit and cancel buttons\r\nfunction createSetupActionButtons(move)\r\n    self.createButton({\r\n       label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n       position={-1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n       font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    self.createButton({\r\n      label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n      position={-1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n      font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    if move == false then\r\n      self.createButton({\r\n          label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n          position={1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n          font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\r\n        })\r\n\r\n        self.createButton({\r\n            label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n            position={-1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n            font_size=250, color={0,0,0}, font_color={1,1,1}\r\n        })\r\n\r\n        if fresh == false then\r\n            self.createButton({\r\n                label=\"Mise à Jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                position={1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=180, color={0,0,0}, font_color={0.75,0.75,1}\r\n            })\r\n            self.createButton({\r\n                label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                position={1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\r\n            })\r\n        end\r\n    end\r\n\r\n    self.createButton({\r\n        label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n        position={0,0.3,-2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n\r\n--During Setup\r\n\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = {0,0,1,0.6}\r\n    local color = {0,1,0,0.6}\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({index=previousIndex, color=colorMove})\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({index=index, color=color})\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n            lock=obj.getLock(),\r\n            tint=obj.getColorTint()\r\n        }\r\n        obj.highlightOn({0,1,0})\r\n    else\r\n        color = {0.75,0.25,0.25,0.6}\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({index=index, color=color})\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({index=index, color={0,1,0,0.6}})\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n                    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n                    lock=obj.getLock(),\r\n                    tint=obj.getColorTint()\r\n                }\r\n                obj.highlightOn({0,1,0})\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = {0.75,0.25,0.25,0.6}\r\n                self.editButton({index=index, color=color})\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", {1,1,1})\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", {1, 0.25, 0.25})\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", {0.75, 0.75, 1})\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", {0.75, 0.25, 0.25})\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k,v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", {0.25, 0.75, 0.25})\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", {1.0, 0.25, 0.25})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Removed\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", {0.75, 0.75, 1})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\n\r\n--After Setup\r\n\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={0,0.3,2.8}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={2,0.3,0}, rotation={0,90,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---  \r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    local bagObjList = self.getObjects()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid=guid, position=entry.pos, rotation=entry.rot, smooth=false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n\r\n--Utility functions\r\n\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x-p1.x)\r\n    deltaPos.y = (p2.y-p1.y) + yOffset\r\n    deltaPos.z = (p2.z-p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10^(dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample:\r\n{'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'}\r\n--]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend",
                  "LuaScriptState": "{\"ml\":{\"6043d5\":{\"lock\":false,\"pos\":{\"x\":30.5,\"y\":1.5561,\"z\":-8.5},\"rot\":{\"x\":0.0942,\"y\":180.0055,\"z\":-0.0001},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"8e3ec4\":{\"lock\":false,\"pos\":{\"x\":-27,\"y\":1.7789,\"z\":2.5},\"rot\":{\"x\":0,\"y\":179.9804,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"d0f686\":{\"lock\":false,\"pos\":{\"x\":-24.5,\"y\":1.8007,\"z\":2.5},\"rot\":{\"x\":0,\"y\":180,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}}}}",
                  "XmlUI": "",
                  "ContainedObjects": [
                    {
                      "GUID": "6043d5",
                      "Name": "Card",
                      "Transform": {
                        "posX": -25.5000019,
                        "posY": 1.77890551,
                        "posZ": 11.4999866,
                        "rotX": -4.857374E-06,
                        "rotY": 180.001678,
                        "rotZ": 3.00489063E-07,
                        "scaleX": 1.0,
                        "scaleY": 1.0,
                        "scaleZ": 1.0
                      },
                      "Nickname": "Problèmes avec la Pègre",
                      "Description": "Complot",
                      "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87039\",\n  \"traits\": \"Plot.\",\n  \"type\": \"Story\",\n  \"victory\": 1\n}",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 0.713235259,
                        "g": 0.713235259,
                        "b": 0.713235259
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": true,
                      "GridProjection": false,
                      "HideWhenFaceDown": true,
                      "Hands": true,
                      "CardID": 1104903,
                      "SidewaysCard": false,
                      "CustomDeck": {
                        "11049": {
                          "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                          "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                          "NumWidth": 10,
                          "NumHeight": 7,
                          "BackIsHidden": true,
                          "UniqueBack": true,
                          "Type": 0
                        }
                      },
                      "LuaScript": "",
                      "LuaScriptState": "",
                      "XmlUI": ""
                    },
                    {
                      "GUID": "8e3ec4",
                      "Name": "Card",
                      "Transform": {
                        "posX": -22.0000019,
                        "posY": 1.77890587,
                        "posZ": 7.999996,
                        "rotX": -5.060662E-06,
                        "rotY": 179.980438,
                        "rotZ": 1.31242786E-07,
                        "scaleX": 1.0,
                        "scaleY": 1.0,
                        "scaleZ": 1.0
                      },
                      "Nickname": "",
                      "Description": "",
                      "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 1,\n  \"id\": \"87040\",\n  \"traits\": \"Humanoid. Criminal. Syndicate.\",\n  \"type\": \"Enemy\",\n  \"victory\": 0\n}",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 0.713235259,
                        "g": 0.713235259,
                        "b": 0.713235259
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": true,
                      "GridProjection": false,
                      "HideWhenFaceDown": true,
                      "Hands": true,
                      "CardID": 1110600,
                      "SidewaysCard": false,
                      "CustomDeck": {
                        "11106": {
                          "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                          "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                          "NumWidth": 10,
                          "NumHeight": 7,
                          "BackIsHidden": true,
                          "UniqueBack": false,
                          "Type": 0
                        }
                      },
                      "LuaScript": "",
                      "LuaScriptState": "",
                      "XmlUI": ""
                    },
                    {
                      "GUID": "d0f686",
                      "Name": "Deck",
                      "Transform": {
                        "posX": -22.5000038,
                        "posY": 1.80067337,
                        "posZ": 11.999979,
                        "rotX": -5.18555362E-06,
                        "rotY": 179.999908,
                        "rotZ": 6.4267067E-07,
                        "scaleX": 1.0,
                        "scaleY": 1.0,
                        "scaleZ": 1.0
                      },
                      "Nickname": "",
                      "Description": "",
                      "GMNotes": "",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 0.713235259,
                        "g": 0.713235259,
                        "b": 0.713235259
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": true,
                      "GridProjection": false,
                      "HideWhenFaceDown": true,
                      "Hands": false,
                      "SidewaysCard": false,
                      "DeckIDs": [
                        1110601,
                        1110603,
                        1110602
                      ],
                      "CustomDeck": {
                        "11106": {
                          "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                          "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                          "NumWidth": 10,
                          "NumHeight": 7,
                          "BackIsHidden": true,
                          "UniqueBack": false,
                          "Type": 0
                        }
                      },
                      "LuaScript": "",
                      "LuaScriptState": "",
                      "XmlUI": "",
                      "ContainedObjects": [
                        {
                          "GUID": "415b95",
                          "Name": "Card",
                          "Transform": {
                            "posX": -22.5,
                            "posY": 4.856077,
                            "posZ": 12.000001,
                            "rotX": -4.88267324E-06,
                            "rotY": 179.999954,
                            "rotZ": 4.31320672E-07,
                            "scaleX": 1.0,
                            "scaleY": 1.0,
                            "scaleZ": 1.0
                          },
                          "Nickname": "",
                          "Description": "",
                          "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 1,\n  \"id\": \"87041\",\n  \"traits\": \"Humanoid. Criminal. Syndicate. Elite.\",\n  \"type\": \"Enemy\",\n  \"victory\": 0\n}",
                          "AltLookAngle": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0
                          },
                          "ColorDiffuse": {
                            "r": 0.713235259,
                            "g": 0.713235259,
                            "b": 0.713235259
                          },
                          "LayoutGroupSortIndex": 0,
                          "Value": 0,
                          "Locked": false,
                          "Grid": true,
                          "Snap": true,
                          "IgnoreFoW": false,
                          "MeasureMovement": false,
                          "DragSelectable": true,
                          "Autoraise": true,
                          "Sticky": true,
                          "Tooltip": true,
                          "GridProjection": false,
                          "HideWhenFaceDown": true,
                          "Hands": true,
                          "CardID": 1110601,
                          "SidewaysCard": false,
                          "CustomDeck": {
                            "11106": {
                              "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                              "NumWidth": 10,
                              "NumHeight": 7,
                              "BackIsHidden": true,
                              "UniqueBack": false,
                              "Type": 0
                            }
                          },
                          "LuaScript": "",
                          "LuaScriptState": "",
                          "XmlUI": ""
                        },
                        {
                          "GUID": "44370c",
                          "Name": "Card",
                          "Transform": {
                            "posX": -22.5,
                            "posY": 5.056077,
                            "posZ": 12.000001,
                            "rotX": -4.88267324E-06,
                            "rotY": 179.999954,
                            "rotZ": 4.31320672E-07,
                            "scaleX": 1.0,
                            "scaleY": 1.0,
                            "scaleZ": 1.0
                          },
                          "Nickname": "",
                          "Description": "",
                          "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 1,\n  \"id\": \"87041\",\n  \"traits\": \"Humanoid. Criminal. Syndicate. Elite.\",\n  \"type\": \"Enemy\",\n  \"victory\": 0\n}",
                          "AltLookAngle": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0
                          },
                          "ColorDiffuse": {
                            "r": 0.713235259,
                            "g": 0.713235259,
                            "b": 0.713235259
                          },
                          "LayoutGroupSortIndex": 0,
                          "Value": 0,
                          "Locked": false,
                          "Grid": true,
                          "Snap": true,
                          "IgnoreFoW": false,
                          "MeasureMovement": false,
                          "DragSelectable": true,
                          "Autoraise": true,
                          "Sticky": true,
                          "Tooltip": true,
                          "GridProjection": false,
                          "HideWhenFaceDown": true,
                          "Hands": true,
                          "CardID": 1110603,
                          "SidewaysCard": false,
                          "CustomDeck": {
                            "11106": {
                              "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                              "NumWidth": 10,
                              "NumHeight": 7,
                              "BackIsHidden": true,
                              "UniqueBack": false,
                              "Type": 0
                            }
                          },
                          "LuaScript": "",
                          "LuaScriptState": "",
                          "XmlUI": ""
                        },
                        {
                          "GUID": "c05ff7",
                          "Name": "Card",
                          "Transform": {
                            "posX": -22.5,
                            "posY": 1.8773191,
                            "posZ": 12.000001,
                            "rotX": 0.002885727,
                            "rotY": 179.999954,
                            "rotZ": -0.003576372,
                            "scaleX": 1.0,
                            "scaleY": 1.0,
                            "scaleZ": 1.0
                          },
                          "Nickname": "",
                          "Description": "",
                          "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 1,\n  \"id\": \"87041\",\n  \"traits\": \"Humanoid. Criminal. Syndicate. Elite.\",\n  \"type\": \"Enemy\",\n  \"victory\": 0\n}",
                          "AltLookAngle": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0
                          },
                          "ColorDiffuse": {
                            "r": 0.713235259,
                            "g": 0.713235259,
                            "b": 0.713235259
                          },
                          "LayoutGroupSortIndex": 0,
                          "Value": 0,
                          "Locked": false,
                          "Grid": true,
                          "Snap": true,
                          "IgnoreFoW": false,
                          "MeasureMovement": false,
                          "DragSelectable": true,
                          "Autoraise": true,
                          "Sticky": true,
                          "Tooltip": true,
                          "GridProjection": false,
                          "HideWhenFaceDown": true,
                          "Hands": true,
                          "CardID": 1110602,
                          "SidewaysCard": false,
                          "CustomDeck": {
                            "11106": {
                              "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                              "NumWidth": 10,
                              "NumHeight": 7,
                              "BackIsHidden": true,
                              "UniqueBack": false,
                              "Type": 0
                            }
                          },
                          "LuaScript": "",
                          "LuaScriptState": "",
                          "XmlUI": ""
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "GUID": "39d218",
              "Name": "Custom_Model",
              "Transform": {
                "posX": -22.4999924,
                "posY": 1.77099967,
                "posZ": 20.0000076,
                "rotX": 5.52427446E-06,
                "rotY": 5.755846E-05,
                "rotZ": -1.84941669E-07,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "Text Tool",
              "Description": "",
              "GMNotes": "",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 0.0,
                "g": 0.0,
                "b": 0.0,
                "a": 0.0
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": false,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": false,
              "Tooltip": false,
              "GridProjection": false,
              "HideWhenFaceDown": false,
              "Hands": false,
              "CustomMesh": {
                "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/1478820768302617365/27883B7913E0E69143C3AA03493B7E7C4E8C29C0/",
                "DiffuseURL": "",
                "NormalURL": "",
                "ColliderURL": "",
                "Convex": true,
                "MaterialIndex": 1,
                "TypeIndex": 0,
                "CastShadows": true
              },
              "LuaScript": "-- Code for bag to identify text tool objects\r\nmovableTextTool_cowgoesmoo33 = true\r\n\r\n-- Number of characters before the text box width expands.\r\nEXPAND_INTERVAL = 20\r\n\r\n-- This table controls what is passed between save/load\r\ndata = {}\r\n\r\nfunction onLoad(saved_data)\r\n  if saved_data ~= '' then\r\n    data = JSON.decode(saved_data)\r\n    if data.text ~= '' then\r\n      self.interactable = data.interactable\r\n      staticMode()\r\n      return\r\n    end\r\n  else\r\n    data = {size=200, color=Color(0,0,0), text='', interactable=true,\r\n        enter_to_finish=false, autolock=false, autolift=false,\r\n        hover_height=0.05, box_transparency=1}\r\n  end\r\n\r\n  inputMode()\r\nend\r\n\r\n-- True if in the middle of delay after pressing Enter (with enter_to_finish on)\r\nfinishing = false\r\nfunction input_func(obj, color, input, stillEditing)\r\n  local params = getBox(input)\r\n  if params then\r\n    params.value = input\r\n    self.editInput(params)\r\n  end\r\n\r\n  if not stillEditing then\r\n    data.text = input\r\n    updateState()\r\n    if input ~= '' then staticMode(color) end\r\n  elseif data.enter_to_finish then\r\n    -- If enter is pressed: remove last newline and force finish\r\n    if not finishing and input:sub(-1) == '\\n' then\r\n      finishing = true\r\n      -- Delay to avoid user's Enter keypress being detected (opens chat box)\r\n      Wait.frames(function()\r\n        input = input:sub(1, -2)\r\n        data.text = input\r\n        updateState()\r\n        if input ~= '' then staticMode(color) else inputMode() end\r\n        finishing = false\r\n      end, 10)\r\n    end\r\n  end\r\nend\r\n\r\n-- When the inpupt box appears and lets the player type in it.\r\nfunction inputMode()\r\n  self.clearContextMenu()\r\n  self.clearInputs()\r\n  self.clearButtons()\r\n\r\n  local size = getBox(data.text, true)\r\n\r\n  self.createInput({\r\n    input_function = \"input_func\",\r\n    function_owner = self,\r\n    label          = \"Type Here\",\r\n    alignment      = 3,\r\n    position       = {x=0, y=data.hover_height, z=0},\r\n    rotation       = {0, 180, 0},\r\n    width          = size.width,\r\n    height         = size.height,\r\n    color          = getBackground(data.color),\r\n    font_color     = data.color,\r\n    font_size      = data.size,\r\n    value          = data.text,\r\n  })\r\n\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\nend\r\n\r\n-- When the input box disappears and displays the text.\r\nfunction staticMode(player)\r\n  self.clearContextMenu()\r\n  if data.autolock then\r\n    self.locked = true\r\n  end\r\n  if self.getInputs() and #self.getInputs() ~= 0 then\r\n    self.removeInput(0)\r\n  end\r\n\r\n  -- Clear from selecting player\r\n  if player then\r\n    self.removeFromPlayerSelection(player)\r\n  end\r\n\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  self.createButton({\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=self,\r\n    position={0,data.hover_height,0}, rotation={0,180,0}, height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  })\r\n\r\n  self.addContextMenuItem('Edit Text', function(color)\r\n    self.removeFromPlayerSelection(color)\r\n    inputMode()\r\n  end)\r\n  self.addContextMenuItem('Clear', function(color)\r\n    applyMultiple(color, 'clear', _, true)\r\n  end)\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\n  self.addContextMenuItem('Permanently Attach', attemptAttach)\r\n  self.addContextMenuItem('Permalock', function(color)\r\n    applyMultiple(color, 'permalock', _, true)\r\n  end)\r\nend\r\n\r\nfunction changeSize(params)\r\n  local delta = params[1]\r\n  local newSize = data.size + delta\r\n  if newSize > 800  or newSize < 50 then\r\n    return\r\n  end\r\n  data.size = newSize\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_size=data.size})\r\n  else\r\n    local size = getBox(data.text, true)\r\n    self.editInput({width=size.width, height=size.height, font_size=data.size})\r\n  end\r\nend\r\n\r\nfunction setColor(params)\r\n  if params and params[1] then\r\n    data.color = params[1]\r\n  else\r\n    data.color = self.getColorTint():setAt('a', 1) -- Take on color of object tint\r\n  end\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_color=data.color})\r\n  else\r\n    self.editInput({font_color=data.color, color=getBackground(data.color)})\r\n  end\r\nend\r\n\r\nfunction getBackground(color) --determines whether to use black or white depending on luminance\r\n  local r,g,b = Color(color):get()\r\n\r\n  local lum = 0.2126*r + 0.7152*g + 0.0722*b\r\n  if lum > 0.75 then\r\n    return {0.2,0.2,0.2, data.box_transparency}\r\n  else\r\n    return {1,1,1, data.box_transparency}\r\n  end\r\nend\r\n\r\nfunction clear()\r\n  data.text = ''\r\n  updateState()\r\n  inputMode()\r\nend\r\n\r\nfunction permalock()\r\n  self.interactable = false\r\n  data.interactable = false\r\n  updateState()\r\nend\r\n\r\nlocal target_script = [[\r\nfunction onLoad(script_state)\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    for _,entry in ipairs(state) do\r\n      self.createButton(entry)\r\n    end\r\n    self.addContextMenuItem('Clear All Text', function(color)\r\n      self.clearContextMenu()\r\n      self.clearButtons()\r\n      self.script_state = ''\r\n      self.script_code = ''\r\n    end)\r\n  end\r\nend\r\n]]\r\n\r\nfunction attemptAttach(player_color)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  local attachee\r\n  local attachers = {}\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if obj ~= self then\r\n        table.insert(attachers, obj)\r\n      end\r\n    else\r\n      if attachee then\r\n        broadcastToColor(\"More than one target selected.\", player_color)\r\n        return\r\n      else\r\n        attachee = obj\r\n      end\r\n    end\r\n  end\r\n  if attachee then\r\n    local code = attachee.script_code\r\n    if code and code ~= '' and code ~= target_script then\r\n      broadcastToColor(\"Warning: script on card has been overriden. Rewind time to undo.\", player_color)\r\n    end\r\n    for i,attacher in ipairs(attachers) do\r\n      attacher.call('attach', {target = attachee})\r\n    end\r\n    attach({target = attachee})\r\n    local type, flip = attachee.type, attachee.getRotation().z\r\n    if (type == 'Card' or type == 'Deck') and flip > 175 and flip < 185 then\r\n      broadcastToColor(\"Warning: text will not display if card or deck is facing down.\", player_color)\r\n    end\r\n  else\r\n    broadcastToColor(\"You must have a target object in your selection (using click-and-drag or Ctrl+Click) to use this option.\", player_color)\r\n  end\r\nend\r\n\r\nfunction attach(params)\r\n  local target = params.target\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  local textRotation = self.getRotation():sub(target.getRotation())\r\n    :add(Vector(180, 0, 180))\r\n\r\n  local textPosition = target.positionToLocal(\r\n    self.getPosition():add(Vector(0, data.hover_height, 0))\r\n  )\r\n  textPosition.x = -textPosition.x\r\n\r\n  local textScale = {}\r\n  textScale.x = self.getScale().x / target.getScale().x\r\n  textScale.y = self.getScale().x / target.getScale().y\r\n  textScale.z = self.getScale().x / target.getScale().z\r\n\r\n  local details = {\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=nil,\r\n    position=textPosition,\r\n    rotation=textRotation,\r\n    scale=textScale,\r\n    height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  }\r\n\r\n  target.createButton(details)\r\n\r\n  local script_state = target.script_state\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    table.insert(state, details)\r\n    target.script_state = JSON.encode(state)\r\n  else\r\n    target.script_state = JSON.encode({[1]=details})\r\n  end\r\n\r\n  target.script_code = target_script\r\n\r\n  self.destruct()\r\nend\r\n\r\nfunction applyMultiple(player_color, func_string, params, static_only)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if not static_only or obj.call('isStatic') then\r\n        obj.call(func_string, params)\r\n      end\r\n    end\r\n  end\r\nend\r\n\r\nfunction isStatic()\r\n  local input = self.getInputs()\r\n  return not input or #input == 0\r\nend\r\n\r\nfunction getBox(input, force)\r\n  local maxLength, lineCount = EXPAND_INTERVAL, 1\r\n  local lineLength = 0\r\n  for i = 1, #input do\r\n    local c = input:sub(i,i)\r\n    if c == '\\n' then\r\n      lineCount = lineCount + 1\r\n      if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n      lineLength = 0\r\n    else\r\n      lineLength = lineLength + 1\r\n    end\r\n  end\r\n  if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n\r\n  newWidth = data.size * maxLength * 0.9\r\n  newHeight = data.size * lineCount + 23\r\n\r\n  if force or boxWidth ~= newWidth or boxHeight ~= newHeight then\r\n    boxWidth, boxHeight = newWidth, newHeight\r\n    return {width = boxWidth, height = boxHeight}\r\n  end\r\n  return nil\r\nend\r\n\r\ntemp_lift = nil\r\nfunction onPickUp(player_color)\r\n  if data.autolift then\r\n    local player = Player[player_color]\r\n    temp_lift = player.lift_height\r\n    player.lift_height = 0\r\n  end\r\nend\r\n\r\nfunction onDrop(player_color)\r\n  if data.autolift and temp_lift then\r\n    Player[player_color].lift_height = temp_lift\r\n  end\r\nend\r\n\r\n-- Should be called every time data is modified, allows info to be saved on copy/paste\r\nfunction updateState()\r\n  self.script_state = JSON.encode(data)\r\nend\r\n\r\nfunction onSave()\r\n  self.script_state = JSON.encode(data)\r\n  return self.script_state\r\nend",
              "LuaScriptState": "{\"autolift\":false,\"autolock\":false,\"box_transparency\":1,\"color\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1},\"enter_to_finish\":false,\"hover_height\":0.05,\"interactable\":true,\"size\":200,\"text\":\"Tirer un complot et une machination\\nposez les ci dessous et placez les\"}",
              "XmlUI": ""
            },
            {
              "GUID": "63027a",
              "Name": "Custom_Model_Bag",
              "Transform": {
                "posX": -20.4999924,
                "posY": 1.83999932,
                "posZ": 24.0000057,
                "rotX": -4.44726129E-06,
                "rotY": 179.990967,
                "rotZ": -1.5719975E-07,
                "scaleX": 0.7,
                "scaleY": 0.7,
                "scaleZ": 0.7
              },
              "Nickname": "Futur",
              "Description": "",
              "GMNotes": "",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": true,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": true,
              "Tooltip": true,
              "GridProjection": false,
              "HideWhenFaceDown": false,
              "Hands": false,
              "MaterialIndex": -1,
              "MeshIndex": -1,
              "CustomMesh": {
                "MeshURL": "https://pastebin.com/raw/ALrYhQGb",
                "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/5077277234366553874/6AD0ADBA7941ACCDAB1C18E898E706CAB8B5331F/",
                "NormalURL": "",
                "ColliderURL": "",
                "Convex": true,
                "MaterialIndex": 3,
                "TypeIndex": 6,
                "CustomShader": {
                  "SpecularColor": {
                    "r": 1.0,
                    "g": 1.0,
                    "b": 1.0
                  },
                  "SpecularIntensity": 0.0,
                  "SpecularSharpness": 2.0,
                  "FresnelStrength": 0.0
                },
                "CastShadows": true
              },
              "Bag": {
                "Order": 0
              },
              "LuaScript": "-- Utility memory bag by Directsun\r\n-- Version 2.7.0\r\n-- Fork of Memory Bag 2.0 by MrStump\r\n--\r\n-- Want to contribute? Create an issue or fork the code on GitHub and submit a pull request:\r\n-- https://github.com/sunflowermans/TTS-UtilityMemoryBag\r\n\r\n\r\nfunction updateSave()\r\n    local data_to_save = {[\"ml\"]=memoryList}\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n        -- memoryList[guid].rot.x = movedRotation.x\r\n        -- memoryList[guid].rot.y = movedRotation.y\r\n        -- memoryList[guid].rot.z = movedRotation.z\r\n    end\r\n\r\n    --theList[obj.getGUID()] = {\r\n    --    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n    --    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n    --    lock=obj.getLock()\r\n    --}\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n\r\n--Beginning Setup\r\n\r\n\r\n--Make setup button\r\nfunction createSetupButton()\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", {0.75, 0.75, 1})\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\n    -- return getAllObjects()\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1 * 1/self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor +2\r\n            objPos.z = objPos.z * globalScaleFactor\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = {0.75,0.25,0.25,0.6}\r\n            local colorMove = {0,0,1,0.6}\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function=funcName, function_owner=self,\r\n                position=objPos, rotation=rot, height=1000, width=1000,\r\n                color=color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n--Creates submit and cancel buttons\r\nfunction createSetupActionButtons(move)\r\n    self.createButton({\r\n       label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n       position={-1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n       font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    self.createButton({\r\n      label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n      position={-1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n      font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    if move == false then\r\n      self.createButton({\r\n          label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n          position={1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n          font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\r\n        })\r\n\r\n        self.createButton({\r\n            label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n            position={-1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n            font_size=250, color={0,0,0}, font_color={1,1,1}\r\n        })\r\n\r\n        if fresh == false then\r\n            self.createButton({\r\n                label=\"Mise à Jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                position={1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=180, color={0,0,0}, font_color={0.75,0.75,1}\r\n            })\r\n            self.createButton({\r\n                label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                position={1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\r\n            })\r\n        end\r\n    end\r\n\r\n    self.createButton({\r\n        label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n        position={0,0.3,-2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n\r\n--During Setup\r\n\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = {0,0,1,0.6}\r\n    local color = {0,1,0,0.6}\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({index=previousIndex, color=colorMove})\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({index=index, color=color})\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n            lock=obj.getLock(),\r\n            tint=obj.getColorTint()\r\n        }\r\n        obj.highlightOn({0,1,0})\r\n    else\r\n        color = {0.75,0.25,0.25,0.6}\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({index=index, color=color})\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({index=index, color={0,1,0,0.6}})\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n                    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n                    lock=obj.getLock(),\r\n                    tint=obj.getColorTint()\r\n                }\r\n                obj.highlightOn({0,1,0})\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = {0.75,0.25,0.25,0.6}\r\n                self.editButton({index=index, color=color})\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", {1,1,1})\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", {1, 0.25, 0.25})\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", {0.75, 0.75, 1})\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", {0.75, 0.25, 0.25})\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k,v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", {0.25, 0.75, 0.25})\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", {1.0, 0.25, 0.25})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Removed\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", {0.75, 0.75, 1})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\n\r\n--After Setup\r\n\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={0,0.3,2.8}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={2,0.3,0}, rotation={0,90,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---  \r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    local bagObjList = self.getObjects()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid=guid, position=entry.pos, rotation=entry.rot, smooth=false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n\r\n--Utility functions\r\n\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x-p1.x)\r\n    deltaPos.y = (p2.y-p1.y) + yOffset\r\n    deltaPos.z = (p2.z-p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10^(dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample:\r\n{'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'}\r\n--]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend",
              "LuaScriptState": "{\"ml\":{\"14a5bc\":{\"lock\":false,\"pos\":{\"x\":-1.47033983921574E-06,\"y\":1.50575077533722,\"z\":13.0000038146973},\"rot\":{\"x\":0.0108915092423558,\"y\":179.999481201172,\"z\":0.00495147379115224},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"232a70\":{\"lock\":false,\"pos\":{\"x\":2.99999833106995,\"y\":1.50492143630981,\"z\":10.0000028610229},\"rot\":{\"x\":0.00420428346842527,\"y\":224.996231079102,\"z\":0.0112114017829299},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"3d81f6\":{\"lock\":false,\"pos\":{\"x\":2.99999833106995,\"y\":1.50606203079224,\"z\":16.0000019073486},\"rot\":{\"x\":0.0112025337293744,\"y\":135.024139404297,\"z\":-0.00419866479933262},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"60bf33\":{\"lock\":false,\"pos\":{\"x\":-3.60467652171792E-06,\"y\":1.51821494102478,\"z\":7.00000286102295},\"rot\":{\"x\":0.0108914952725172,\"y\":179.999969482422,\"z\":0.00494821881875396},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"6cc831\":{\"lock\":false,\"pos\":{\"x\":10.9999980926514,\"y\":1.51726496219635,\"z\":7.00000238418579},\"rot\":{\"x\":0.0108914226293564,\"y\":180.000961303711,\"z\":0.00494834966957569},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"75f5b7\":{\"lock\":false,\"pos\":{\"x\":-29.0001,\"y\":1.7653,\"z\":16.9998},\"rot\":{\"x\":0,\"y\":179.9994,\"z\":0},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"825940\":{\"lock\":false,\"pos\":{\"x\":-3.29086174133408E-06,\"y\":1.52049601078033,\"z\":19.0000038146973},\"rot\":{\"x\":0.0108917579054832,\"y\":179.997573852539,\"z\":0.00494787562638521},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"92eaf8\":{\"lock\":false,\"pos\":{\"x\":7.99999809265137,\"y\":1.50448966026306,\"z\":10.0000038146973},\"rot\":{\"x\":0.0112019032239914,\"y\":135.024887084961,\"z\":-0.00419870857149363},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"9d232c\":{\"lock\":false,\"pos\":{\"x\":16.4999980926514,\"y\":1.50546646118164,\"z\":19.0000038146973},\"rot\":{\"x\":-0.00495155202224851,\"y\":270.018188476563,\"z\":0.0108900060877204},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"a43d95\":{\"lock\":false,\"pos\":{\"x\":-5.5,\"y\":1.5055,\"z\":4},\"rot\":{\"x\":359.9891,\"y\":0.005,\"z\":-0.0049},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}},\"a7fa09\":{\"lock\":false,\"pos\":{\"x\":7.99999856948853,\"y\":1.50563013553619,\"z\":16.0000038146973},\"rot\":{\"x\":0.0042079845443368,\"y\":224.973831176758,\"z\":0.0112018417567015},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"a99e44\":{\"lock\":false,\"pos\":{\"x\":5.49999856948853,\"y\":1.50413525104523,\"z\":7.00000333786011},\"rot\":{\"x\":-0.00494666025042534,\"y\":269.994812011719,\"z\":0.0109037151560187},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"bc0ba0\":{\"lock\":true,\"pos\":{\"x\":22,\"y\":1.51859605312347,\"z\":19.0000038146973},\"rot\":{\"x\":0.0108926240354776,\"y\":179.985473632813,\"z\":0.00494556641206145},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"dc7905\":{\"lock\":false,\"pos\":{\"x\":10.9999980926514,\"y\":1.5195460319519,\"z\":19.0000038146973},\"rot\":{\"x\":0.0108913872390985,\"y\":180.001754760742,\"z\":0.00494860904291272},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e30486\":{\"lock\":false,\"pos\":{\"x\":18,\"y\":1.51494956016541,\"z\":-2},\"rot\":{\"x\":0.0108915790915489,\"y\":179.999221801758,\"z\":0.00494802044704556},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e46534\":{\"lock\":false,\"pos\":{\"x\":10.9999980926514,\"y\":1.50480079650879,\"z\":13.0000038146973},\"rot\":{\"x\":0.0108918761834502,\"y\":179.995056152344,\"z\":0.00494691776111722},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"f12ee8\":{\"lock\":false,\"pos\":{\"x\":5.49999856948853,\"y\":1.50641644001007,\"z\":19.0000038146973},\"rot\":{\"x\":-0.00494708493351936,\"y\":269.994934082031,\"z\":0.0108967944979668},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"fe84d6\":{\"lock\":false,\"pos\":{\"x\":5.49999856948853,\"y\":1.50760626792908,\"z\":20.0000038146973},\"rot\":{\"x\":359.989105224609,\"y\":359.982208251953,\"z\":-0.0049451207742095},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}}}}",
              "XmlUI": "",
              "ContainedObjects": [
                {
                  "GUID": "60bf33",
                  "Name": "Card",
                  "Transform": {
                    "posX": -4.76901869E-06,
                    "posY": 1.50821531,
                    "posZ": 7.000004,
                    "rotX": 0.0108914878,
                    "rotY": 179.999985,
                    "rotZ": 0.004948093,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "",
                  "Description": "",
                  "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87025\",\n  \"locationBack\": {\n    \"connections\": \"Spade|Tindalos\",\n    \"icons\": \"Plus|Portal\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Spade|Tindalos\",\n    \"icons\": \"Plus|Portal\"\n  },\n  \"traits\": \"Arkham. Portal. Future.\",\n  \"type\": \"Location\"\n}",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 0.713235259,
                    "g": 0.713235259,
                    "b": 0.713235259
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": true,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": true,
                  "Tooltip": true,
                  "GridProjection": false,
                  "HideWhenFaceDown": true,
                  "Hands": true,
                  "CardID": 1104921,
                  "SidewaysCard": false,
                  "CustomDeck": {
                    "11049": {
                      "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                      "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                      "NumWidth": 10,
                      "NumHeight": 7,
                      "BackIsHidden": true,
                      "UniqueBack": true,
                      "Type": 0
                    }
                  },
                  "LuaScript": "",
                  "LuaScriptState": "",
                  "XmlUI": ""
                },
                {
                  "GUID": "6cc831",
                  "Name": "Card",
                  "Transform": {
                    "posX": 10.9999981,
                    "posY": 1.50726533,
                    "posZ": 7.000004,
                    "rotX": 0.0108914729,
                    "rotY": 180.000931,
                    "rotZ": 0.00494843163,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "",
                  "Description": "",
                  "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87027\",\n  \"locationBack\": {\n    \"connections\": \"Plus|Diamond|Tindalos\",\n    \"icons\": \"Spade|Portal\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Plus|Diamond|Tindalos\",\n    \"icons\": \"Spade|Portal\"\n  },\n  \"traits\": \"Arkham. Portal. Future.\",\n  \"type\": \"Location\"\n}",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 0.713235259,
                    "g": 0.713235259,
                    "b": 0.713235259
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": true,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": true,
                  "Tooltip": true,
                  "GridProjection": false,
                  "HideWhenFaceDown": true,
                  "Hands": true,
                  "CardID": 1104923,
                  "SidewaysCard": false,
                  "CustomDeck": {
                    "11049": {
                      "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                      "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                      "NumWidth": 10,
                      "NumHeight": 7,
                      "BackIsHidden": true,
                      "UniqueBack": true,
                      "Type": 0
                    }
                  },
                  "LuaScript": "",
                  "LuaScriptState": "",
                  "XmlUI": ""
                },
                {
                  "GUID": "75f5b7",
                  "Name": "Custom_Model_Bag",
                  "Transform": {
                    "posX": -29.0001,
                    "posY": 1.77,
                    "posZ": 16.9998,
                    "rotX": -5.70258862E-06,
                    "rotY": 179.999451,
                    "rotZ": 1.119178E-06,
                    "scaleX": 1.0,
                    "scaleY": 0.562042058,
                    "scaleZ": 1.0
                  },
                  "Nickname": "Machinations",
                  "Description": "",
                  "GMNotes": "",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 1.0,
                    "g": 1.0,
                    "b": 1.0
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": true,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": true,
                  "Tooltip": true,
                  "GridProjection": false,
                  "HideWhenFaceDown": false,
                  "Hands": false,
                  "MaterialIndex": -1,
                  "MeshIndex": -1,
                  "CustomMesh": {
                    "MeshURL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/advboxes/tuckbox_h_MSH.obj",
                    "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/1983303656990210870/D2994AC54A968C74968E19B4F03195BC3664AEE5/",
                    "NormalURL": "",
                    "ColliderURL": "",
                    "Convex": true,
                    "MaterialIndex": 3,
                    "TypeIndex": 6,
                    "CustomShader": {
                      "SpecularColor": {
                        "r": 1.0,
                        "g": 1.0,
                        "b": 1.0
                      },
                      "SpecularIntensity": 0.0,
                      "SpecularSharpness": 2.0,
                      "FresnelStrength": 0.0
                    },
                    "CastShadows": true
                  },
                  "Bag": {
                    "Order": 2
                  },
                  "LuaScript": "",
                  "LuaScriptState": "",
                  "XmlUI": "",
                  "ContainedObjects": [
                    {
                      "GUID": "0c0189",
                      "Name": "Custom_Model_Bag",
                      "Transform": {
                        "posX": -29.0,
                        "posY": 2.41593313,
                        "posZ": 17.0,
                        "rotX": 5.22102746E-05,
                        "rotY": 179.995331,
                        "rotZ": -0.00022963369,
                        "scaleX": 0.7,
                        "scaleY": 0.7,
                        "scaleZ": 0.7
                      },
                      "Nickname": "Une Âpre Rivalité",
                      "Description": "Machination",
                      "GMNotes": "",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 1.0,
                        "g": 1.0,
                        "b": 1.0
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": true,
                      "GridProjection": false,
                      "HideWhenFaceDown": false,
                      "Hands": false,
                      "MaterialIndex": -1,
                      "MeshIndex": -1,
                      "CustomMesh": {
                        "MeshURL": "https://pastebin.com/raw/ALrYhQGb",
                        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/5077277234366558480/31140655872853ACBC44735F25B0EE7E19C72536/",
                        "NormalURL": "",
                        "ColliderURL": "",
                        "Convex": true,
                        "MaterialIndex": 3,
                        "TypeIndex": 6,
                        "CustomShader": {
                          "SpecularColor": {
                            "r": 1.0,
                            "g": 1.0,
                            "b": 1.0
                          },
                          "SpecularIntensity": 0.0,
                          "SpecularSharpness": 2.0,
                          "FresnelStrength": 0.0
                        },
                        "CastShadows": true
                      },
                      "Bag": {
                        "Order": 0
                      },
                      "LuaScript": "-- Utility memory bag by Directsun\r\n-- Version 2.7.0\r\n-- Fork of Memory Bag 2.0 by MrStump\r\n--\r\n-- Want to contribute? Create an issue or fork the code on GitHub and submit a pull request:\r\n-- https://github.com/sunflowermans/TTS-UtilityMemoryBag\r\n\r\n\r\nfunction updateSave()\r\n    local data_to_save = {[\"ml\"]=memoryList}\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n        -- memoryList[guid].rot.x = movedRotation.x\r\n        -- memoryList[guid].rot.y = movedRotation.y\r\n        -- memoryList[guid].rot.z = movedRotation.z\r\n    end\r\n\r\n    --theList[obj.getGUID()] = {\r\n    --    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n    --    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n    --    lock=obj.getLock()\r\n    --}\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n\r\n--Beginning Setup\r\n\r\n\r\n--Make setup button\r\nfunction createSetupButton()\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", {0.75, 0.75, 1})\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\n    -- return getAllObjects()\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1 * 1/self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor +2\r\n            objPos.z = objPos.z * globalScaleFactor\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = {0.75,0.25,0.25,0.6}\r\n            local colorMove = {0,0,1,0.6}\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function=funcName, function_owner=self,\r\n                position=objPos, rotation=rot, height=1000, width=1000,\r\n                color=color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n--Creates submit and cancel buttons\r\nfunction createSetupActionButtons(move)\r\n    self.createButton({\r\n       label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n       position={-1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n       font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    self.createButton({\r\n      label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n      position={-1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n      font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    if move == false then\r\n      self.createButton({\r\n          label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n          position={1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n          font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\r\n        })\r\n\r\n        self.createButton({\r\n            label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n            position={-1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n            font_size=250, color={0,0,0}, font_color={1,1,1}\r\n        })\r\n\r\n        if fresh == false then\r\n            self.createButton({\r\n                label=\"Mise à Jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                position={1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=180, color={0,0,0}, font_color={0.75,0.75,1}\r\n            })\r\n            self.createButton({\r\n                label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                position={1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\r\n            })\r\n        end\r\n    end\r\n\r\n    self.createButton({\r\n        label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n        position={0,0.3,-2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n\r\n--During Setup\r\n\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = {0,0,1,0.6}\r\n    local color = {0,1,0,0.6}\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({index=previousIndex, color=colorMove})\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({index=index, color=color})\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n            lock=obj.getLock(),\r\n            tint=obj.getColorTint()\r\n        }\r\n        obj.highlightOn({0,1,0})\r\n    else\r\n        color = {0.75,0.25,0.25,0.6}\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({index=index, color=color})\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({index=index, color={0,1,0,0.6}})\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n                    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n                    lock=obj.getLock(),\r\n                    tint=obj.getColorTint()\r\n                }\r\n                obj.highlightOn({0,1,0})\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = {0.75,0.25,0.25,0.6}\r\n                self.editButton({index=index, color=color})\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", {1,1,1})\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", {1, 0.25, 0.25})\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", {0.75, 0.75, 1})\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", {0.75, 0.25, 0.25})\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k,v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", {0.25, 0.75, 0.25})\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", {1.0, 0.25, 0.25})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Removed\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", {0.75, 0.75, 1})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\n\r\n--After Setup\r\n\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={0,0.3,2.8}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={2,0.3,0}, rotation={0,90,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---  \r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    local bagObjList = self.getObjects()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid=guid, position=entry.pos, rotation=entry.rot, smooth=false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n\r\n--Utility functions\r\n\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x-p1.x)\r\n    deltaPos.y = (p2.y-p1.y) + yOffset\r\n    deltaPos.z = (p2.z-p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10^(dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample:\r\n{'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'}\r\n--]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend",
                      "LuaScriptState": "{\"ml\":{\"0013aa\":{\"lock\":false,\"pos\":{\"x\":-34.5000076293945,\"y\":1.77890563011169,\"z\":9.99998474121094},\"rot\":{\"x\":-5.15158853886533E-06,\"y\":179.979125976563,\"z\":-1.46354551588956E-07},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"6fb810\":{\"lock\":false,\"pos\":{\"x\":-32.0000076293945,\"y\":1.77890563011169,\"z\":9.99999523162842},\"rot\":{\"x\":-4.79819664178649E-06,\"y\":179.983764648438,\"z\":-4.11661403632024E-07},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e7eb14\":{\"lock\":false,\"pos\":{\"x\":35,\"y\":1.55607211589813,\"z\":-8.50010013580322},\"rot\":{\"x\":0.0923847407102585,\"y\":180.000930786133,\"z\":-6.16106844972819E-05},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"fbcc01\":{\"lock\":false,\"pos\":{\"x\":-19.5000038146973,\"y\":1.77890598773956,\"z\":5.99999141693115},\"rot\":{\"x\":-5.10559630129137E-06,\"y\":180.000198364258,\"z\":4.14766923029219E-08},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}}}}",
                      "XmlUI": "",
                      "ContainedObjects": [
                        {
                          "GUID": "0013aa",
                          "Name": "Card",
                          "Transform": {
                            "posX": -29.5000038,
                            "posY": 1.77890611,
                            "posZ": 4.99999571,
                            "rotX": -4.967045E-06,
                            "rotY": 179.979126,
                            "rotZ": -4.76905377E-08,
                            "scaleX": 1.0,
                            "scaleY": 1.0,
                            "scaleZ": 1.0
                          },
                          "Nickname": "",
                          "Description": "",
                          "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"87021\",\n  \"sanity\": 2,\n  \"traits\": \"Scientist. Ally. Present.\",\n  \"type\": \"Asset\"\n}",
                          "AltLookAngle": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0
                          },
                          "ColorDiffuse": {
                            "r": 0.713235259,
                            "g": 0.713235259,
                            "b": 0.713235259
                          },
                          "LayoutGroupSortIndex": 0,
                          "Value": 0,
                          "Locked": false,
                          "Grid": true,
                          "Snap": true,
                          "IgnoreFoW": false,
                          "MeasureMovement": false,
                          "DragSelectable": true,
                          "Autoraise": true,
                          "Sticky": true,
                          "Tooltip": true,
                          "GridProjection": false,
                          "HideWhenFaceDown": true,
                          "Hands": true,
                          "CardID": 1110638,
                          "SidewaysCard": false,
                          "CustomDeck": {
                            "11106": {
                              "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                              "NumWidth": 10,
                              "NumHeight": 7,
                              "BackIsHidden": true,
                              "UniqueBack": false,
                              "Type": 0
                            }
                          },
                          "LuaScript": "",
                          "LuaScriptState": "",
                          "XmlUI": ""
                        },
                        {
                          "GUID": "6fb810",
                          "Name": "Card",
                          "Transform": {
                            "posX": -33.00001,
                            "posY": 1.77890611,
                            "posZ": 4.999991,
                            "rotX": -4.95346558E-06,
                            "rotY": 179.98381,
                            "rotZ": -1.7466337E-07,
                            "scaleX": 1.0,
                            "scaleY": 1.0,
                            "scaleZ": 1.0
                          },
                          "Nickname": "",
                          "Description": "",
                          "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 1,\n  \"id\": \"87031\",\n  \"sanity\": 2,\n  \"traits\": \"Scientist. Ally. Future.\",\n  \"type\": \"Asset\"\n}",
                          "AltLookAngle": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0
                          },
                          "ColorDiffuse": {
                            "r": 0.713235259,
                            "g": 0.713235259,
                            "b": 0.713235259
                          },
                          "LayoutGroupSortIndex": 0,
                          "Value": 0,
                          "Locked": false,
                          "Grid": true,
                          "Snap": true,
                          "IgnoreFoW": false,
                          "MeasureMovement": false,
                          "DragSelectable": true,
                          "Autoraise": true,
                          "Sticky": true,
                          "Tooltip": true,
                          "GridProjection": false,
                          "HideWhenFaceDown": true,
                          "Hands": true,
                          "CardID": 1110639,
                          "SidewaysCard": false,
                          "CustomDeck": {
                            "11106": {
                              "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                              "NumWidth": 10,
                              "NumHeight": 7,
                              "BackIsHidden": true,
                              "UniqueBack": false,
                              "Type": 0
                            }
                          },
                          "LuaScript": "",
                          "LuaScriptState": "",
                          "XmlUI": ""
                        },
                        {
                          "GUID": "e7eb14",
                          "Name": "Card",
                          "Transform": {
                            "posX": -29.5000057,
                            "posY": 1.77890575,
                            "posZ": 9.499986,
                            "rotX": -5.05860862E-06,
                            "rotY": 180.000229,
                            "rotZ": 6.53799361E-08,
                            "scaleX": 1.0,
                            "scaleY": 1.0,
                            "scaleZ": 1.0
                          },
                          "Nickname": "Une Âpre Rivalité",
                          "Description": "Machination",
                          "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87033\",\n  \"type\": \"Story\",\n  \"victory\": 1\n}",
                          "AltLookAngle": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0
                          },
                          "ColorDiffuse": {
                            "r": 0.713235259,
                            "g": 0.713235259,
                            "b": 0.713235259
                          },
                          "LayoutGroupSortIndex": 0,
                          "Value": 0,
                          "Locked": false,
                          "Grid": true,
                          "Snap": true,
                          "IgnoreFoW": false,
                          "MeasureMovement": false,
                          "DragSelectable": true,
                          "Autoraise": true,
                          "Sticky": true,
                          "Tooltip": true,
                          "GridProjection": false,
                          "HideWhenFaceDown": true,
                          "Hands": true,
                          "CardID": 1104907,
                          "SidewaysCard": false,
                          "CustomDeck": {
                            "11049": {
                              "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                              "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                              "NumWidth": 10,
                              "NumHeight": 7,
                              "BackIsHidden": true,
                              "UniqueBack": true,
                              "Type": 0
                            }
                          },
                          "LuaScript": "",
                          "LuaScriptState": "",
                          "XmlUI": ""
                        },
                        {
                          "GUID": "fbcc01",
                          "Name": "Card",
                          "Transform": {
                            "posX": -33.00002,
                            "posY": 1.77890575,
                            "posZ": 8.999983,
                            "rotX": -4.934812E-06,
                            "rotY": 180.000183,
                            "rotZ": 3.65746757E-08,
                            "scaleX": 1.0,
                            "scaleY": 1.0,
                            "scaleZ": 1.0
                          },
                          "Nickname": "",
                          "Description": "",
                          "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"87037a\",\n  \"sanity\": 2,\n  \"traits\": \"Scientist. Ally.\",\n  \"type\": \"Asset\"\n}",
                          "AltLookAngle": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0
                          },
                          "ColorDiffuse": {
                            "r": 0.713235259,
                            "g": 0.713235259,
                            "b": 0.713235259
                          },
                          "LayoutGroupSortIndex": 0,
                          "Value": 0,
                          "Locked": false,
                          "Grid": true,
                          "Snap": true,
                          "IgnoreFoW": false,
                          "MeasureMovement": false,
                          "DragSelectable": true,
                          "Autoraise": true,
                          "Sticky": true,
                          "Tooltip": true,
                          "GridProjection": false,
                          "HideWhenFaceDown": true,
                          "Hands": true,
                          "CardID": 1105127,
                          "SidewaysCard": false,
                          "CustomDeck": {
                            "11051": {
                              "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                              "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                              "NumWidth": 10,
                              "NumHeight": 7,
                              "BackIsHidden": true,
                              "UniqueBack": true,
                              "Type": 0
                            }
                          },
                          "LuaScript": "",
                          "LuaScriptState": "",
                          "XmlUI": ""
                        }
                      ]
                    },
                    {
                      "GUID": "7f5aa5",
                      "Name": "Custom_Model_Bag",
                      "Transform": {
                        "posX": -29.0,
                        "posY": 2.41592431,
                        "posZ": 17.0,
                        "rotX": 5.31836959E-05,
                        "rotY": 179.985916,
                        "rotZ": -0.000227436074,
                        "scaleX": 0.7,
                        "scaleY": 0.7,
                        "scaleZ": 0.7
                      },
                      "Nickname": "Rédemption d'un Ancien Collègue",
                      "Description": "Machination",
                      "GMNotes": "",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 1.0,
                        "g": 1.0,
                        "b": 1.0
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": true,
                      "GridProjection": false,
                      "HideWhenFaceDown": false,
                      "Hands": false,
                      "MaterialIndex": -1,
                      "MeshIndex": -1,
                      "CustomMesh": {
                        "MeshURL": "https://pastebin.com/raw/ALrYhQGb",
                        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/5077277234366558480/31140655872853ACBC44735F25B0EE7E19C72536/",
                        "NormalURL": "",
                        "ColliderURL": "",
                        "Convex": true,
                        "MaterialIndex": 3,
                        "TypeIndex": 6,
                        "CustomShader": {
                          "SpecularColor": {
                            "r": 1.0,
                            "g": 1.0,
                            "b": 1.0
                          },
                          "SpecularIntensity": 0.0,
                          "SpecularSharpness": 2.0,
                          "FresnelStrength": 0.0
                        },
                        "CastShadows": true
                      },
                      "Bag": {
                        "Order": 0
                      },
                      "LuaScript": "-- Utility memory bag by Directsun\r\n-- Version 2.7.0\r\n-- Fork of Memory Bag 2.0 by MrStump\r\n--\r\n-- Want to contribute? Create an issue or fork the code on GitHub and submit a pull request:\r\n-- https://github.com/sunflowermans/TTS-UtilityMemoryBag\r\n\r\n\r\nfunction updateSave()\r\n    local data_to_save = {[\"ml\"]=memoryList}\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n        -- memoryList[guid].rot.x = movedRotation.x\r\n        -- memoryList[guid].rot.y = movedRotation.y\r\n        -- memoryList[guid].rot.z = movedRotation.z\r\n    end\r\n\r\n    --theList[obj.getGUID()] = {\r\n    --    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n    --    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n    --    lock=obj.getLock()\r\n    --}\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n\r\n--Beginning Setup\r\n\r\n\r\n--Make setup button\r\nfunction createSetupButton()\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", {0.75, 0.75, 1})\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\n    -- return getAllObjects()\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1 * 1/self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor +2\r\n            objPos.z = objPos.z * globalScaleFactor\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = {0.75,0.25,0.25,0.6}\r\n            local colorMove = {0,0,1,0.6}\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function=funcName, function_owner=self,\r\n                position=objPos, rotation=rot, height=1000, width=1000,\r\n                color=color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n--Creates submit and cancel buttons\r\nfunction createSetupActionButtons(move)\r\n    self.createButton({\r\n       label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n       position={-1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n       font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    self.createButton({\r\n      label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n      position={-1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n      font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    if move == false then\r\n      self.createButton({\r\n          label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n          position={1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n          font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\r\n        })\r\n\r\n        self.createButton({\r\n            label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n            position={-1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n            font_size=250, color={0,0,0}, font_color={1,1,1}\r\n        })\r\n\r\n        if fresh == false then\r\n            self.createButton({\r\n                label=\"Mise à Jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                position={1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=180, color={0,0,0}, font_color={0.75,0.75,1}\r\n            })\r\n            self.createButton({\r\n                label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                position={1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\r\n            })\r\n        end\r\n    end\r\n\r\n    self.createButton({\r\n        label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n        position={0,0.3,-2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n\r\n--During Setup\r\n\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = {0,0,1,0.6}\r\n    local color = {0,1,0,0.6}\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({index=previousIndex, color=colorMove})\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({index=index, color=color})\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n            lock=obj.getLock(),\r\n            tint=obj.getColorTint()\r\n        }\r\n        obj.highlightOn({0,1,0})\r\n    else\r\n        color = {0.75,0.25,0.25,0.6}\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({index=index, color=color})\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({index=index, color={0,1,0,0.6}})\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n                    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n                    lock=obj.getLock(),\r\n                    tint=obj.getColorTint()\r\n                }\r\n                obj.highlightOn({0,1,0})\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = {0.75,0.25,0.25,0.6}\r\n                self.editButton({index=index, color=color})\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", {1,1,1})\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", {1, 0.25, 0.25})\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", {0.75, 0.75, 1})\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", {0.75, 0.25, 0.25})\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k,v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", {0.25, 0.75, 0.25})\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", {1.0, 0.25, 0.25})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Removed\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", {0.75, 0.75, 1})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\n\r\n--After Setup\r\n\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={0,0.3,2.8}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={2,0.3,0}, rotation={0,90,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---  \r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    local bagObjList = self.getObjects()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid=guid, position=entry.pos, rotation=entry.rot, smooth=false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n\r\n--Utility functions\r\n\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x-p1.x)\r\n    deltaPos.y = (p2.y-p1.y) + yOffset\r\n    deltaPos.z = (p2.z-p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10^(dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample:\r\n{'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'}\r\n--]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend",
                      "LuaScriptState": "{\"ml\":{\"1781f2\":{\"lock\":false,\"pos\":{\"x\":-19.5000019073486,\"y\":1.77890598773956,\"z\":5.99999761581421},\"rot\":{\"x\":-4.98167173645925E-06,\"y\":180.001174926758,\"z\":5.05337247602711E-08},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"2be9f1\":{\"lock\":false,\"pos\":{\"x\":-32.0000114440918,\"y\":1.77890563011169,\"z\":9.99999141693115},\"rot\":{\"x\":-4.62528305433807E-06,\"y\":179.980087280273,\"z\":-2.66975206386633E-07},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"454d7f\":{\"lock\":false,\"pos\":{\"x\":-34.5000114440918,\"y\":1.77890574932098,\"z\":9.99997997283936},\"rot\":{\"x\":-5.0085791372112E-06,\"y\":179.973480224609,\"z\":-2.82109198224134E-07},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"906c4a\":{\"lock\":false,\"pos\":{\"x\":35,\"y\":1.55607211589813,\"z\":-8.50010108947754},\"rot\":{\"x\":0.0923847630620003,\"y\":180.003524780273,\"z\":-6.15023091086186E-05},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}}}}",
                      "XmlUI": "",
                      "ContainedObjects": [
                        {
                          "GUID": "1781f2",
                          "Name": "Card",
                          "Transform": {
                            "posX": -21.0000019,
                            "posY": 1.778906,
                            "posZ": 6.999997,
                            "rotX": -4.96166558E-06,
                            "rotY": 180.00119,
                            "rotZ": 1.04731669E-07,
                            "scaleX": 1.0,
                            "scaleY": 1.0,
                            "scaleZ": 1.0
                          },
                          "Nickname": "",
                          "Description": "",
                          "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"87037a\",\n  \"sanity\": 2,\n  \"traits\": \"Scientist. Ally.\",\n  \"type\": \"Asset\"\n}",
                          "AltLookAngle": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0
                          },
                          "ColorDiffuse": {
                            "r": 0.713235259,
                            "g": 0.713235259,
                            "b": 0.713235259
                          },
                          "LayoutGroupSortIndex": 0,
                          "Value": 0,
                          "Locked": false,
                          "Grid": true,
                          "Snap": true,
                          "IgnoreFoW": false,
                          "MeasureMovement": false,
                          "DragSelectable": true,
                          "Autoraise": true,
                          "Sticky": true,
                          "Tooltip": true,
                          "GridProjection": false,
                          "HideWhenFaceDown": true,
                          "Hands": true,
                          "CardID": 1105127,
                          "SidewaysCard": false,
                          "CustomDeck": {
                            "11051": {
                              "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                              "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                              "NumWidth": 10,
                              "NumHeight": 7,
                              "BackIsHidden": true,
                              "UniqueBack": true,
                              "Type": 0
                            }
                          },
                          "LuaScript": "",
                          "LuaScriptState": "",
                          "XmlUI": ""
                        },
                        {
                          "GUID": "2be9f1",
                          "Name": "Card",
                          "Transform": {
                            "posX": -24.0000076,
                            "posY": 1.778906,
                            "posZ": 6.999991,
                            "rotX": -4.838472E-06,
                            "rotY": 179.9802,
                            "rotZ": 1.3837078E-07,
                            "scaleX": 1.0,
                            "scaleY": 1.0,
                            "scaleZ": 1.0
                          },
                          "Nickname": "",
                          "Description": "",
                          "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 1,\n  \"id\": \"87031\",\n  \"sanity\": 2,\n  \"traits\": \"Scientist. Ally. Future.\",\n  \"type\": \"Asset\"\n}",
                          "AltLookAngle": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0
                          },
                          "ColorDiffuse": {
                            "r": 0.713235259,
                            "g": 0.713235259,
                            "b": 0.713235259
                          },
                          "LayoutGroupSortIndex": 0,
                          "Value": 0,
                          "Locked": false,
                          "Grid": true,
                          "Snap": true,
                          "IgnoreFoW": false,
                          "MeasureMovement": false,
                          "DragSelectable": true,
                          "Autoraise": true,
                          "Sticky": true,
                          "Tooltip": true,
                          "GridProjection": false,
                          "HideWhenFaceDown": true,
                          "Hands": true,
                          "CardID": 1110639,
                          "SidewaysCard": false,
                          "CustomDeck": {
                            "11106": {
                              "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                              "NumWidth": 10,
                              "NumHeight": 7,
                              "BackIsHidden": true,
                              "UniqueBack": false,
                              "Type": 0
                            }
                          },
                          "LuaScript": "",
                          "LuaScriptState": "",
                          "XmlUI": ""
                        },
                        {
                          "GUID": "454d7f",
                          "Name": "Card",
                          "Transform": {
                            "posX": -20.9999962,
                            "posY": 1.77890563,
                            "posZ": 10.5000048,
                            "rotX": -4.86103454E-06,
                            "rotY": 179.973663,
                            "rotZ": -4.26174154E-08,
                            "scaleX": 1.0,
                            "scaleY": 1.0,
                            "scaleZ": 1.0
                          },
                          "Nickname": "",
                          "Description": "",
                          "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"87021\",\n  \"sanity\": 2,\n  \"traits\": \"Scientist. Ally. Present.\",\n  \"type\": \"Asset\"\n}",
                          "AltLookAngle": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0
                          },
                          "ColorDiffuse": {
                            "r": 0.713235259,
                            "g": 0.713235259,
                            "b": 0.713235259
                          },
                          "LayoutGroupSortIndex": 0,
                          "Value": 0,
                          "Locked": false,
                          "Grid": true,
                          "Snap": true,
                          "IgnoreFoW": false,
                          "MeasureMovement": false,
                          "DragSelectable": true,
                          "Autoraise": true,
                          "Sticky": true,
                          "Tooltip": true,
                          "GridProjection": false,
                          "HideWhenFaceDown": true,
                          "Hands": true,
                          "CardID": 1110638,
                          "SidewaysCard": false,
                          "CustomDeck": {
                            "11106": {
                              "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                              "NumWidth": 10,
                              "NumHeight": 7,
                              "BackIsHidden": true,
                              "UniqueBack": false,
                              "Type": 0
                            }
                          },
                          "LuaScript": "",
                          "LuaScriptState": "",
                          "XmlUI": ""
                        },
                        {
                          "GUID": "906c4a",
                          "Name": "Card",
                          "Transform": {
                            "posX": -23.5,
                            "posY": 1.77890563,
                            "posZ": 10.9999781,
                            "rotX": -5.03044566E-06,
                            "rotY": 180.0008,
                            "rotZ": -2.13671782E-08,
                            "scaleX": 1.0,
                            "scaleY": 1.0,
                            "scaleZ": 1.0
                          },
                          "Nickname": "Rédemption d'un Ancien Collègue",
                          "Description": "Machination",
                          "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87034\",\n  \"traits\": \"Machination.\",\n  \"type\": \"Story\",\n  \"victory\": 1\n}",
                          "AltLookAngle": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0
                          },
                          "ColorDiffuse": {
                            "r": 0.713235259,
                            "g": 0.713235259,
                            "b": 0.713235259
                          },
                          "LayoutGroupSortIndex": 0,
                          "Value": 0,
                          "Locked": false,
                          "Grid": true,
                          "Snap": true,
                          "IgnoreFoW": false,
                          "MeasureMovement": false,
                          "DragSelectable": true,
                          "Autoraise": true,
                          "Sticky": true,
                          "Tooltip": true,
                          "GridProjection": false,
                          "HideWhenFaceDown": true,
                          "Hands": true,
                          "CardID": 1104906,
                          "SidewaysCard": false,
                          "CustomDeck": {
                            "11049": {
                              "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                              "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                              "NumWidth": 10,
                              "NumHeight": 7,
                              "BackIsHidden": true,
                              "UniqueBack": true,
                              "Type": 0
                            }
                          },
                          "LuaScript": "",
                          "LuaScriptState": "",
                          "XmlUI": ""
                        }
                      ]
                    },
                    {
                      "GUID": "c68b2a",
                      "Name": "Custom_Model_Bag",
                      "Transform": {
                        "posX": -28.0,
                        "posY": 2.41592121,
                        "posZ": 17.0,
                        "rotX": -9.752339E-05,
                        "rotY": 179.985626,
                        "rotZ": 0.0007813817,
                        "scaleX": 0.7,
                        "scaleY": 0.7,
                        "scaleZ": 0.7
                      },
                      "Nickname": "Une Alliance Improbable",
                      "Description": "Machination",
                      "GMNotes": "",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 1.0,
                        "g": 1.0,
                        "b": 1.0
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": true,
                      "GridProjection": false,
                      "HideWhenFaceDown": false,
                      "Hands": false,
                      "MaterialIndex": -1,
                      "MeshIndex": -1,
                      "CustomMesh": {
                        "MeshURL": "https://pastebin.com/raw/ALrYhQGb",
                        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/5077277234366558480/31140655872853ACBC44735F25B0EE7E19C72536/",
                        "NormalURL": "",
                        "ColliderURL": "",
                        "Convex": true,
                        "MaterialIndex": 3,
                        "TypeIndex": 6,
                        "CustomShader": {
                          "SpecularColor": {
                            "r": 1.0,
                            "g": 1.0,
                            "b": 1.0
                          },
                          "SpecularIntensity": 0.0,
                          "SpecularSharpness": 2.0,
                          "FresnelStrength": 0.0
                        },
                        "CastShadows": true
                      },
                      "Bag": {
                        "Order": 0
                      },
                      "LuaScript": "-- Utility memory bag by Directsun\r\n-- Version 2.7.0\r\n-- Fork of Memory Bag 2.0 by MrStump\r\n--\r\n-- Want to contribute? Create an issue or fork the code on GitHub and submit a pull request:\r\n-- https://github.com/sunflowermans/TTS-UtilityMemoryBag\r\n\r\n\r\nfunction updateSave()\r\n    local data_to_save = {[\"ml\"]=memoryList}\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n        -- memoryList[guid].rot.x = movedRotation.x\r\n        -- memoryList[guid].rot.y = movedRotation.y\r\n        -- memoryList[guid].rot.z = movedRotation.z\r\n    end\r\n\r\n    --theList[obj.getGUID()] = {\r\n    --    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n    --    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n    --    lock=obj.getLock()\r\n    --}\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n\r\n--Beginning Setup\r\n\r\n\r\n--Make setup button\r\nfunction createSetupButton()\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", {0.75, 0.75, 1})\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\n    -- return getAllObjects()\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1 * 1/self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor +2\r\n            objPos.z = objPos.z * globalScaleFactor\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = {0.75,0.25,0.25,0.6}\r\n            local colorMove = {0,0,1,0.6}\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function=funcName, function_owner=self,\r\n                position=objPos, rotation=rot, height=1000, width=1000,\r\n                color=color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n--Creates submit and cancel buttons\r\nfunction createSetupActionButtons(move)\r\n    self.createButton({\r\n       label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n       position={-1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n       font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    self.createButton({\r\n      label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n      position={-1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n      font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    if move == false then\r\n      self.createButton({\r\n          label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n          position={1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n          font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\r\n        })\r\n\r\n        self.createButton({\r\n            label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n            position={-1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n            font_size=250, color={0,0,0}, font_color={1,1,1}\r\n        })\r\n\r\n        if fresh == false then\r\n            self.createButton({\r\n                label=\"Mise à Jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                position={1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=180, color={0,0,0}, font_color={0.75,0.75,1}\r\n            })\r\n            self.createButton({\r\n                label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                position={1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\r\n            })\r\n        end\r\n    end\r\n\r\n    self.createButton({\r\n        label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n        position={0,0.3,-2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n\r\n--During Setup\r\n\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = {0,0,1,0.6}\r\n    local color = {0,1,0,0.6}\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({index=previousIndex, color=colorMove})\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({index=index, color=color})\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n            lock=obj.getLock(),\r\n            tint=obj.getColorTint()\r\n        }\r\n        obj.highlightOn({0,1,0})\r\n    else\r\n        color = {0.75,0.25,0.25,0.6}\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({index=index, color=color})\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({index=index, color={0,1,0,0.6}})\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n                    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n                    lock=obj.getLock(),\r\n                    tint=obj.getColorTint()\r\n                }\r\n                obj.highlightOn({0,1,0})\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = {0.75,0.25,0.25,0.6}\r\n                self.editButton({index=index, color=color})\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", {1,1,1})\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", {1, 0.25, 0.25})\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", {0.75, 0.75, 1})\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", {0.75, 0.25, 0.25})\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k,v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", {0.25, 0.75, 0.25})\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", {1.0, 0.25, 0.25})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Removed\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", {0.75, 0.75, 1})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\n\r\n--After Setup\r\n\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={0,0.3,2.8}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={2,0.3,0}, rotation={0,90,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---  \r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    local bagObjList = self.getObjects()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid=guid, position=entry.pos, rotation=entry.rot, smooth=false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n\r\n--Utility functions\r\n\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x-p1.x)\r\n    deltaPos.y = (p2.y-p1.y) + yOffset\r\n    deltaPos.z = (p2.z-p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10^(dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample:\r\n{'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'}\r\n--]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend",
                      "LuaScriptState": "{\"ml\":{\"107b72\":{\"lock\":false,\"pos\":{\"x\":35,\"y\":1.55607211589813,\"z\":-8.50010108947754},\"rot\":{\"x\":0.0923840254545212,\"y\":180.003723144531,\"z\":-6.1430073401425E-05},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"60640c\":{\"lock\":false,\"pos\":{\"x\":-32.0000114440918,\"y\":1.77890563011169,\"z\":9.99999237060547},\"rot\":{\"x\":-4.96799339089193E-06,\"y\":180.002532958984,\"z\":-2.10892237006988E-09},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"6977b1\":{\"lock\":false,\"pos\":{\"x\":-19.5000019073486,\"y\":1.77890598773956,\"z\":5.99999904632568},\"rot\":{\"x\":-5.15019701197161E-06,\"y\":179.997512817383,\"z\":180},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"9e10fb\":{\"lock\":false,\"pos\":{\"x\":-34.5000114440918,\"y\":1.77890563011169,\"z\":9.99998092651367},\"rot\":{\"x\":-5.2428335948207E-06,\"y\":179.973556518555,\"z\":9.30831731693615E-08},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}}}}",
                      "XmlUI": "",
                      "ContainedObjects": [
                        {
                          "GUID": "107b72",
                          "Name": "Card",
                          "Transform": {
                            "posX": -10.5000153,
                            "posY": 1.52111769,
                            "posZ": 17.4999847,
                            "rotX": 0.0108914133,
                            "rotY": 180.0013,
                            "rotZ": 0.00494842837,
                            "scaleX": 1.0,
                            "scaleY": 1.0,
                            "scaleZ": 1.0
                          },
                          "Nickname": "Une Alliance Improbable",
                          "Description": "Machination",
                          "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87035\",\n  \"traits\": \"Machination.\",\n  \"type\": \"Story\",\n  \"victory\": 1\n}",
                          "AltLookAngle": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0
                          },
                          "ColorDiffuse": {
                            "r": 0.713235259,
                            "g": 0.713235259,
                            "b": 0.713235259
                          },
                          "LayoutGroupSortIndex": 0,
                          "Value": 0,
                          "Locked": false,
                          "Grid": true,
                          "Snap": true,
                          "IgnoreFoW": false,
                          "MeasureMovement": false,
                          "DragSelectable": true,
                          "Autoraise": true,
                          "Sticky": true,
                          "Tooltip": true,
                          "GridProjection": false,
                          "HideWhenFaceDown": true,
                          "Hands": true,
                          "CardID": 1104905,
                          "SidewaysCard": false,
                          "CustomDeck": {
                            "11049": {
                              "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                              "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                              "NumWidth": 10,
                              "NumHeight": 7,
                              "BackIsHidden": true,
                              "UniqueBack": true,
                              "Type": 0
                            }
                          },
                          "LuaScript": "",
                          "LuaScriptState": "",
                          "XmlUI": ""
                        },
                        {
                          "GUID": "60640c",
                          "Name": "Card",
                          "Transform": {
                            "posX": -13.4999619,
                            "posY": 1.53857374,
                            "posZ": 20.5001221,
                            "rotX": 359.3887,
                            "rotY": 180.001251,
                            "rotZ": 0.00494438875,
                            "scaleX": 1.0,
                            "scaleY": 1.0,
                            "scaleZ": 1.0
                          },
                          "Nickname": "",
                          "Description": "",
                          "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"87022\",\n  \"sanity\": 2,\n  \"traits\": \"Scientist. Ally. Present.\",\n  \"type\": \"Asset\"\n}",
                          "AltLookAngle": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0
                          },
                          "ColorDiffuse": {
                            "r": 0.713235259,
                            "g": 0.713235259,
                            "b": 0.713235259
                          },
                          "LayoutGroupSortIndex": 0,
                          "Value": 0,
                          "Locked": false,
                          "Grid": true,
                          "Snap": true,
                          "IgnoreFoW": false,
                          "MeasureMovement": false,
                          "DragSelectable": true,
                          "Autoraise": true,
                          "Sticky": true,
                          "Tooltip": true,
                          "GridProjection": false,
                          "HideWhenFaceDown": true,
                          "Hands": true,
                          "CardID": 1110641,
                          "SidewaysCard": false,
                          "CustomDeck": {
                            "11106": {
                              "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                              "NumWidth": 10,
                              "NumHeight": 7,
                              "BackIsHidden": true,
                              "UniqueBack": false,
                              "Type": 0
                            }
                          },
                          "LuaScript": "",
                          "LuaScriptState": "",
                          "XmlUI": ""
                        },
                        {
                          "GUID": "6977b1",
                          "Name": "Card",
                          "Transform": {
                            "posX": -13.4999723,
                            "posY": 1.53764117,
                            "posZ": 15.49988,
                            "rotX": 0.633741856,
                            "rotY": 179.99704,
                            "rotZ": 180.004944,
                            "scaleX": 1.0,
                            "scaleY": 1.0,
                            "scaleZ": 1.0
                          },
                          "Nickname": "",
                          "Description": "",
                          "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"87037a\",\n  \"sanity\": 2,\n  \"traits\": \"Scientist. Ally.\",\n  \"type\": \"Asset\"\n}",
                          "AltLookAngle": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0
                          },
                          "ColorDiffuse": {
                            "r": 0.713235259,
                            "g": 0.713235259,
                            "b": 0.713235259
                          },
                          "LayoutGroupSortIndex": 0,
                          "Value": 0,
                          "Locked": false,
                          "Grid": true,
                          "Snap": true,
                          "IgnoreFoW": false,
                          "MeasureMovement": false,
                          "DragSelectable": true,
                          "Autoraise": true,
                          "Sticky": true,
                          "Tooltip": true,
                          "GridProjection": false,
                          "HideWhenFaceDown": true,
                          "Hands": true,
                          "CardID": 1105127,
                          "SidewaysCard": false,
                          "CustomDeck": {
                            "11051": {
                              "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                              "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                              "NumWidth": 10,
                              "NumHeight": 7,
                              "BackIsHidden": true,
                              "UniqueBack": true,
                              "Type": 0
                            }
                          },
                          "LuaScript": "",
                          "LuaScriptState": "",
                          "XmlUI": ""
                        },
                        {
                          "GUID": "9e10fb",
                          "Name": "Card",
                          "Transform": {
                            "posX": -13.9999771,
                            "posY": 1.52150047,
                            "posZ": 17.99999,
                            "rotX": 0.0110408571,
                            "rotY": 179.972351,
                            "rotZ": 0.003930501,
                            "scaleX": 1.0,
                            "scaleY": 1.0,
                            "scaleZ": 1.0
                          },
                          "Nickname": "",
                          "Description": "",
                          "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"87021\",\n  \"sanity\": 2,\n  \"traits\": \"Scientist. Ally. Present.\",\n  \"type\": \"Asset\"\n}",
                          "AltLookAngle": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0
                          },
                          "ColorDiffuse": {
                            "r": 0.713235259,
                            "g": 0.713235259,
                            "b": 0.713235259
                          },
                          "LayoutGroupSortIndex": 0,
                          "Value": 0,
                          "Locked": false,
                          "Grid": true,
                          "Snap": true,
                          "IgnoreFoW": false,
                          "MeasureMovement": false,
                          "DragSelectable": true,
                          "Autoraise": true,
                          "Sticky": true,
                          "Tooltip": true,
                          "GridProjection": false,
                          "HideWhenFaceDown": true,
                          "Hands": true,
                          "CardID": 1110638,
                          "SidewaysCard": false,
                          "CustomDeck": {
                            "11106": {
                              "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                              "NumWidth": 10,
                              "NumHeight": 7,
                              "BackIsHidden": true,
                              "UniqueBack": false,
                              "Type": 0
                            }
                          },
                          "LuaScript": "",
                          "LuaScriptState": "",
                          "XmlUI": ""
                        }
                      ]
                    }
                  ]
                },
                {
                  "GUID": "825940",
                  "Name": "Card",
                  "Transform": {
                    "posX": -0.5000017,
                    "posY": 1.51053953,
                    "posZ": 19.0000038,
                    "rotX": 0.0108916592,
                    "rotY": 179.997574,
                    "rotZ": 0.00494782533,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "",
                  "Description": "",
                  "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87017\",\n  \"locationBack\": {\n    \"connections\": \"Plus|Diamond|Tindalos\",\n    \"icons\": \"Spade|Portal\",\n    \"uses\": {\n      \"countPerInvestigator\": 3,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    },\n    \"victory\": 1\n  },\n  \"locationFront\": {\n    \"connections\": \"Plus|Diamond|Tindalos\",\n    \"icons\": \"Spade|Portal\"\n  },\n  \"traits\": \"Arkham. Portal. Present.\",\n  \"type\": \"Location\",\n  \"victory\": 1\n}",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 0.713235259,
                    "g": 0.713235259,
                    "b": 0.713235259
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": true,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": true,
                  "Tooltip": true,
                  "GridProjection": false,
                  "HideWhenFaceDown": true,
                  "Hands": true,
                  "CardID": 1104922,
                  "SidewaysCard": false,
                  "CustomDeck": {
                    "11049": {
                      "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                      "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                      "NumWidth": 10,
                      "NumHeight": 7,
                      "BackIsHidden": true,
                      "UniqueBack": true,
                      "Type": 0
                    }
                  },
                  "LuaScript": "",
                  "LuaScriptState": "",
                  "XmlUI": ""
                },
                {
                  "GUID": "dc7905",
                  "Name": "Card",
                  "Transform": {
                    "posX": 10.9999981,
                    "posY": 1.5095464,
                    "posZ": 19.0000057,
                    "rotX": 0.0108913621,
                    "rotY": 180.00177,
                    "rotZ": 0.00494863326,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "",
                  "Description": "",
                  "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87028\",\n  \"locationBack\": {\n    \"connections\": \"Spade|Apostrophe|Tindalos\",\n    \"icons\": \"Diamond|Portal\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Spade|Apostrophe|Tindalos\",\n    \"icons\": \"Diamond|Portal\"\n  },\n  \"traits\": \"Arkham. Portal. Future.\",\n  \"type\": \"Location\"\n}",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 0.713235259,
                    "g": 0.713235259,
                    "b": 0.713235259
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": true,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": true,
                  "Tooltip": true,
                  "GridProjection": false,
                  "HideWhenFaceDown": true,
                  "Hands": true,
                  "CardID": 1104924,
                  "SidewaysCard": false,
                  "CustomDeck": {
                    "11049": {
                      "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                      "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                      "NumWidth": 10,
                      "NumHeight": 7,
                      "BackIsHidden": true,
                      "UniqueBack": true,
                      "Type": 0
                    }
                  },
                  "LuaScript": "",
                  "LuaScriptState": "",
                  "XmlUI": ""
                },
                {
                  "GUID": "e30486",
                  "Name": "Card",
                  "Transform": {
                    "posX": 18.0000019,
                    "posY": 1.50494993,
                    "posZ": -1.99999857,
                    "rotX": 0.0108914906,
                    "rotY": 179.999222,
                    "rotZ": 0.004948116,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "",
                  "Description": "",
                  "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87024\",\n  \"type\": \"Story\",\n  \"victory\": 1\n}",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 0.713235259,
                    "g": 0.713235259,
                    "b": 0.713235259
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": true,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": true,
                  "Tooltip": true,
                  "GridProjection": false,
                  "HideWhenFaceDown": true,
                  "Hands": true,
                  "CardID": 1104908,
                  "SidewaysCard": false,
                  "CustomDeck": {
                    "11049": {
                      "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                      "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                      "NumWidth": 10,
                      "NumHeight": 7,
                      "BackIsHidden": true,
                      "UniqueBack": true,
                      "Type": 0
                    }
                  },
                  "LuaScript": "",
                  "LuaScriptState": "",
                  "XmlUI": ""
                },
                {
                  "GUID": "fe84d6",
                  "Name": "Custom_Model",
                  "Transform": {
                    "posX": 5.499998,
                    "posY": 1.49760652,
                    "posZ": 20.0000057,
                    "rotX": 359.9891,
                    "rotY": 359.982178,
                    "rotZ": -0.004944726,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "Text Tool",
                  "Description": "",
                  "GMNotes": "",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 0.0,
                    "g": 0.0,
                    "b": 0.0,
                    "a": 0.0
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": false,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": false,
                  "Tooltip": false,
                  "GridProjection": false,
                  "HideWhenFaceDown": false,
                  "Hands": false,
                  "CustomMesh": {
                    "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/1478820768302617365/27883B7913E0E69143C3AA03493B7E7C4E8C29C0/",
                    "DiffuseURL": "",
                    "NormalURL": "",
                    "ColliderURL": "",
                    "Convex": true,
                    "MaterialIndex": 1,
                    "TypeIndex": 0,
                    "CastShadows": true
                  },
                  "LuaScript": "-- Code for bag to identify text tool objects\r\nmovableTextTool_cowgoesmoo33 = true\r\n\r\n-- Number of characters before the text box width expands.\r\nEXPAND_INTERVAL = 20\r\n\r\n-- This table controls what is passed between save/load\r\ndata = {}\r\n\r\nfunction onLoad(saved_data)\r\n  if saved_data ~= '' then\r\n    data = JSON.decode(saved_data)\r\n    if data.text ~= '' then\r\n      self.interactable = data.interactable\r\n      staticMode()\r\n      return\r\n    end\r\n  else\r\n    data = {size=200, color=Color(0,0,0), text='', interactable=true,\r\n        enter_to_finish=false, autolock=false, autolift=false,\r\n        hover_height=0.05, box_transparency=1}\r\n  end\r\n\r\n  inputMode()\r\nend\r\n\r\n-- True if in the middle of delay after pressing Enter (with enter_to_finish on)\r\nfinishing = false\r\nfunction input_func(obj, color, input, stillEditing)\r\n  local params = getBox(input)\r\n  if params then\r\n    params.value = input\r\n    self.editInput(params)\r\n  end\r\n\r\n  if not stillEditing then\r\n    data.text = input\r\n    updateState()\r\n    if input ~= '' then staticMode(color) end\r\n  elseif data.enter_to_finish then\r\n    -- If enter is pressed: remove last newline and force finish\r\n    if not finishing and input:sub(-1) == '\\n' then\r\n      finishing = true\r\n      -- Delay to avoid user's Enter keypress being detected (opens chat box)\r\n      Wait.frames(function()\r\n        input = input:sub(1, -2)\r\n        data.text = input\r\n        updateState()\r\n        if input ~= '' then staticMode(color) else inputMode() end\r\n        finishing = false\r\n      end, 10)\r\n    end\r\n  end\r\nend\r\n\r\n-- When the inpupt box appears and lets the player type in it.\r\nfunction inputMode()\r\n  self.clearContextMenu()\r\n  self.clearInputs()\r\n  self.clearButtons()\r\n\r\n  local size = getBox(data.text, true)\r\n\r\n  self.createInput({\r\n    input_function = \"input_func\",\r\n    function_owner = self,\r\n    label          = \"Type Here\",\r\n    alignment      = 3,\r\n    position       = {x=0, y=data.hover_height, z=0},\r\n    rotation       = {0, 180, 0},\r\n    width          = size.width,\r\n    height         = size.height,\r\n    color          = getBackground(data.color),\r\n    font_color     = data.color,\r\n    font_size      = data.size,\r\n    value          = data.text,\r\n  })\r\n\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\nend\r\n\r\n-- When the input box disappears and displays the text.\r\nfunction staticMode(player)\r\n  self.clearContextMenu()\r\n  if data.autolock then\r\n    self.locked = true\r\n  end\r\n  if self.getInputs() and #self.getInputs() ~= 0 then\r\n    self.removeInput(0)\r\n  end\r\n\r\n  -- Clear from selecting player\r\n  if player then\r\n    self.removeFromPlayerSelection(player)\r\n  end\r\n\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  self.createButton({\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=self,\r\n    position={0,data.hover_height,0}, rotation={0,180,0}, height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  })\r\n\r\n  self.addContextMenuItem('Edit Text', function(color)\r\n    self.removeFromPlayerSelection(color)\r\n    inputMode()\r\n  end)\r\n  self.addContextMenuItem('Clear', function(color)\r\n    applyMultiple(color, 'clear', _, true)\r\n  end)\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\n  self.addContextMenuItem('Permanently Attach', attemptAttach)\r\n  self.addContextMenuItem('Permalock', function(color)\r\n    applyMultiple(color, 'permalock', _, true)\r\n  end)\r\nend\r\n\r\nfunction changeSize(params)\r\n  local delta = params[1]\r\n  local newSize = data.size + delta\r\n  if newSize > 800  or newSize < 50 then\r\n    return\r\n  end\r\n  data.size = newSize\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_size=data.size})\r\n  else\r\n    local size = getBox(data.text, true)\r\n    self.editInput({width=size.width, height=size.height, font_size=data.size})\r\n  end\r\nend\r\n\r\nfunction setColor(params)\r\n  if params and params[1] then\r\n    data.color = params[1]\r\n  else\r\n    data.color = self.getColorTint():setAt('a', 1) -- Take on color of object tint\r\n  end\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_color=data.color})\r\n  else\r\n    self.editInput({font_color=data.color, color=getBackground(data.color)})\r\n  end\r\nend\r\n\r\nfunction getBackground(color) --determines whether to use black or white depending on luminance\r\n  local r,g,b = Color(color):get()\r\n\r\n  local lum = 0.2126*r + 0.7152*g + 0.0722*b\r\n  if lum > 0.75 then\r\n    return {0.2,0.2,0.2, data.box_transparency}\r\n  else\r\n    return {1,1,1, data.box_transparency}\r\n  end\r\nend\r\n\r\nfunction clear()\r\n  data.text = ''\r\n  updateState()\r\n  inputMode()\r\nend\r\n\r\nfunction permalock()\r\n  self.interactable = false\r\n  data.interactable = false\r\n  updateState()\r\nend\r\n\r\nlocal target_script = [[\r\nfunction onLoad(script_state)\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    for _,entry in ipairs(state) do\r\n      self.createButton(entry)\r\n    end\r\n    self.addContextMenuItem('Clear All Text', function(color)\r\n      self.clearContextMenu()\r\n      self.clearButtons()\r\n      self.script_state = ''\r\n      self.script_code = ''\r\n    end)\r\n  end\r\nend\r\n]]\r\n\r\nfunction attemptAttach(player_color)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  local attachee\r\n  local attachers = {}\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if obj ~= self then\r\n        table.insert(attachers, obj)\r\n      end\r\n    else\r\n      if attachee then\r\n        broadcastToColor(\"More than one target selected.\", player_color)\r\n        return\r\n      else\r\n        attachee = obj\r\n      end\r\n    end\r\n  end\r\n  if attachee then\r\n    local code = attachee.script_code\r\n    if code and code ~= '' and code ~= target_script then\r\n      broadcastToColor(\"Warning: script on card has been overriden. Rewind time to undo.\", player_color)\r\n    end\r\n    for i,attacher in ipairs(attachers) do\r\n      attacher.call('attach', {target = attachee})\r\n    end\r\n    attach({target = attachee})\r\n    local type, flip = attachee.type, attachee.getRotation().z\r\n    if (type == 'Card' or type == 'Deck') and flip > 175 and flip < 185 then\r\n      broadcastToColor(\"Warning: text will not display if card or deck is facing down.\", player_color)\r\n    end\r\n  else\r\n    broadcastToColor(\"You must have a target object in your selection (using click-and-drag or Ctrl+Click) to use this option.\", player_color)\r\n  end\r\nend\r\n\r\nfunction attach(params)\r\n  local target = params.target\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  local textRotation = self.getRotation():sub(target.getRotation())\r\n    :add(Vector(180, 0, 180))\r\n\r\n  local textPosition = target.positionToLocal(\r\n    self.getPosition():add(Vector(0, data.hover_height, 0))\r\n  )\r\n  textPosition.x = -textPosition.x\r\n\r\n  local textScale = {}\r\n  textScale.x = self.getScale().x / target.getScale().x\r\n  textScale.y = self.getScale().x / target.getScale().y\r\n  textScale.z = self.getScale().x / target.getScale().z\r\n\r\n  local details = {\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=nil,\r\n    position=textPosition,\r\n    rotation=textRotation,\r\n    scale=textScale,\r\n    height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  }\r\n\r\n  target.createButton(details)\r\n\r\n  local script_state = target.script_state\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    table.insert(state, details)\r\n    target.script_state = JSON.encode(state)\r\n  else\r\n    target.script_state = JSON.encode({[1]=details})\r\n  end\r\n\r\n  target.script_code = target_script\r\n\r\n  self.destruct()\r\nend\r\n\r\nfunction applyMultiple(player_color, func_string, params, static_only)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if not static_only or obj.call('isStatic') then\r\n        obj.call(func_string, params)\r\n      end\r\n    end\r\n  end\r\nend\r\n\r\nfunction isStatic()\r\n  local input = self.getInputs()\r\n  return not input or #input == 0\r\nend\r\n\r\nfunction getBox(input, force)\r\n  local maxLength, lineCount = EXPAND_INTERVAL, 1\r\n  local lineLength = 0\r\n  for i = 1, #input do\r\n    local c = input:sub(i,i)\r\n    if c == '\\n' then\r\n      lineCount = lineCount + 1\r\n      if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n      lineLength = 0\r\n    else\r\n      lineLength = lineLength + 1\r\n    end\r\n  end\r\n  if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n\r\n  newWidth = data.size * maxLength * 0.9\r\n  newHeight = data.size * lineCount + 23\r\n\r\n  if force or boxWidth ~= newWidth or boxHeight ~= newHeight then\r\n    boxWidth, boxHeight = newWidth, newHeight\r\n    return {width = boxWidth, height = boxHeight}\r\n  end\r\n  return nil\r\nend\r\n\r\ntemp_lift = nil\r\nfunction onPickUp(player_color)\r\n  if data.autolift then\r\n    local player = Player[player_color]\r\n    temp_lift = player.lift_height\r\n    player.lift_height = 0\r\n  end\r\nend\r\n\r\nfunction onDrop(player_color)\r\n  if data.autolift and temp_lift then\r\n    Player[player_color].lift_height = temp_lift\r\n  end\r\nend\r\n\r\n-- Should be called every time data is modified, allows info to be saved on copy/paste\r\nfunction updateState()\r\n  self.script_state = JSON.encode(data)\r\nend\r\n\r\nfunction onSave()\r\n  self.script_state = JSON.encode(data)\r\n  return self.script_state\r\nend",
                  "LuaScriptState": "{\"autolift\":false,\"autolock\":false,\"box_transparency\":1,\"color\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1},\"enter_to_finish\":false,\"hover_height\":0.05,\"interactable\":true,\"size\":350,\"text\":\"Futur\"}",
                  "XmlUI": ""
                }
              ]
            },
            {
              "GUID": "b042a5",
              "Name": "Custom_Model",
              "Transform": {
                "posX": -23.4999943,
                "posY": 1.77099919,
                "posZ": 25.5000076,
                "rotX": 4.70076748E-06,
                "rotY": 0.000125436592,
                "rotZ": -2.03662026E-07,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "Text Tool",
              "Description": "",
              "GMNotes": "",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 0.0,
                "g": 0.0,
                "b": 0.0,
                "a": 0.0
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": false,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": false,
              "Tooltip": false,
              "GridProjection": false,
              "HideWhenFaceDown": false,
              "Hands": false,
              "CustomMesh": {
                "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/1478820768302617365/27883B7913E0E69143C3AA03493B7E7C4E8C29C0/",
                "DiffuseURL": "",
                "NormalURL": "",
                "ColliderURL": "",
                "Convex": true,
                "MaterialIndex": 1,
                "TypeIndex": 0,
                "CastShadows": true
              },
              "LuaScript": "-- Code for bag to identify text tool objects\r\nmovableTextTool_cowgoesmoo33 = true\r\n\r\n-- Number of characters before the text box width expands.\r\nEXPAND_INTERVAL = 20\r\n\r\n-- This table controls what is passed between save/load\r\ndata = {}\r\n\r\nfunction onLoad(saved_data)\r\n  if saved_data ~= '' then\r\n    data = JSON.decode(saved_data)\r\n    if data.text ~= '' then\r\n      self.interactable = data.interactable\r\n      staticMode()\r\n      return\r\n    end\r\n  else\r\n    data = {size=200, color=Color(0,0,0), text='', interactable=true,\r\n        enter_to_finish=false, autolock=false, autolift=false,\r\n        hover_height=0.05, box_transparency=1}\r\n  end\r\n\r\n  inputMode()\r\nend\r\n\r\n-- True if in the middle of delay after pressing Enter (with enter_to_finish on)\r\nfinishing = false\r\nfunction input_func(obj, color, input, stillEditing)\r\n  local params = getBox(input)\r\n  if params then\r\n    params.value = input\r\n    self.editInput(params)\r\n  end\r\n\r\n  if not stillEditing then\r\n    data.text = input\r\n    updateState()\r\n    if input ~= '' then staticMode(color) end\r\n  elseif data.enter_to_finish then\r\n    -- If enter is pressed: remove last newline and force finish\r\n    if not finishing and input:sub(-1) == '\\n' then\r\n      finishing = true\r\n      -- Delay to avoid user's Enter keypress being detected (opens chat box)\r\n      Wait.frames(function()\r\n        input = input:sub(1, -2)\r\n        data.text = input\r\n        updateState()\r\n        if input ~= '' then staticMode(color) else inputMode() end\r\n        finishing = false\r\n      end, 10)\r\n    end\r\n  end\r\nend\r\n\r\n-- When the inpupt box appears and lets the player type in it.\r\nfunction inputMode()\r\n  self.clearContextMenu()\r\n  self.clearInputs()\r\n  self.clearButtons()\r\n\r\n  local size = getBox(data.text, true)\r\n\r\n  self.createInput({\r\n    input_function = \"input_func\",\r\n    function_owner = self,\r\n    label          = \"Type Here\",\r\n    alignment      = 3,\r\n    position       = {x=0, y=data.hover_height, z=0},\r\n    rotation       = {0, 180, 0},\r\n    width          = size.width,\r\n    height         = size.height,\r\n    color          = getBackground(data.color),\r\n    font_color     = data.color,\r\n    font_size      = data.size,\r\n    value          = data.text,\r\n  })\r\n\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\nend\r\n\r\n-- When the input box disappears and displays the text.\r\nfunction staticMode(player)\r\n  self.clearContextMenu()\r\n  if data.autolock then\r\n    self.locked = true\r\n  end\r\n  if self.getInputs() and #self.getInputs() ~= 0 then\r\n    self.removeInput(0)\r\n  end\r\n\r\n  -- Clear from selecting player\r\n  if player then\r\n    self.removeFromPlayerSelection(player)\r\n  end\r\n\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  self.createButton({\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=self,\r\n    position={0,data.hover_height,0}, rotation={0,180,0}, height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  })\r\n\r\n  self.addContextMenuItem('Edit Text', function(color)\r\n    self.removeFromPlayerSelection(color)\r\n    inputMode()\r\n  end)\r\n  self.addContextMenuItem('Clear', function(color)\r\n    applyMultiple(color, 'clear', _, true)\r\n  end)\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\n  self.addContextMenuItem('Permanently Attach', attemptAttach)\r\n  self.addContextMenuItem('Permalock', function(color)\r\n    applyMultiple(color, 'permalock', _, true)\r\n  end)\r\nend\r\n\r\nfunction changeSize(params)\r\n  local delta = params[1]\r\n  local newSize = data.size + delta\r\n  if newSize > 800  or newSize < 50 then\r\n    return\r\n  end\r\n  data.size = newSize\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_size=data.size})\r\n  else\r\n    local size = getBox(data.text, true)\r\n    self.editInput({width=size.width, height=size.height, font_size=data.size})\r\n  end\r\nend\r\n\r\nfunction setColor(params)\r\n  if params and params[1] then\r\n    data.color = params[1]\r\n  else\r\n    data.color = self.getColorTint():setAt('a', 1) -- Take on color of object tint\r\n  end\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_color=data.color})\r\n  else\r\n    self.editInput({font_color=data.color, color=getBackground(data.color)})\r\n  end\r\nend\r\n\r\nfunction getBackground(color) --determines whether to use black or white depending on luminance\r\n  local r,g,b = Color(color):get()\r\n\r\n  local lum = 0.2126*r + 0.7152*g + 0.0722*b\r\n  if lum > 0.75 then\r\n    return {0.2,0.2,0.2, data.box_transparency}\r\n  else\r\n    return {1,1,1, data.box_transparency}\r\n  end\r\nend\r\n\r\nfunction clear()\r\n  data.text = ''\r\n  updateState()\r\n  inputMode()\r\nend\r\n\r\nfunction permalock()\r\n  self.interactable = false\r\n  data.interactable = false\r\n  updateState()\r\nend\r\n\r\nlocal target_script = [[\r\nfunction onLoad(script_state)\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    for _,entry in ipairs(state) do\r\n      self.createButton(entry)\r\n    end\r\n    self.addContextMenuItem('Clear All Text', function(color)\r\n      self.clearContextMenu()\r\n      self.clearButtons()\r\n      self.script_state = ''\r\n      self.script_code = ''\r\n    end)\r\n  end\r\nend\r\n]]\r\n\r\nfunction attemptAttach(player_color)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  local attachee\r\n  local attachers = {}\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if obj ~= self then\r\n        table.insert(attachers, obj)\r\n      end\r\n    else\r\n      if attachee then\r\n        broadcastToColor(\"More than one target selected.\", player_color)\r\n        return\r\n      else\r\n        attachee = obj\r\n      end\r\n    end\r\n  end\r\n  if attachee then\r\n    local code = attachee.script_code\r\n    if code and code ~= '' and code ~= target_script then\r\n      broadcastToColor(\"Warning: script on card has been overriden. Rewind time to undo.\", player_color)\r\n    end\r\n    for i,attacher in ipairs(attachers) do\r\n      attacher.call('attach', {target = attachee})\r\n    end\r\n    attach({target = attachee})\r\n    local type, flip = attachee.type, attachee.getRotation().z\r\n    if (type == 'Card' or type == 'Deck') and flip > 175 and flip < 185 then\r\n      broadcastToColor(\"Warning: text will not display if card or deck is facing down.\", player_color)\r\n    end\r\n  else\r\n    broadcastToColor(\"You must have a target object in your selection (using click-and-drag or Ctrl+Click) to use this option.\", player_color)\r\n  end\r\nend\r\n\r\nfunction attach(params)\r\n  local target = params.target\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  local textRotation = self.getRotation():sub(target.getRotation())\r\n    :add(Vector(180, 0, 180))\r\n\r\n  local textPosition = target.positionToLocal(\r\n    self.getPosition():add(Vector(0, data.hover_height, 0))\r\n  )\r\n  textPosition.x = -textPosition.x\r\n\r\n  local textScale = {}\r\n  textScale.x = self.getScale().x / target.getScale().x\r\n  textScale.y = self.getScale().x / target.getScale().y\r\n  textScale.z = self.getScale().x / target.getScale().z\r\n\r\n  local details = {\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=nil,\r\n    position=textPosition,\r\n    rotation=textRotation,\r\n    scale=textScale,\r\n    height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  }\r\n\r\n  target.createButton(details)\r\n\r\n  local script_state = target.script_state\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    table.insert(state, details)\r\n    target.script_state = JSON.encode(state)\r\n  else\r\n    target.script_state = JSON.encode({[1]=details})\r\n  end\r\n\r\n  target.script_code = target_script\r\n\r\n  self.destruct()\r\nend\r\n\r\nfunction applyMultiple(player_color, func_string, params, static_only)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if not static_only or obj.call('isStatic') then\r\n        obj.call(func_string, params)\r\n      end\r\n    end\r\n  end\r\nend\r\n\r\nfunction isStatic()\r\n  local input = self.getInputs()\r\n  return not input or #input == 0\r\nend\r\n\r\nfunction getBox(input, force)\r\n  local maxLength, lineCount = EXPAND_INTERVAL, 1\r\n  local lineLength = 0\r\n  for i = 1, #input do\r\n    local c = input:sub(i,i)\r\n    if c == '\\n' then\r\n      lineCount = lineCount + 1\r\n      if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n      lineLength = 0\r\n    else\r\n      lineLength = lineLength + 1\r\n    end\r\n  end\r\n  if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n\r\n  newWidth = data.size * maxLength * 0.9\r\n  newHeight = data.size * lineCount + 23\r\n\r\n  if force or boxWidth ~= newWidth or boxHeight ~= newHeight then\r\n    boxWidth, boxHeight = newWidth, newHeight\r\n    return {width = boxWidth, height = boxHeight}\r\n  end\r\n  return nil\r\nend\r\n\r\ntemp_lift = nil\r\nfunction onPickUp(player_color)\r\n  if data.autolift then\r\n    local player = Player[player_color]\r\n    temp_lift = player.lift_height\r\n    player.lift_height = 0\r\n  end\r\nend\r\n\r\nfunction onDrop(player_color)\r\n  if data.autolift and temp_lift then\r\n    Player[player_color].lift_height = temp_lift\r\n  end\r\nend\r\n\r\n-- Should be called every time data is modified, allows info to be saved on copy/paste\r\nfunction updateState()\r\n  self.script_state = JSON.encode(data)\r\nend\r\n\r\nfunction onSave()\r\n  self.script_state = JSON.encode(data)\r\n  return self.script_state\r\nend",
              "LuaScriptState": "{\"autolift\":false,\"autolock\":false,\"box_transparency\":1,\"color\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1},\"enter_to_finish\":false,\"hover_height\":0.05,\"interactable\":true,\"size\":250,\"text\":\"2) Placer la bonne époque\"}",
              "XmlUI": ""
            },
            {
              "GUID": "c72403",
              "Name": "Custom_Model_Bag",
              "Transform": {
                "posX": -26.4999924,
                "posY": 1.83999932,
                "posZ": 24.0000038,
                "rotX": -5.58744841E-06,
                "rotY": 180.0056,
                "rotZ": 7.3885883E-07,
                "scaleX": 0.7,
                "scaleY": 0.7,
                "scaleZ": 0.7
              },
              "Nickname": "Passé",
              "Description": "",
              "GMNotes": "",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": true,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": true,
              "Tooltip": true,
              "GridProjection": false,
              "HideWhenFaceDown": false,
              "Hands": false,
              "MaterialIndex": -1,
              "MeshIndex": -1,
              "CustomMesh": {
                "MeshURL": "https://pastebin.com/raw/ALrYhQGb",
                "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/5077277234366553874/6AD0ADBA7941ACCDAB1C18E898E706CAB8B5331F/",
                "NormalURL": "",
                "ColliderURL": "",
                "Convex": true,
                "MaterialIndex": 3,
                "TypeIndex": 6,
                "CustomShader": {
                  "SpecularColor": {
                    "r": 1.0,
                    "g": 1.0,
                    "b": 1.0
                  },
                  "SpecularIntensity": 0.0,
                  "SpecularSharpness": 2.0,
                  "FresnelStrength": 0.0
                },
                "CastShadows": true
              },
              "Bag": {
                "Order": 0
              },
              "LuaScript": "-- Utility memory bag by Directsun\r\n-- Version 2.7.0\r\n-- Fork of Memory Bag 2.0 by MrStump\r\n--\r\n-- Want to contribute? Create an issue or fork the code on GitHub and submit a pull request:\r\n-- https://github.com/sunflowermans/TTS-UtilityMemoryBag\r\n\r\n\r\nfunction updateSave()\r\n    local data_to_save = {[\"ml\"]=memoryList}\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n        -- memoryList[guid].rot.x = movedRotation.x\r\n        -- memoryList[guid].rot.y = movedRotation.y\r\n        -- memoryList[guid].rot.z = movedRotation.z\r\n    end\r\n\r\n    --theList[obj.getGUID()] = {\r\n    --    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n    --    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n    --    lock=obj.getLock()\r\n    --}\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n\r\n--Beginning Setup\r\n\r\n\r\n--Make setup button\r\nfunction createSetupButton()\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", {0.75, 0.75, 1})\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\n    -- return getAllObjects()\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1 * 1/self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor +2\r\n            objPos.z = objPos.z * globalScaleFactor\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = {0.75,0.25,0.25,0.6}\r\n            local colorMove = {0,0,1,0.6}\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function=funcName, function_owner=self,\r\n                position=objPos, rotation=rot, height=1000, width=1000,\r\n                color=color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n--Creates submit and cancel buttons\r\nfunction createSetupActionButtons(move)\r\n    self.createButton({\r\n       label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n       position={-1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n       font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    self.createButton({\r\n      label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n      position={-1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n      font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    if move == false then\r\n      self.createButton({\r\n          label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n          position={1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n          font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\r\n        })\r\n\r\n        self.createButton({\r\n            label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n            position={-1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n            font_size=250, color={0,0,0}, font_color={1,1,1}\r\n        })\r\n\r\n        if fresh == false then\r\n            self.createButton({\r\n                label=\"Mise à Jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                position={1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=180, color={0,0,0}, font_color={0.75,0.75,1}\r\n            })\r\n            self.createButton({\r\n                label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                position={1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\r\n            })\r\n        end\r\n    end\r\n\r\n    self.createButton({\r\n        label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n        position={0,0.3,-2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n\r\n--During Setup\r\n\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = {0,0,1,0.6}\r\n    local color = {0,1,0,0.6}\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({index=previousIndex, color=colorMove})\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({index=index, color=color})\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n            lock=obj.getLock(),\r\n            tint=obj.getColorTint()\r\n        }\r\n        obj.highlightOn({0,1,0})\r\n    else\r\n        color = {0.75,0.25,0.25,0.6}\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({index=index, color=color})\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({index=index, color={0,1,0,0.6}})\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n                    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n                    lock=obj.getLock(),\r\n                    tint=obj.getColorTint()\r\n                }\r\n                obj.highlightOn({0,1,0})\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = {0.75,0.25,0.25,0.6}\r\n                self.editButton({index=index, color=color})\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", {1,1,1})\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", {1, 0.25, 0.25})\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", {0.75, 0.75, 1})\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", {0.75, 0.25, 0.25})\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k,v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", {0.25, 0.75, 0.25})\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", {1.0, 0.25, 0.25})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Removed\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", {0.75, 0.75, 1})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\n\r\n--After Setup\r\n\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={0,0.3,2.8}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={2,0.3,0}, rotation={0,90,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---  \r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    local bagObjList = self.getObjects()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid=guid, position=entry.pos, rotation=entry.rot, smooth=false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n\r\n--Utility functions\r\n\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x-p1.x)\r\n    deltaPos.y = (p2.y-p1.y) + yOffset\r\n    deltaPos.z = (p2.z-p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10^(dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample:\r\n{'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'}\r\n--]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend",
              "LuaScriptState": "{\"ml\":{\"06edc7\":{\"lock\":false,\"pos\":{\"x\":10.9999980926514,\"y\":1.5195460319519,\"z\":19.0000038146973},\"rot\":{\"x\":0.0108915204182267,\"y\":179.999481201172,\"z\":0.00494821881875396},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"0aeab2\":{\"lock\":false,\"pos\":{\"x\":2.99999833106995,\"y\":1.50492143630981,\"z\":10.0000038146973},\"rot\":{\"x\":0.00420764088630676,\"y\":224.975219726563,\"z\":0.0112025709822774},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"1c7fa1\":{\"lock\":false,\"pos\":{\"x\":-2.42264218286437E-06,\"y\":1.52049601078033,\"z\":19.0000038146973},\"rot\":{\"x\":0.0108918845653534,\"y\":179.994827270508,\"z\":0.0049472595565021},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"220649\":{\"lock\":false,\"pos\":{\"x\":-1.52764232552727E-06,\"y\":1.50575077533722,\"z\":13.0000038146973},\"rot\":{\"x\":0.0108916712924838,\"y\":179.999633789063,\"z\":0.00495215505361557},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"2f42e1\":{\"lock\":false,\"pos\":{\"x\":16.4999980926514,\"y\":1.50546622276306,\"z\":19.0000038146973},\"rot\":{\"x\":-0.00494585977867246,\"y\":269.989013671875,\"z\":0.0108934249728918},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"3c6cd6\":{\"lock\":false,\"pos\":{\"x\":5.49999809265137,\"y\":1.50413525104523,\"z\":7.00000333786011},\"rot\":{\"x\":-0.00494676688686013,\"y\":269.994842529297,\"z\":0.0108987940475345},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"400164\":{\"lock\":false,\"pos\":{\"x\":7.99999856948853,\"y\":1.50448966026306,\"z\":10.0000038146973},\"rot\":{\"x\":0.0112019293010235,\"y\":135.019546508789,\"z\":-0.00420065829530358},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"5354b7\":{\"lock\":false,\"pos\":{\"x\":7.99999856948853,\"y\":1.50563013553619,\"z\":16.0000019073486},\"rot\":{\"x\":0.00420761248096824,\"y\":224.976593017578,\"z\":0.0112026147544384},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"66f933\":{\"lock\":false,\"pos\":{\"x\":10.9999980926514,\"y\":1.51726496219635,\"z\":7.00000286102295},\"rot\":{\"x\":0.0108915437012911,\"y\":179.999481201172,\"z\":0.00494812848046422},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"72f879\":{\"lock\":false,\"pos\":{\"x\":21.9999980926514,\"y\":1.51859605312347,\"z\":19.0000038146973},\"rot\":{\"x\":0.0108908703550696,\"y\":180.008255004883,\"z\":0.00494970986619592},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"7558e3\":{\"lock\":false,\"pos\":{\"x\":5.49999856948853,\"y\":1.50641632080078,\"z\":19.0000038146973},\"rot\":{\"x\":-0.00494688050821424,\"y\":269.9951171875,\"z\":0.0108987474814057},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"8eb5a4\":{\"lock\":false,\"pos\":{\"x\":-2.39801624957181E-06,\"y\":1.51821494102478,\"z\":7.00000333786011},\"rot\":{\"x\":0.0108912289142609,\"y\":180.003875732422,\"z\":0.00494897970929742},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"8fefda\":{\"lock\":false,\"pos\":{\"x\":12,\"y\":1.51546776294708,\"z\":-1.99999964237213},\"rot\":{\"x\":0.0108915865421295,\"y\":179.998794555664,\"z\":0.00494807865470648},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"ad3e8b\":{\"lock\":false,\"pos\":{\"x\":2.99999833106995,\"y\":1.50606203079224,\"z\":16.0000038146973},\"rot\":{\"x\":0.0112000983208418,\"y\":134.993942260742,\"z\":-0.00420540571212769},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"d6fa6a\":{\"lock\":false,\"pos\":{\"x\":10.9999980926514,\"y\":1.51659965515137,\"z\":3.50000333786011},\"rot\":{\"x\":0.0108936429023743,\"y\":179.974807739258,\"z\":0.00494349002838135},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"d7b93b\":{\"lock\":false,\"pos\":{\"x\":-5.5,\"y\":1.5089,\"z\":22},\"rot\":{\"x\":359.9891,\"y\":0.005,\"z\":-0.005},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}},\"d83899\":{\"lock\":false,\"pos\":{\"x\":10.9999990463257,\"y\":1.50480079650879,\"z\":13.0000038146973},\"rot\":{\"x\":0.0108920400962234,\"y\":179.995162963867,\"z\":0.00495448987931013},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"f2c013\":{\"lock\":false,\"pos\":{\"x\":5.49999856948853,\"y\":1.50760626792908,\"z\":20.0000038146973},\"rot\":{\"x\":359.989105224609,\"y\":0.00545277679339051,\"z\":-0.00494927167892456},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}},\"f9e05e\":{\"lock\":false,\"pos\":{\"x\":-29,\"y\":1.7653,\"z\":17},\"rot\":{\"x\":0,\"y\":179.9995,\"z\":0},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}}}}",
              "XmlUI": "",
              "ContainedObjects": [
                {
                  "GUID": "06edc7",
                  "Name": "Card",
                  "Transform": {
                    "posX": 10.9999981,
                    "posY": 1.5095464,
                    "posZ": 19.0000057,
                    "rotX": 0.01089148,
                    "rotY": 179.999512,
                    "rotZ": 0.004947976,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "",
                  "Description": "",
                  "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87010\",\n  \"locationBack\": {\n    \"connections\": \"Hourglass|Heart|Tindalos\",\n    \"icons\": \"Triangle|Portal\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Hourglass|Heart|Tindalos\",\n    \"icons\": \"Triangle|Portal\"\n  },\n  \"traits\": \"Arkham. Portal. Past.\",\n  \"type\": \"Location\"\n}",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 0.713235259,
                    "g": 0.713235259,
                    "b": 0.713235259
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": true,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": true,
                  "Tooltip": true,
                  "GridProjection": false,
                  "HideWhenFaceDown": true,
                  "Hands": true,
                  "CardID": 1104913,
                  "SidewaysCard": false,
                  "CustomDeck": {
                    "11049": {
                      "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                      "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                      "NumWidth": 10,
                      "NumHeight": 7,
                      "BackIsHidden": true,
                      "UniqueBack": true,
                      "Type": 0
                    }
                  },
                  "LuaScript": "",
                  "LuaScriptState": "",
                  "XmlUI": ""
                },
                {
                  "GUID": "1c7fa1",
                  "Name": "Card",
                  "Transform": {
                    "posX": -3.1021525E-06,
                    "posY": 1.51049638,
                    "posZ": 19.0000057,
                    "rotX": 0.010891906,
                    "rotY": 179.994827,
                    "rotZ": 0.00494720135,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "",
                  "Description": "",
                  "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87008\",\n  \"locationBack\": {\n    \"connections\": \"Star|Triangle|Tindalos\",\n    \"icons\": \"Hourglass|Portal\",\n    \"uses\": {\n      \"countPerInvestigator\": 3,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    },\n    \"victory\": 1\n  },\n  \"locationFront\": {\n    \"connections\": \"Star|Triangle|Tindalos\",\n    \"icons\": \"Hourglass|Portal\"\n  },\n  \"traits\": \"Arkham. Portal. Past.\",\n  \"type\": \"Location\"\n}",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 0.713235259,
                    "g": 0.713235259,
                    "b": 0.713235259
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": true,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": true,
                  "Tooltip": true,
                  "GridProjection": false,
                  "HideWhenFaceDown": true,
                  "Hands": true,
                  "CardID": 1104911,
                  "SidewaysCard": false,
                  "CustomDeck": {
                    "11049": {
                      "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                      "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                      "NumWidth": 10,
                      "NumHeight": 7,
                      "BackIsHidden": true,
                      "UniqueBack": true,
                      "Type": 0
                    }
                  },
                  "LuaScript": "",
                  "LuaScriptState": "",
                  "XmlUI": ""
                },
                {
                  "GUID": "66f933",
                  "Name": "Card",
                  "Transform": {
                    "posX": 10.9999971,
                    "posY": 1.50726533,
                    "posZ": 7.00000429,
                    "rotX": 0.0108915716,
                    "rotY": 179.999481,
                    "rotZ": 0.00494815,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "",
                  "Description": "",
                  "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87009\",\n  \"locationBack\": {\n    \"connections\": \"Star|Triangle|Tindalos\",\n    \"icons\": \"Hourglass|Portal\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Star|Triangle|Tindalos\",\n    \"icons\": \"Hourglass|Portal\"\n  },\n  \"traits\": \"Arkham. Portal. Past.\",\n  \"type\": \"Location\"\n}",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 0.713235259,
                    "g": 0.713235259,
                    "b": 0.713235259
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": true,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": true,
                  "Tooltip": true,
                  "GridProjection": false,
                  "HideWhenFaceDown": true,
                  "Hands": true,
                  "CardID": 1104912,
                  "SidewaysCard": false,
                  "CustomDeck": {
                    "11049": {
                      "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                      "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                      "NumWidth": 10,
                      "NumHeight": 7,
                      "BackIsHidden": true,
                      "UniqueBack": true,
                      "Type": 0
                    }
                  },
                  "LuaScript": "",
                  "LuaScriptState": "",
                  "XmlUI": ""
                },
                {
                  "GUID": "72f879",
                  "Name": "Card",
                  "Transform": {
                    "posX": 21.9999981,
                    "posY": 1.50859642,
                    "posZ": 19.0000057,
                    "rotX": 0.010890699,
                    "rotY": 180.00827,
                    "rotZ": 0.00494980952,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "",
                  "Description": "",
                  "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87011\",\n  \"locationBack\": {\n    \"connections\": \"Triangle\",\n    \"icons\": \"Heart\",\n    \"uses\": {\n      \"countPerInvestigator\": 2,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Triangle\",\n    \"icons\": \"Heart\"\n  },\n  \"traits\": \"Arkham. Past.\",\n  \"type\": \"Location\"\n}",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 0.713235259,
                    "g": 0.713235259,
                    "b": 0.713235259
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": true,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": true,
                  "Tooltip": true,
                  "GridProjection": false,
                  "HideWhenFaceDown": true,
                  "Hands": true,
                  "CardID": 1104915,
                  "SidewaysCard": false,
                  "CustomDeck": {
                    "11049": {
                      "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                      "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                      "NumWidth": 10,
                      "NumHeight": 7,
                      "BackIsHidden": true,
                      "UniqueBack": true,
                      "Type": 0
                    }
                  },
                  "LuaScript": "",
                  "LuaScriptState": "",
                  "XmlUI": ""
                },
                {
                  "GUID": "8eb5a4",
                  "Name": "Card",
                  "Transform": {
                    "posX": -3.10226164E-06,
                    "posY": 1.50821531,
                    "posZ": 7.000005,
                    "rotX": 0.0108913211,
                    "rotY": 180.003876,
                    "rotZ": 0.00494909659,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "",
                  "Description": "",
                  "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87007\",\n  \"locationBack\": {\n    \"connections\": \"Hourglass|Tindalos\",\n    \"icons\": \"Star|Portal\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Hourglass|Tindalos\",\n    \"icons\": \"Star|Portal\"\n  },\n  \"traits\": \"Arkham. Portal. Past.\",\n  \"type\": \"Location\"\n}",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 0.713235259,
                    "g": 0.713235259,
                    "b": 0.713235259
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": true,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": true,
                  "Tooltip": true,
                  "GridProjection": false,
                  "HideWhenFaceDown": true,
                  "Hands": true,
                  "CardID": 1104910,
                  "SidewaysCard": false,
                  "CustomDeck": {
                    "11049": {
                      "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                      "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                      "NumWidth": 10,
                      "NumHeight": 7,
                      "BackIsHidden": true,
                      "UniqueBack": true,
                      "Type": 0
                    }
                  },
                  "LuaScript": "",
                  "LuaScriptState": "",
                  "XmlUI": ""
                },
                {
                  "GUID": "8fefda",
                  "Name": "Card",
                  "Transform": {
                    "posX": 11.999999,
                    "posY": 1.50546813,
                    "posZ": -1.99999833,
                    "rotX": 0.0108916275,
                    "rotY": 179.9988,
                    "rotZ": 0.004948019,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "",
                  "Description": "",
                  "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87006\",\n  \"type\": \"Story\",\n  \"victory\": 0\n}",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 0.713235259,
                    "g": 0.713235259,
                    "b": 0.713235259
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": true,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": true,
                  "Tooltip": true,
                  "GridProjection": false,
                  "HideWhenFaceDown": true,
                  "Hands": true,
                  "CardID": 1104901,
                  "SidewaysCard": false,
                  "CustomDeck": {
                    "11049": {
                      "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                      "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                      "NumWidth": 10,
                      "NumHeight": 7,
                      "BackIsHidden": true,
                      "UniqueBack": true,
                      "Type": 0
                    }
                  },
                  "LuaScript": "",
                  "LuaScriptState": "",
                  "XmlUI": ""
                },
                {
                  "GUID": "d6fa6a",
                  "Name": "Card",
                  "Transform": {
                    "posX": 10.999999,
                    "posY": 1.506773,
                    "posZ": 3.500001,
                    "rotX": 0.0147518311,
                    "rotY": 179.974747,
                    "rotZ": 0.008741797,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "",
                  "Description": "",
                  "GMNotes": "{\n  \"class\": \"Neutral\",\n  \"cycle\": \"Standalone\",\n  \"health\": 1,\n  \"id\": \"87023\",\n  \"sanity\": 2,\n  \"traits\": \"Scientist. Ally. Present.\",\n  \"type\": \"Asset\"\n}",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 0.713235259,
                    "g": 0.713235259,
                    "b": 0.713235259
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": true,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": true,
                  "Tooltip": true,
                  "GridProjection": false,
                  "HideWhenFaceDown": true,
                  "Hands": true,
                  "CardID": 1110702,
                  "SidewaysCard": false,
                  "CustomDeck": {
                    "11107": {
                      "FaceURL": "https://i.imgur.com/FhiblpC.jpg",
                      "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931552806915249927/583EE2570FC1A094D59B991E97AB542CA94BEBC9/",
                      "NumWidth": 10,
                      "NumHeight": 7,
                      "BackIsHidden": true,
                      "UniqueBack": false,
                      "Type": 0
                    }
                  },
                  "LuaScript": "",
                  "LuaScriptState": "",
                  "XmlUI": ""
                },
                {
                  "GUID": "f2c013",
                  "Name": "Custom_Model",
                  "Transform": {
                    "posX": 5.499998,
                    "posY": 1.49760664,
                    "posZ": 20.0000057,
                    "rotX": 359.9891,
                    "rotY": 0.00544104166,
                    "rotZ": -0.00494927634,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "Text Tool",
                  "Description": "",
                  "GMNotes": "",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 0.0,
                    "g": 0.0,
                    "b": 0.0,
                    "a": 0.0
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": false,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": false,
                  "Tooltip": false,
                  "GridProjection": false,
                  "HideWhenFaceDown": false,
                  "Hands": false,
                  "CustomMesh": {
                    "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/1478820768302617365/27883B7913E0E69143C3AA03493B7E7C4E8C29C0/",
                    "DiffuseURL": "",
                    "NormalURL": "",
                    "ColliderURL": "",
                    "Convex": true,
                    "MaterialIndex": 1,
                    "TypeIndex": 0,
                    "CastShadows": true
                  },
                  "LuaScript": "-- Code for bag to identify text tool objects\r\nmovableTextTool_cowgoesmoo33 = true\r\n\r\n-- Number of characters before the text box width expands.\r\nEXPAND_INTERVAL = 20\r\n\r\n-- This table controls what is passed between save/load\r\ndata = {}\r\n\r\nfunction onLoad(saved_data)\r\n  if saved_data ~= '' then\r\n    data = JSON.decode(saved_data)\r\n    if data.text ~= '' then\r\n      self.interactable = data.interactable\r\n      staticMode()\r\n      return\r\n    end\r\n  else\r\n    data = {size=200, color=Color(0,0,0), text='', interactable=true,\r\n        enter_to_finish=false, autolock=false, autolift=false,\r\n        hover_height=0.05, box_transparency=1}\r\n  end\r\n\r\n  inputMode()\r\nend\r\n\r\n-- True if in the middle of delay after pressing Enter (with enter_to_finish on)\r\nfinishing = false\r\nfunction input_func(obj, color, input, stillEditing)\r\n  local params = getBox(input)\r\n  if params then\r\n    params.value = input\r\n    self.editInput(params)\r\n  end\r\n\r\n  if not stillEditing then\r\n    data.text = input\r\n    updateState()\r\n    if input ~= '' then staticMode(color) end\r\n  elseif data.enter_to_finish then\r\n    -- If enter is pressed: remove last newline and force finish\r\n    if not finishing and input:sub(-1) == '\\n' then\r\n      finishing = true\r\n      -- Delay to avoid user's Enter keypress being detected (opens chat box)\r\n      Wait.frames(function()\r\n        input = input:sub(1, -2)\r\n        data.text = input\r\n        updateState()\r\n        if input ~= '' then staticMode(color) else inputMode() end\r\n        finishing = false\r\n      end, 10)\r\n    end\r\n  end\r\nend\r\n\r\n-- When the inpupt box appears and lets the player type in it.\r\nfunction inputMode()\r\n  self.clearContextMenu()\r\n  self.clearInputs()\r\n  self.clearButtons()\r\n\r\n  local size = getBox(data.text, true)\r\n\r\n  self.createInput({\r\n    input_function = \"input_func\",\r\n    function_owner = self,\r\n    label          = \"Type Here\",\r\n    alignment      = 3,\r\n    position       = {x=0, y=data.hover_height, z=0},\r\n    rotation       = {0, 180, 0},\r\n    width          = size.width,\r\n    height         = size.height,\r\n    color          = getBackground(data.color),\r\n    font_color     = data.color,\r\n    font_size      = data.size,\r\n    value          = data.text,\r\n  })\r\n\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\nend\r\n\r\n-- When the input box disappears and displays the text.\r\nfunction staticMode(player)\r\n  self.clearContextMenu()\r\n  if data.autolock then\r\n    self.locked = true\r\n  end\r\n  if self.getInputs() and #self.getInputs() ~= 0 then\r\n    self.removeInput(0)\r\n  end\r\n\r\n  -- Clear from selecting player\r\n  if player then\r\n    self.removeFromPlayerSelection(player)\r\n  end\r\n\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  self.createButton({\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=self,\r\n    position={0,data.hover_height,0}, rotation={0,180,0}, height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  })\r\n\r\n  self.addContextMenuItem('Edit Text', function(color)\r\n    self.removeFromPlayerSelection(color)\r\n    inputMode()\r\n  end)\r\n  self.addContextMenuItem('Clear', function(color)\r\n    applyMultiple(color, 'clear', _, true)\r\n  end)\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\n  self.addContextMenuItem('Permanently Attach', attemptAttach)\r\n  self.addContextMenuItem('Permalock', function(color)\r\n    applyMultiple(color, 'permalock', _, true)\r\n  end)\r\nend\r\n\r\nfunction changeSize(params)\r\n  local delta = params[1]\r\n  local newSize = data.size + delta\r\n  if newSize > 800  or newSize < 50 then\r\n    return\r\n  end\r\n  data.size = newSize\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_size=data.size})\r\n  else\r\n    local size = getBox(data.text, true)\r\n    self.editInput({width=size.width, height=size.height, font_size=data.size})\r\n  end\r\nend\r\n\r\nfunction setColor(params)\r\n  if params and params[1] then\r\n    data.color = params[1]\r\n  else\r\n    data.color = self.getColorTint():setAt('a', 1) -- Take on color of object tint\r\n  end\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_color=data.color})\r\n  else\r\n    self.editInput({font_color=data.color, color=getBackground(data.color)})\r\n  end\r\nend\r\n\r\nfunction getBackground(color) --determines whether to use black or white depending on luminance\r\n  local r,g,b = Color(color):get()\r\n\r\n  local lum = 0.2126*r + 0.7152*g + 0.0722*b\r\n  if lum > 0.75 then\r\n    return {0.2,0.2,0.2, data.box_transparency}\r\n  else\r\n    return {1,1,1, data.box_transparency}\r\n  end\r\nend\r\n\r\nfunction clear()\r\n  data.text = ''\r\n  updateState()\r\n  inputMode()\r\nend\r\n\r\nfunction permalock()\r\n  self.interactable = false\r\n  data.interactable = false\r\n  updateState()\r\nend\r\n\r\nlocal target_script = [[\r\nfunction onLoad(script_state)\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    for _,entry in ipairs(state) do\r\n      self.createButton(entry)\r\n    end\r\n    self.addContextMenuItem('Clear All Text', function(color)\r\n      self.clearContextMenu()\r\n      self.clearButtons()\r\n      self.script_state = ''\r\n      self.script_code = ''\r\n    end)\r\n  end\r\nend\r\n]]\r\n\r\nfunction attemptAttach(player_color)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  local attachee\r\n  local attachers = {}\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if obj ~= self then\r\n        table.insert(attachers, obj)\r\n      end\r\n    else\r\n      if attachee then\r\n        broadcastToColor(\"More than one target selected.\", player_color)\r\n        return\r\n      else\r\n        attachee = obj\r\n      end\r\n    end\r\n  end\r\n  if attachee then\r\n    local code = attachee.script_code\r\n    if code and code ~= '' and code ~= target_script then\r\n      broadcastToColor(\"Warning: script on card has been overriden. Rewind time to undo.\", player_color)\r\n    end\r\n    for i,attacher in ipairs(attachers) do\r\n      attacher.call('attach', {target = attachee})\r\n    end\r\n    attach({target = attachee})\r\n    local type, flip = attachee.type, attachee.getRotation().z\r\n    if (type == 'Card' or type == 'Deck') and flip > 175 and flip < 185 then\r\n      broadcastToColor(\"Warning: text will not display if card or deck is facing down.\", player_color)\r\n    end\r\n  else\r\n    broadcastToColor(\"You must have a target object in your selection (using click-and-drag or Ctrl+Click) to use this option.\", player_color)\r\n  end\r\nend\r\n\r\nfunction attach(params)\r\n  local target = params.target\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  local textRotation = self.getRotation():sub(target.getRotation())\r\n    :add(Vector(180, 0, 180))\r\n\r\n  local textPosition = target.positionToLocal(\r\n    self.getPosition():add(Vector(0, data.hover_height, 0))\r\n  )\r\n  textPosition.x = -textPosition.x\r\n\r\n  local textScale = {}\r\n  textScale.x = self.getScale().x / target.getScale().x\r\n  textScale.y = self.getScale().x / target.getScale().y\r\n  textScale.z = self.getScale().x / target.getScale().z\r\n\r\n  local details = {\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=nil,\r\n    position=textPosition,\r\n    rotation=textRotation,\r\n    scale=textScale,\r\n    height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  }\r\n\r\n  target.createButton(details)\r\n\r\n  local script_state = target.script_state\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    table.insert(state, details)\r\n    target.script_state = JSON.encode(state)\r\n  else\r\n    target.script_state = JSON.encode({[1]=details})\r\n  end\r\n\r\n  target.script_code = target_script\r\n\r\n  self.destruct()\r\nend\r\n\r\nfunction applyMultiple(player_color, func_string, params, static_only)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if not static_only or obj.call('isStatic') then\r\n        obj.call(func_string, params)\r\n      end\r\n    end\r\n  end\r\nend\r\n\r\nfunction isStatic()\r\n  local input = self.getInputs()\r\n  return not input or #input == 0\r\nend\r\n\r\nfunction getBox(input, force)\r\n  local maxLength, lineCount = EXPAND_INTERVAL, 1\r\n  local lineLength = 0\r\n  for i = 1, #input do\r\n    local c = input:sub(i,i)\r\n    if c == '\\n' then\r\n      lineCount = lineCount + 1\r\n      if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n      lineLength = 0\r\n    else\r\n      lineLength = lineLength + 1\r\n    end\r\n  end\r\n  if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n\r\n  newWidth = data.size * maxLength * 0.9\r\n  newHeight = data.size * lineCount + 23\r\n\r\n  if force or boxWidth ~= newWidth or boxHeight ~= newHeight then\r\n    boxWidth, boxHeight = newWidth, newHeight\r\n    return {width = boxWidth, height = boxHeight}\r\n  end\r\n  return nil\r\nend\r\n\r\ntemp_lift = nil\r\nfunction onPickUp(player_color)\r\n  if data.autolift then\r\n    local player = Player[player_color]\r\n    temp_lift = player.lift_height\r\n    player.lift_height = 0\r\n  end\r\nend\r\n\r\nfunction onDrop(player_color)\r\n  if data.autolift and temp_lift then\r\n    Player[player_color].lift_height = temp_lift\r\n  end\r\nend\r\n\r\n-- Should be called every time data is modified, allows info to be saved on copy/paste\r\nfunction updateState()\r\n  self.script_state = JSON.encode(data)\r\nend\r\n\r\nfunction onSave()\r\n  self.script_state = JSON.encode(data)\r\n  return self.script_state\r\nend",
                  "LuaScriptState": "{\"autolift\":false,\"autolock\":false,\"box_transparency\":1,\"color\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1},\"enter_to_finish\":false,\"hover_height\":0.05,\"interactable\":true,\"size\":350,\"text\":\"Passé\"}",
                  "XmlUI": ""
                },
                {
                  "GUID": "f9e05e",
                  "Name": "Custom_Model_Bag",
                  "Transform": {
                    "posX": -29.0,
                    "posY": 1.77,
                    "posZ": 17.0,
                    "rotX": -5.12494171E-06,
                    "rotY": 179.999481,
                    "rotZ": 3.67408262E-07,
                    "scaleX": 1.0,
                    "scaleY": 0.562042058,
                    "scaleZ": 1.0
                  },
                  "Nickname": "Machinations",
                  "Description": "",
                  "GMNotes": "",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 1.0,
                    "g": 1.0,
                    "b": 1.0
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": true,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": true,
                  "Tooltip": true,
                  "GridProjection": false,
                  "HideWhenFaceDown": false,
                  "Hands": false,
                  "MaterialIndex": -1,
                  "MeshIndex": -1,
                  "CustomMesh": {
                    "MeshURL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/advboxes/tuckbox_h_MSH.obj",
                    "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/1983303656990210870/D2994AC54A968C74968E19B4F03195BC3664AEE5/",
                    "NormalURL": "",
                    "ColliderURL": "",
                    "Convex": true,
                    "MaterialIndex": 3,
                    "TypeIndex": 6,
                    "CustomShader": {
                      "SpecularColor": {
                        "r": 1.0,
                        "g": 1.0,
                        "b": 1.0
                      },
                      "SpecularIntensity": 0.0,
                      "SpecularSharpness": 2.0,
                      "FresnelStrength": 0.0
                    },
                    "CastShadows": true
                  },
                  "Bag": {
                    "Order": 2
                  },
                  "LuaScript": "",
                  "LuaScriptState": "",
                  "XmlUI": "",
                  "ContainedObjects": [
                    {
                      "GUID": "c68b2a",
                      "Name": "Custom_Model_Bag",
                      "Transform": {
                        "posX": -29.0,
                        "posY": 2.41591763,
                        "posZ": 16.5,
                        "rotX": 0.000272534147,
                        "rotY": 179.9971,
                        "rotZ": -0.000423764141,
                        "scaleX": 0.7,
                        "scaleY": 0.7,
                        "scaleZ": 0.7
                      },
                      "Nickname": "Une Alliance Improbable",
                      "Description": "Machination",
                      "GMNotes": "",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 1.0,
                        "g": 1.0,
                        "b": 1.0
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": true,
                      "GridProjection": false,
                      "HideWhenFaceDown": false,
                      "Hands": true,
                      "MaterialIndex": -1,
                      "MeshIndex": -1,
                      "CustomMesh": {
                        "MeshURL": "https://pastebin.com/raw/ALrYhQGb",
                        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/5077277234366558480/31140655872853ACBC44735F25B0EE7E19C72536/",
                        "NormalURL": "",
                        "ColliderURL": "",
                        "Convex": true,
                        "MaterialIndex": 3,
                        "TypeIndex": 6,
                        "CustomShader": {
                          "SpecularColor": {
                            "r": 1.0,
                            "g": 1.0,
                            "b": 1.0
                          },
                          "SpecularIntensity": 0.0,
                          "SpecularSharpness": 2.0,
                          "FresnelStrength": 0.0
                        },
                        "CastShadows": true
                      },
                      "Bag": {
                        "Order": 0
                      },
                      "LuaScript": "-- Utility memory bag by Directsun\r\n-- Version 2.7.0\r\n-- Fork of Memory Bag 2.0 by MrStump\r\n--\r\n-- Want to contribute? Create an issue or fork the code on GitHub and submit a pull request:\r\n-- https://github.com/sunflowermans/TTS-UtilityMemoryBag\r\n\r\n\r\nfunction updateSave()\r\n    local data_to_save = {[\"ml\"]=memoryList}\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n        -- memoryList[guid].rot.x = movedRotation.x\r\n        -- memoryList[guid].rot.y = movedRotation.y\r\n        -- memoryList[guid].rot.z = movedRotation.z\r\n    end\r\n\r\n    --theList[obj.getGUID()] = {\r\n    --    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n    --    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n    --    lock=obj.getLock()\r\n    --}\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n\r\n--Beginning Setup\r\n\r\n\r\n--Make setup button\r\nfunction createSetupButton()\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", {0.75, 0.75, 1})\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\n    -- return getAllObjects()\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1 * 1/self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor +2\r\n            objPos.z = objPos.z * globalScaleFactor\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = {0.75,0.25,0.25,0.6}\r\n            local colorMove = {0,0,1,0.6}\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function=funcName, function_owner=self,\r\n                position=objPos, rotation=rot, height=1000, width=1000,\r\n                color=color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n--Creates submit and cancel buttons\r\nfunction createSetupActionButtons(move)\r\n    self.createButton({\r\n       label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n       position={-1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n       font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    self.createButton({\r\n      label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n      position={-1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n      font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    if move == false then\r\n      self.createButton({\r\n          label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n          position={1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n          font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\r\n        })\r\n\r\n        self.createButton({\r\n            label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n            position={-1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n            font_size=250, color={0,0,0}, font_color={1,1,1}\r\n        })\r\n\r\n        if fresh == false then\r\n            self.createButton({\r\n                label=\"Mise à Jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                position={1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=180, color={0,0,0}, font_color={0.75,0.75,1}\r\n            })\r\n            self.createButton({\r\n                label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                position={1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\r\n            })\r\n        end\r\n    end\r\n\r\n    self.createButton({\r\n        label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n        position={0,0.3,-2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n\r\n--During Setup\r\n\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = {0,0,1,0.6}\r\n    local color = {0,1,0,0.6}\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({index=previousIndex, color=colorMove})\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({index=index, color=color})\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n            lock=obj.getLock(),\r\n            tint=obj.getColorTint()\r\n        }\r\n        obj.highlightOn({0,1,0})\r\n    else\r\n        color = {0.75,0.25,0.25,0.6}\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({index=index, color=color})\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({index=index, color={0,1,0,0.6}})\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n                    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n                    lock=obj.getLock(),\r\n                    tint=obj.getColorTint()\r\n                }\r\n                obj.highlightOn({0,1,0})\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = {0.75,0.25,0.25,0.6}\r\n                self.editButton({index=index, color=color})\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", {1,1,1})\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", {1, 0.25, 0.25})\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", {0.75, 0.75, 1})\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", {0.75, 0.25, 0.25})\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k,v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", {0.25, 0.75, 0.25})\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", {1.0, 0.25, 0.25})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Removed\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", {0.75, 0.75, 1})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\n\r\n--After Setup\r\n\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={0,0.3,2.8}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={2,0.3,0}, rotation={0,90,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---  \r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    local bagObjList = self.getObjects()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid=guid, position=entry.pos, rotation=entry.rot, smooth=false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n\r\n--Utility functions\r\n\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x-p1.x)\r\n    deltaPos.y = (p2.y-p1.y) + yOffset\r\n    deltaPos.z = (p2.z-p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10^(dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample:\r\n{'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'}\r\n--]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend",
                      "LuaScriptState": "{\"ml\":{\"107b72\":{\"lock\":false,\"pos\":{\"x\":35,\"y\":1.55608379840851,\"z\":-8.50010108947754},\"rot\":{\"x\":0.0910777822136879,\"y\":180.003753662109,\"z\":0.0010423450730741},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"6977b1\":{\"lock\":false,\"pos\":{\"x\":-2.50006222724915,\"y\":1.51841580867767,\"z\":6.99999380111694},\"rot\":{\"x\":0.011046995408833,\"y\":179.996154785156,\"z\":180.005996704102},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"7582c3\":{\"lock\":false,\"pos\":{\"x\":-2.50000309944153,\"y\":1.52071189880371,\"z\":19.0000019073486},\"rot\":{\"x\":0.0108909932896495,\"y\":180.006439208984,\"z\":0.00494947331026196},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"b3a4dc\":{\"lock\":false,\"pos\":{\"x\":24.4999923706055,\"y\":1.5183801651001,\"z\":19.0000228881836},\"rot\":{\"x\":0.0108918743208051,\"y\":179.994567871094,\"z\":0.00494730891659856},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e86ec6\":{\"lock\":false,\"pos\":{\"x\":-2.49992513656616,\"y\":1.58198308944702,\"z\":7.00001811981201},\"rot\":{\"x\":0.0107108457013965,\"y\":179.998245239258,\"z\":0.00625511631369591},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}}}}",
                      "XmlUI": "",
                      "ContainedObjects": [
                        {
                          "GUID": "107b72",
                          "Name": "Card",
                          "Transform": {
                            "posX": -13.999999,
                            "posY": 1.52132487,
                            "posZ": 17.0000057,
                            "rotX": 0.0108914664,
                            "rotY": 180.000626,
                            "rotZ": 0.004948323,
                            "scaleX": 1.0,
                            "scaleY": 1.0,
                            "scaleZ": 1.0
                          },
                          "Nickname": "Une Alliance Improbable",
                          "Description": "Machination",
                          "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87035\",\n  \"traits\": \"Machination.\",\n  \"type\": \"Story\",\n  \"victory\": 1\n}",
                          "AltLookAngle": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0
                          },
                          "ColorDiffuse": {
                            "r": 0.713235259,
                            "g": 0.713235259,
                            "b": 0.713235259
                          },
                          "LayoutGroupSortIndex": 0,
                          "Value": 0,
                          "Locked": false,
                          "Grid": true,
                          "Snap": true,
                          "IgnoreFoW": false,
                          "MeasureMovement": false,
                          "DragSelectable": true,
                          "Autoraise": true,
                          "Sticky": true,
                          "Tooltip": true,
                          "GridProjection": false,
                          "HideWhenFaceDown": true,
                          "Hands": true,
                          "CardID": 1104905,
                          "SidewaysCard": false,
                          "CustomDeck": {
                            "11049": {
                              "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                              "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                              "NumWidth": 10,
                              "NumHeight": 7,
                              "BackIsHidden": true,
                              "UniqueBack": true,
                              "Type": 0
                            }
                          },
                          "LuaScript": "",
                          "LuaScriptState": "",
                          "XmlUI": ""
                        },
                        {
                          "GUID": "6977b1",
                          "Name": "Card",
                          "Transform": {
                            "posX": -21.4999714,
                            "posY": 1.7930392,
                            "posZ": 11.5000486,
                            "rotX": 0.000226014643,
                            "rotY": 179.994751,
                            "rotZ": 179.22966,
                            "scaleX": 1.0,
                            "scaleY": 1.0,
                            "scaleZ": 1.0
                          },
                          "Nickname": "",
                          "Description": "",
                          "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"87037a\",\n  \"sanity\": 2,\n  \"traits\": \"Scientist. Ally.\",\n  \"type\": \"Asset\"\n}",
                          "AltLookAngle": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0
                          },
                          "ColorDiffuse": {
                            "r": 0.713235259,
                            "g": 0.713235259,
                            "b": 0.713235259
                          },
                          "LayoutGroupSortIndex": 0,
                          "Value": 0,
                          "Locked": false,
                          "Grid": true,
                          "Snap": true,
                          "IgnoreFoW": false,
                          "MeasureMovement": false,
                          "DragSelectable": true,
                          "Autoraise": true,
                          "Sticky": true,
                          "Tooltip": true,
                          "GridProjection": false,
                          "HideWhenFaceDown": true,
                          "Hands": true,
                          "CardID": 1105127,
                          "SidewaysCard": false,
                          "CustomDeck": {
                            "11051": {
                              "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                              "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                              "NumWidth": 10,
                              "NumHeight": 7,
                              "BackIsHidden": true,
                              "UniqueBack": true,
                              "Type": 0
                            }
                          },
                          "LuaScript": "",
                          "LuaScriptState": "",
                          "XmlUI": ""
                        },
                        {
                          "GUID": "7582c3",
                          "Name": "Card",
                          "Transform": {
                            "posX": -18.4999847,
                            "posY": 1.77890491,
                            "posZ": 18.0000038,
                            "rotX": -4.96384973E-06,
                            "rotY": 180.006485,
                            "rotZ": -2.88101827E-08,
                            "scaleX": 1.0,
                            "scaleY": 1.0,
                            "scaleZ": 1.0
                          },
                          "Nickname": "",
                          "Description": "",
                          "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"87013\",\n  \"sanity\": 2,\n  \"traits\": \"Scientist. Ally. Past.\",\n  \"type\": \"Asset\"\n}",
                          "AltLookAngle": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0
                          },
                          "ColorDiffuse": {
                            "r": 0.713235259,
                            "g": 0.713235259,
                            "b": 0.713235259
                          },
                          "LayoutGroupSortIndex": 0,
                          "Value": 0,
                          "Locked": false,
                          "Grid": true,
                          "Snap": true,
                          "IgnoreFoW": false,
                          "MeasureMovement": false,
                          "DragSelectable": true,
                          "Autoraise": true,
                          "Sticky": true,
                          "Tooltip": true,
                          "GridProjection": false,
                          "HideWhenFaceDown": true,
                          "Hands": true,
                          "CardID": 1110643,
                          "SidewaysCard": false,
                          "CustomDeck": {
                            "11106": {
                              "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                              "NumWidth": 10,
                              "NumHeight": 7,
                              "BackIsHidden": true,
                              "UniqueBack": false,
                              "Type": 0
                            }
                          },
                          "LuaScript": "",
                          "LuaScriptState": "",
                          "XmlUI": ""
                        },
                        {
                          "GUID": "b3a4dc",
                          "Name": "Card",
                          "Transform": {
                            "posX": -19.5,
                            "posY": 1.77890539,
                            "posZ": 13.9999828,
                            "rotX": -4.772614E-06,
                            "rotY": 179.99472,
                            "rotZ": 1.44712158E-06,
                            "scaleX": 1.0,
                            "scaleY": 1.0,
                            "scaleZ": 1.0
                          },
                          "Nickname": "",
                          "Description": "",
                          "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"87012\",\n  \"sanity\": 2,\n  \"traits\": \"Scientist. Ally. Past.\",\n  \"type\": \"Asset\"\n}",
                          "AltLookAngle": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0
                          },
                          "ColorDiffuse": {
                            "r": 0.713235259,
                            "g": 0.713235259,
                            "b": 0.713235259
                          },
                          "LayoutGroupSortIndex": 0,
                          "Value": 0,
                          "Locked": false,
                          "Grid": true,
                          "Snap": true,
                          "IgnoreFoW": false,
                          "MeasureMovement": false,
                          "DragSelectable": true,
                          "Autoraise": true,
                          "Sticky": true,
                          "Tooltip": true,
                          "GridProjection": false,
                          "HideWhenFaceDown": true,
                          "Hands": true,
                          "CardID": 1110642,
                          "SidewaysCard": false,
                          "CustomDeck": {
                            "11106": {
                              "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                              "NumWidth": 10,
                              "NumHeight": 7,
                              "BackIsHidden": true,
                              "UniqueBack": false,
                              "Type": 0
                            }
                          },
                          "LuaScript": "",
                          "LuaScriptState": "",
                          "XmlUI": ""
                        },
                        {
                          "GUID": "e86ec6",
                          "Name": "Custom_Token",
                          "Transform": {
                            "posX": -21.0000687,
                            "posY": 1.81530035,
                            "posZ": 16.5001,
                            "rotX": -7.51438256E-06,
                            "rotY": 179.999084,
                            "rotZ": -4.94913256E-05,
                            "scaleX": 0.3,
                            "scaleY": 1.0,
                            "scaleZ": 0.3
                          },
                          "Nickname": "Resources",
                          "Description": "Left click - Increase\nRight click - Decrease",
                          "GMNotes": "",
                          "AltLookAngle": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0
                          },
                          "ColorDiffuse": {
                            "r": 1.0,
                            "g": 1.0,
                            "b": 1.0
                          },
                          "LayoutGroupSortIndex": 0,
                          "Value": 0,
                          "Locked": false,
                          "Grid": true,
                          "Snap": true,
                          "IgnoreFoW": false,
                          "MeasureMovement": false,
                          "DragSelectable": true,
                          "Autoraise": true,
                          "Sticky": true,
                          "Tooltip": false,
                          "GridProjection": false,
                          "HideWhenFaceDown": false,
                          "Hands": false,
                          "CustomImage": {
                            "ImageURL": "https://steamusercontent-a.akamaihd.net/ugc/784129913444610342/7903BA89870C1656A003FD69C79BFA99BD1AAC24/",
                            "ImageSecondaryURL": "",
                            "ImageScalar": 1.0,
                            "WidthScale": 0.0,
                            "CustomToken": {
                              "Thickness": 0.1,
                              "MergeDistancePixels": 5.0,
                              "StandUp": false,
                              "Stackable": false
                            }
                          },
                          "LuaScript": "MIN_VALUE = -99\r\nMAX_VALUE = 999\r\n\r\nfunction onload(saved_data)\r\n    light_mode = true\r\n    val = 0\r\n\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        light_mode = loaded_data[1]\r\n        val = loaded_data[2]\r\n    end\r\n\r\n    createAll()\r\nend\r\n\r\nfunction updateSave()\r\n    local data_to_save = {light_mode, val}\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction createAll()\r\n    s_color = {0,0,0,100}\r\n\n    if light_mode then\r\n        f_color = {1,1,1,100}\r\n    else\r\n        f_color = {0,0,0,100}\r\n    end\r\n\r\n\r\n\r\n    self.createButton({\r\n      label=tostring(val),\r\n      click_function=\"add_subtract\",\r\n      function_owner=self,\r\n      position={0,0.05,0.1},\r\n      height=600,\r\n      width=1000,\r\n      alignment = 3,\r\n      scale={x=1.5, y=1.5, z=1.5},\r\n      font_size=600,\r\n      font_color=f_color,\r\n      color={1,1,1,0}\r\n      })\r\n\r\n\r\n\r\n\r\n    if light_mode then\r\n        lightButtonText = \"[ Set dark ]\"\r\n    else\r\n        lightButtonText = \"[ Set light ]\"\r\n    end\r\n \r\nend\r\n\r\nfunction removeAll()\r\n    self.removeInput(0)\r\n    self.removeInput(1)\r\n    self.removeButton(0)\r\n    self.removeButton(1)\r\n    self.removeButton(2)\r\nend\r\n\r\nfunction reloadAll()\r\n    removeAll()\r\n    createAll()\r\n\r\n    updateSave()\r\nend\r\n\r\nfunction swap_fcolor(_obj, _color, alt_click)\r\n    light_mode = not light_mode\r\n    reloadAll()\r\nend\r\n\r\nfunction swap_align(_obj, _color, alt_click)\r\n    center_mode = not center_mode\r\n    reloadAll()\r\nend\r\n\r\nfunction editName(_obj, _string, value) \r\n    self.setName(value)\r\n    setTooltips()\r\nend\r\n\r\nfunction add_subtract(_obj, _color, alt_click)\r\n    mod = alt_click and -1 or 1\r\n    new_value = math.min(math.max(val + mod, MIN_VALUE), MAX_VALUE)\r\n    if val ~= new_value then\r\n        val = new_value\r\n      updateVal()\r\n        updateSave()\r\n    end\r\nend\r\n\r\nfunction updateVal()\r\n\r\n    self.editButton({\r\n        index = 0,\r\n        label = tostring(val),\r\n\r\n        })\r\nend\r\n\r\nfunction reset_val()\r\n    val = 0\r\n    updateVal()\r\n    updateSave()\r\nend\r\n\r\nfunction setTooltips()\r\n    self.editInput({\r\n        index = 0,\r\n        value = self.getName(),\r\n        tooltip = ttText\r\n        })\r\n    self.editButton({\r\n        index = 0,\r\n        value = tostring(val),\r\n        tooltip = ttText\r\n        })\r\nend\r\n\r\nfunction null()\r\nend\r\n\r\nfunction keepSample(_obj, _string, value) \r\n    reloadAll()\r\nend",
                          "LuaScriptState": "[true,0]",
                          "XmlUI": ""
                        }
                      ]
                    },
                    {
                      "GUID": "7f5aa5",
                      "Name": "Custom_Model_Bag",
                      "Transform": {
                        "posX": -30.0,
                        "posY": 2.415906,
                        "posZ": 17.0,
                        "rotX": -0.0003013242,
                        "rotY": 179.984543,
                        "rotZ": -0.001893455,
                        "scaleX": 0.7,
                        "scaleY": 0.7,
                        "scaleZ": 0.7
                      },
                      "Nickname": "Rédemption d'un Ancien Collègue",
                      "Description": "Machination",
                      "GMNotes": "",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 1.0,
                        "g": 1.0,
                        "b": 1.0
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": true,
                      "GridProjection": false,
                      "HideWhenFaceDown": false,
                      "Hands": false,
                      "MaterialIndex": -1,
                      "MeshIndex": -1,
                      "CustomMesh": {
                        "MeshURL": "https://pastebin.com/raw/ALrYhQGb",
                        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/5077277234366558480/31140655872853ACBC44735F25B0EE7E19C72536/",
                        "NormalURL": "",
                        "ColliderURL": "",
                        "Convex": true,
                        "MaterialIndex": 3,
                        "TypeIndex": 6,
                        "CustomShader": {
                          "SpecularColor": {
                            "r": 1.0,
                            "g": 1.0,
                            "b": 1.0
                          },
                          "SpecularIntensity": 0.0,
                          "SpecularSharpness": 2.0,
                          "FresnelStrength": 0.0
                        },
                        "CastShadows": true
                      },
                      "Bag": {
                        "Order": 0
                      },
                      "LuaScript": "-- Utility memory bag by Directsun\r\n-- Version 2.7.0\r\n-- Fork of Memory Bag 2.0 by MrStump\r\n--\r\n-- Want to contribute? Create an issue or fork the code on GitHub and submit a pull request:\r\n-- https://github.com/sunflowermans/TTS-UtilityMemoryBag\r\n\r\n\r\nfunction updateSave()\r\n    local data_to_save = {[\"ml\"]=memoryList}\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n        -- memoryList[guid].rot.x = movedRotation.x\r\n        -- memoryList[guid].rot.y = movedRotation.y\r\n        -- memoryList[guid].rot.z = movedRotation.z\r\n    end\r\n\r\n    --theList[obj.getGUID()] = {\r\n    --    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n    --    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n    --    lock=obj.getLock()\r\n    --}\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n\r\n--Beginning Setup\r\n\r\n\r\n--Make setup button\r\nfunction createSetupButton()\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", {0.75, 0.75, 1})\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\n    -- return getAllObjects()\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1 * 1/self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor +2\r\n            objPos.z = objPos.z * globalScaleFactor\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = {0.75,0.25,0.25,0.6}\r\n            local colorMove = {0,0,1,0.6}\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function=funcName, function_owner=self,\r\n                position=objPos, rotation=rot, height=1000, width=1000,\r\n                color=color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n--Creates submit and cancel buttons\r\nfunction createSetupActionButtons(move)\r\n    self.createButton({\r\n       label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n       position={-1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n       font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    self.createButton({\r\n      label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n      position={-1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n      font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    if move == false then\r\n      self.createButton({\r\n          label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n          position={1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n          font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\r\n        })\r\n\r\n        self.createButton({\r\n            label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n            position={-1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n            font_size=250, color={0,0,0}, font_color={1,1,1}\r\n        })\r\n\r\n        if fresh == false then\r\n            self.createButton({\r\n                label=\"Mise à Jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                position={1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=180, color={0,0,0}, font_color={0.75,0.75,1}\r\n            })\r\n            self.createButton({\r\n                label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                position={1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\r\n            })\r\n        end\r\n    end\r\n\r\n    self.createButton({\r\n        label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n        position={0,0.3,-2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n\r\n--During Setup\r\n\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = {0,0,1,0.6}\r\n    local color = {0,1,0,0.6}\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({index=previousIndex, color=colorMove})\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({index=index, color=color})\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n            lock=obj.getLock(),\r\n            tint=obj.getColorTint()\r\n        }\r\n        obj.highlightOn({0,1,0})\r\n    else\r\n        color = {0.75,0.25,0.25,0.6}\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({index=index, color=color})\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({index=index, color={0,1,0,0.6}})\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n                    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n                    lock=obj.getLock(),\r\n                    tint=obj.getColorTint()\r\n                }\r\n                obj.highlightOn({0,1,0})\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = {0.75,0.25,0.25,0.6}\r\n                self.editButton({index=index, color=color})\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", {1,1,1})\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", {1, 0.25, 0.25})\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", {0.75, 0.75, 1})\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", {0.75, 0.25, 0.25})\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k,v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", {0.25, 0.75, 0.25})\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", {1.0, 0.25, 0.25})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Removed\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", {0.75, 0.75, 1})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\n\r\n--After Setup\r\n\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={0,0.3,2.8}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={2,0.3,0}, rotation={0,90,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---  \r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    local bagObjList = self.getObjects()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid=guid, position=entry.pos, rotation=entry.rot, smooth=false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n\r\n--Utility functions\r\n\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x-p1.x)\r\n    deltaPos.y = (p2.y-p1.y) + yOffset\r\n    deltaPos.z = (p2.z-p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10^(dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample:\r\n{'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'}\r\n--]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend",
                      "LuaScriptState": "{\"ml\":{\"0c337d\":{\"lock\":false,\"pos\":{\"x\":-32.0000495910645,\"y\":1.77890563011169,\"z\":9.99996852874756},\"rot\":{\"x\":-5.03097271575825E-06,\"y\":180.005187988281,\"z\":1.55517838607011E-07},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"1781f2\":{\"lock\":false,\"pos\":{\"x\":-19.5000019073486,\"y\":1.77890598773956,\"z\":5.99999666213989},\"rot\":{\"x\":-4.853244718106E-06,\"y\":180.001358032227,\"z\":2.38415811537607E-08},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"1c93ce\":{\"lock\":false,\"pos\":{\"x\":-32.0000343322754,\"y\":1.77890598773956,\"z\":6.4999737739563},\"rot\":{\"x\":-4.9588966248848E-06,\"y\":180.002639770508,\"z\":-4.84543107859281E-08},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"2be9f1\":{\"lock\":false,\"pos\":{\"x\":-32.0000381469727,\"y\":1.77890622615814,\"z\":2.99996972084045},\"rot\":{\"x\":-4.91087075715768E-06,\"y\":179.97998046875,\"z\":-5.28288488510498E-08},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"43c540\":{\"lock\":false,\"pos\":{\"x\":-34.5000228881836,\"y\":1.77890598773956,\"z\":6.49997329711914},\"rot\":{\"x\":-5.12949145559105E-06,\"y\":179.977264404297,\"z\":-3.63739331987745E-08},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"454d7f\":{\"lock\":false,\"pos\":{\"x\":-34.5000343322754,\"y\":1.77890622615814,\"z\":2.99996519088745},\"rot\":{\"x\":-4.93758670927491E-06,\"y\":179.973602294922,\"z\":2.10661596611317E-07},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"54b058\":{\"lock\":false,\"pos\":{\"x\":24.4999980926514,\"y\":1.5183801651001,\"z\":19.0000038146973},\"rot\":{\"x\":0.0108930412679911,\"y\":179.982406616211,\"z\":0.00494493311271071},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"906c4a\":{\"lock\":false,\"pos\":{\"x\":35,\"y\":1.55608379840851,\"z\":-8.50010013580322},\"rot\":{\"x\":0.0910779610276222,\"y\":180.003524780273,\"z\":0.00104202225338668},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}}}}",
                      "XmlUI": "",
                      "ContainedObjects": [
                        {
                          "GUID": "0c337d",
                          "Name": "Card",
                          "Transform": {
                            "posX": -28.0000267,
                            "posY": 1.77890646,
                            "posZ": 0.999975145,
                            "rotX": -5.02811463E-06,
                            "rotY": 180.005234,
                            "rotZ": 2.24434444E-07,
                            "scaleX": 1.0,
                            "scaleY": 1.0,
                            "scaleZ": 1.0
                          },
                          "Nickname": "",
                          "Description": "",
                          "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"87013\",\n  \"sanity\": 2,\n  \"traits\": \"Scientist. Ally. Past.\",\n  \"type\": \"Asset\"\n}",
                          "AltLookAngle": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0
                          },
                          "ColorDiffuse": {
                            "r": 0.713235259,
                            "g": 0.713235259,
                            "b": 0.713235259
                          },
                          "LayoutGroupSortIndex": 0,
                          "Value": 0,
                          "Locked": false,
                          "Grid": true,
                          "Snap": true,
                          "IgnoreFoW": false,
                          "MeasureMovement": false,
                          "DragSelectable": true,
                          "Autoraise": true,
                          "Sticky": true,
                          "Tooltip": true,
                          "GridProjection": false,
                          "HideWhenFaceDown": true,
                          "Hands": true,
                          "CardID": 1110643,
                          "SidewaysCard": false,
                          "CustomDeck": {
                            "11106": {
                              "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                              "NumWidth": 10,
                              "NumHeight": 7,
                              "BackIsHidden": true,
                              "UniqueBack": false,
                              "Type": 0
                            }
                          },
                          "LuaScript": "",
                          "LuaScriptState": "",
                          "XmlUI": ""
                        },
                        {
                          "GUID": "1781f2",
                          "Name": "Card",
                          "Transform": {
                            "posX": -24.000021,
                            "posY": 1.77890623,
                            "posZ": 2.99998283,
                            "rotX": -5.11967255E-06,
                            "rotY": 180.00145,
                            "rotZ": 1.66568768E-07,
                            "scaleX": 1.0,
                            "scaleY": 1.0,
                            "scaleZ": 1.0
                          },
                          "Nickname": "",
                          "Description": "",
                          "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"87037a\",\n  \"sanity\": 2,\n  \"traits\": \"Scientist. Ally.\",\n  \"type\": \"Asset\"\n}",
                          "AltLookAngle": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0
                          },
                          "ColorDiffuse": {
                            "r": 0.713235259,
                            "g": 0.713235259,
                            "b": 0.713235259
                          },
                          "LayoutGroupSortIndex": 0,
                          "Value": 0,
                          "Locked": false,
                          "Grid": true,
                          "Snap": true,
                          "IgnoreFoW": false,
                          "MeasureMovement": false,
                          "DragSelectable": true,
                          "Autoraise": true,
                          "Sticky": true,
                          "Tooltip": true,
                          "GridProjection": false,
                          "HideWhenFaceDown": true,
                          "Hands": true,
                          "CardID": 1105127,
                          "SidewaysCard": false,
                          "CustomDeck": {
                            "11051": {
                              "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                              "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                              "NumWidth": 10,
                              "NumHeight": 7,
                              "BackIsHidden": true,
                              "UniqueBack": true,
                              "Type": 0
                            }
                          },
                          "LuaScript": "",
                          "LuaScriptState": "",
                          "XmlUI": ""
                        },
                        {
                          "GUID": "54b058",
                          "Name": "Card",
                          "Transform": {
                            "posX": -26.4999466,
                            "posY": 1.79264283,
                            "posZ": 4.99994659,
                            "rotX": 0.514140666,
                            "rotY": 179.983688,
                            "rotZ": -0.000171552267,
                            "scaleX": 1.0,
                            "scaleY": 1.0,
                            "scaleZ": 1.0
                          },
                          "Nickname": "",
                          "Description": "",
                          "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"87012\",\n  \"sanity\": 2,\n  \"traits\": \"Scientist. Ally. Past.\",\n  \"type\": \"Asset\"\n}",
                          "AltLookAngle": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0
                          },
                          "ColorDiffuse": {
                            "r": 0.713235259,
                            "g": 0.713235259,
                            "b": 0.713235259
                          },
                          "LayoutGroupSortIndex": 0,
                          "Value": 0,
                          "Locked": false,
                          "Grid": true,
                          "Snap": true,
                          "IgnoreFoW": false,
                          "MeasureMovement": false,
                          "DragSelectable": true,
                          "Autoraise": true,
                          "Sticky": true,
                          "Tooltip": true,
                          "GridProjection": false,
                          "HideWhenFaceDown": true,
                          "Hands": true,
                          "CardID": 1110642,
                          "SidewaysCard": false,
                          "CustomDeck": {
                            "11106": {
                              "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                              "NumWidth": 10,
                              "NumHeight": 7,
                              "BackIsHidden": true,
                              "UniqueBack": false,
                              "Type": 0
                            }
                          },
                          "LuaScript": "",
                          "LuaScriptState": "",
                          "XmlUI": ""
                        },
                        {
                          "GUID": "906c4a",
                          "Name": "Card",
                          "Transform": {
                            "posX": -24.5000038,
                            "posY": 1.77890587,
                            "posZ": 7.999994,
                            "rotX": -5.146343E-06,
                            "rotY": 180.00061,
                            "rotZ": -2.3785995E-07,
                            "scaleX": 1.0,
                            "scaleY": 1.0,
                            "scaleZ": 1.0
                          },
                          "Nickname": "Rédemption d'un Ancien Collègue",
                          "Description": "Machination",
                          "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87034\",\n  \"traits\": \"Machination.\",\n  \"type\": \"Story\",\n  \"victory\": 1\n}",
                          "AltLookAngle": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0
                          },
                          "ColorDiffuse": {
                            "r": 0.713235259,
                            "g": 0.713235259,
                            "b": 0.713235259
                          },
                          "LayoutGroupSortIndex": 0,
                          "Value": 0,
                          "Locked": false,
                          "Grid": true,
                          "Snap": true,
                          "IgnoreFoW": false,
                          "MeasureMovement": false,
                          "DragSelectable": true,
                          "Autoraise": true,
                          "Sticky": true,
                          "Tooltip": true,
                          "GridProjection": false,
                          "HideWhenFaceDown": true,
                          "Hands": true,
                          "CardID": 1104906,
                          "SidewaysCard": false,
                          "CustomDeck": {
                            "11049": {
                              "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                              "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                              "NumWidth": 10,
                              "NumHeight": 7,
                              "BackIsHidden": true,
                              "UniqueBack": true,
                              "Type": 0
                            }
                          },
                          "LuaScript": "",
                          "LuaScriptState": "",
                          "XmlUI": ""
                        }
                      ]
                    },
                    {
                      "GUID": "0c0189",
                      "Name": "Custom_Model_Bag",
                      "Transform": {
                        "posX": -29.5,
                        "posY": 2.4159143,
                        "posZ": 17.5,
                        "rotX": -0.000413323171,
                        "rotY": 179.981964,
                        "rotZ": -0.00019956773,
                        "scaleX": 0.7,
                        "scaleY": 0.7,
                        "scaleZ": 0.7
                      },
                      "Nickname": "Une Âpre Rivalité",
                      "Description": "Machination",
                      "GMNotes": "",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 1.0,
                        "g": 1.0,
                        "b": 1.0
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": true,
                      "GridProjection": false,
                      "HideWhenFaceDown": false,
                      "Hands": false,
                      "MaterialIndex": -1,
                      "MeshIndex": -1,
                      "CustomMesh": {
                        "MeshURL": "https://pastebin.com/raw/ALrYhQGb",
                        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/5077277234366558480/31140655872853ACBC44735F25B0EE7E19C72536/",
                        "NormalURL": "",
                        "ColliderURL": "",
                        "Convex": true,
                        "MaterialIndex": 3,
                        "TypeIndex": 6,
                        "CustomShader": {
                          "SpecularColor": {
                            "r": 1.0,
                            "g": 1.0,
                            "b": 1.0
                          },
                          "SpecularIntensity": 0.0,
                          "SpecularSharpness": 2.0,
                          "FresnelStrength": 0.0
                        },
                        "CastShadows": true
                      },
                      "Bag": {
                        "Order": 0
                      },
                      "LuaScript": "-- Utility memory bag by Directsun\r\n-- Version 2.7.0\r\n-- Fork of Memory Bag 2.0 by MrStump\r\n--\r\n-- Want to contribute? Create an issue or fork the code on GitHub and submit a pull request:\r\n-- https://github.com/sunflowermans/TTS-UtilityMemoryBag\r\n\r\n\r\nfunction updateSave()\r\n    local data_to_save = {[\"ml\"]=memoryList}\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n        -- memoryList[guid].rot.x = movedRotation.x\r\n        -- memoryList[guid].rot.y = movedRotation.y\r\n        -- memoryList[guid].rot.z = movedRotation.z\r\n    end\r\n\r\n    --theList[obj.getGUID()] = {\r\n    --    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n    --    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n    --    lock=obj.getLock()\r\n    --}\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n\r\n--Beginning Setup\r\n\r\n\r\n--Make setup button\r\nfunction createSetupButton()\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", {0.75, 0.75, 1})\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\n    -- return getAllObjects()\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1 * 1/self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor +2\r\n            objPos.z = objPos.z * globalScaleFactor\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = {0.75,0.25,0.25,0.6}\r\n            local colorMove = {0,0,1,0.6}\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function=funcName, function_owner=self,\r\n                position=objPos, rotation=rot, height=1000, width=1000,\r\n                color=color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n--Creates submit and cancel buttons\r\nfunction createSetupActionButtons(move)\r\n    self.createButton({\r\n       label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n       position={-1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n       font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    self.createButton({\r\n      label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n      position={-1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n      font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    if move == false then\r\n      self.createButton({\r\n          label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n          position={1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n          font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\r\n        })\r\n\r\n        self.createButton({\r\n            label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n            position={-1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n            font_size=250, color={0,0,0}, font_color={1,1,1}\r\n        })\r\n\r\n        if fresh == false then\r\n            self.createButton({\r\n                label=\"Mise à Jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                position={1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=180, color={0,0,0}, font_color={0.75,0.75,1}\r\n            })\r\n            self.createButton({\r\n                label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                position={1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\r\n            })\r\n        end\r\n    end\r\n\r\n    self.createButton({\r\n        label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n        position={0,0.3,-2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n\r\n--During Setup\r\n\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = {0,0,1,0.6}\r\n    local color = {0,1,0,0.6}\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({index=previousIndex, color=colorMove})\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({index=index, color=color})\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n            lock=obj.getLock(),\r\n            tint=obj.getColorTint()\r\n        }\r\n        obj.highlightOn({0,1,0})\r\n    else\r\n        color = {0.75,0.25,0.25,0.6}\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({index=index, color=color})\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({index=index, color={0,1,0,0.6}})\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n                    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n                    lock=obj.getLock(),\r\n                    tint=obj.getColorTint()\r\n                }\r\n                obj.highlightOn({0,1,0})\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = {0.75,0.25,0.25,0.6}\r\n                self.editButton({index=index, color=color})\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", {1,1,1})\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", {1, 0.25, 0.25})\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", {0.75, 0.75, 1})\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", {0.75, 0.25, 0.25})\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k,v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", {0.25, 0.75, 0.25})\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", {1.0, 0.25, 0.25})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Removed\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", {0.75, 0.75, 1})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\n\r\n--After Setup\r\n\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={0,0.3,2.8}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={2,0.3,0}, rotation={0,90,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---  \r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    local bagObjList = self.getObjects()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid=guid, position=entry.pos, rotation=entry.rot, smooth=false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n\r\n--Utility functions\r\n\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x-p1.x)\r\n    deltaPos.y = (p2.y-p1.y) + yOffset\r\n    deltaPos.z = (p2.z-p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10^(dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample:\r\n{'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'}\r\n--]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend",
                      "LuaScriptState": "{\"ml\":{\"2582e6\":{\"lock\":false,\"pos\":{\"x\":-2.50000214576721,\"y\":1.51843082904816,\"z\":7.00000333786011},\"rot\":{\"x\":0.0108904987573624,\"y\":180.012573242188,\"z\":0.00495072640478611},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"45fcde\":{\"lock\":false,\"pos\":{\"x\":-34.5000457763672,\"y\":1.77890563011169,\"z\":9.99995708465576},\"rot\":{\"x\":-4.91915398015408E-06,\"y\":179.981597900391,\"z\":-6.63401493739002E-08},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e7eb14\":{\"lock\":false,\"pos\":{\"x\":35,\"y\":1.55608379840851,\"z\":-8.50010013580322},\"rot\":{\"x\":0.0910780429840088,\"y\":180.000946044922,\"z\":0.00103778636548668},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"fbcc01\":{\"lock\":false,\"pos\":{\"x\":-19.5000057220459,\"y\":1.77890598773956,\"z\":5.99999046325684},\"rot\":{\"x\":-5.07203412780655E-06,\"y\":180.000259399414,\"z\":-3.60989602654627E-08},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}}}}",
                      "XmlUI": "",
                      "ContainedObjects": [
                        {
                          "GUID": "2582e6",
                          "Name": "Card",
                          "Transform": {
                            "posX": -2.5000093,
                            "posY": 1.51843083,
                            "posZ": 7.00000334,
                            "rotX": 0.0108904289,
                            "rotY": 180.012619,
                            "rotZ": 0.00495067751,
                            "scaleX": 1.0,
                            "scaleY": 1.0,
                            "scaleZ": 1.0
                          },
                          "Nickname": "",
                          "Description": "",
                          "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"87013\",\n  \"sanity\": 2,\n  \"traits\": \"Scientist. Ally. Past.\",\n  \"type\": \"Asset\"\n}",
                          "AltLookAngle": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0
                          },
                          "ColorDiffuse": {
                            "r": 0.713235259,
                            "g": 0.713235259,
                            "b": 0.713235259
                          },
                          "LayoutGroupSortIndex": 0,
                          "Value": 0,
                          "Locked": false,
                          "Grid": true,
                          "Snap": true,
                          "IgnoreFoW": false,
                          "MeasureMovement": false,
                          "DragSelectable": true,
                          "Autoraise": true,
                          "Sticky": true,
                          "Tooltip": true,
                          "GridProjection": false,
                          "HideWhenFaceDown": true,
                          "Hands": true,
                          "CardID": 1110643,
                          "SidewaysCard": false,
                          "CustomDeck": {
                            "11106": {
                              "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                              "NumWidth": 10,
                              "NumHeight": 7,
                              "BackIsHidden": true,
                              "UniqueBack": false,
                              "Type": 0
                            }
                          },
                          "LuaScript": "",
                          "LuaScriptState": "",
                          "XmlUI": ""
                        },
                        {
                          "GUID": "45fcde",
                          "Name": "Card",
                          "Transform": {
                            "posX": -40.5000343,
                            "posY": 1.513602,
                            "posZ": 10.5000248,
                            "rotX": 3.407909E-06,
                            "rotY": 179.9816,
                            "rotZ": 6.72555052E-06,
                            "scaleX": 1.0,
                            "scaleY": 1.0,
                            "scaleZ": 1.0
                          },
                          "Nickname": "",
                          "Description": "",
                          "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"87012\",\n  \"sanity\": 2,\n  \"traits\": \"Scientist. Ally. Past.\",\n  \"type\": \"Asset\"\n}",
                          "AltLookAngle": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0
                          },
                          "ColorDiffuse": {
                            "r": 0.713235259,
                            "g": 0.713235259,
                            "b": 0.713235259
                          },
                          "LayoutGroupSortIndex": 0,
                          "Value": 0,
                          "Locked": false,
                          "Grid": true,
                          "Snap": true,
                          "IgnoreFoW": false,
                          "MeasureMovement": false,
                          "DragSelectable": true,
                          "Autoraise": true,
                          "Sticky": true,
                          "Tooltip": true,
                          "GridProjection": false,
                          "HideWhenFaceDown": true,
                          "Hands": true,
                          "CardID": 1110642,
                          "SidewaysCard": false,
                          "CustomDeck": {
                            "11106": {
                              "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                              "NumWidth": 10,
                              "NumHeight": 7,
                              "BackIsHidden": true,
                              "UniqueBack": false,
                              "Type": 0
                            }
                          },
                          "LuaScript": "",
                          "LuaScriptState": "",
                          "XmlUI": ""
                        },
                        {
                          "GUID": "e7eb14",
                          "Name": "Card",
                          "Transform": {
                            "posX": 35.0,
                            "posY": 1.55608153,
                            "posZ": -8.5001,
                            "rotX": 0.0913326144,
                            "rotY": 180.000992,
                            "rotZ": 0.000818424334,
                            "scaleX": 1.0,
                            "scaleY": 1.0,
                            "scaleZ": 1.0
                          },
                          "Nickname": "Une Âpre Rivalité",
                          "Description": "Machination",
                          "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87033\",\n  \"type\": \"Story\",\n  \"victory\": 1\n}",
                          "AltLookAngle": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0
                          },
                          "ColorDiffuse": {
                            "r": 0.713235259,
                            "g": 0.713235259,
                            "b": 0.713235259
                          },
                          "LayoutGroupSortIndex": 0,
                          "Value": 0,
                          "Locked": false,
                          "Grid": true,
                          "Snap": true,
                          "IgnoreFoW": false,
                          "MeasureMovement": false,
                          "DragSelectable": true,
                          "Autoraise": true,
                          "Sticky": true,
                          "Tooltip": true,
                          "GridProjection": false,
                          "HideWhenFaceDown": true,
                          "Hands": true,
                          "CardID": 1104907,
                          "SidewaysCard": false,
                          "CustomDeck": {
                            "11049": {
                              "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                              "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                              "NumWidth": 10,
                              "NumHeight": 7,
                              "BackIsHidden": true,
                              "UniqueBack": true,
                              "Type": 0
                            }
                          },
                          "LuaScript": "",
                          "LuaScriptState": "",
                          "XmlUI": ""
                        },
                        {
                          "GUID": "fbcc01",
                          "Name": "Card",
                          "Transform": {
                            "posX": -19.50001,
                            "posY": 1.778906,
                            "posZ": 5.99998426,
                            "rotX": -4.989047E-06,
                            "rotY": 180.000381,
                            "rotZ": -4.27920952E-08,
                            "scaleX": 1.0,
                            "scaleY": 1.0,
                            "scaleZ": 1.0
                          },
                          "Nickname": "",
                          "Description": "",
                          "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"87037a\",\n  \"sanity\": 2,\n  \"traits\": \"Scientist. Ally.\",\n  \"type\": \"Asset\"\n}",
                          "AltLookAngle": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0
                          },
                          "ColorDiffuse": {
                            "r": 0.713235259,
                            "g": 0.713235259,
                            "b": 0.713235259
                          },
                          "LayoutGroupSortIndex": 0,
                          "Value": 0,
                          "Locked": false,
                          "Grid": true,
                          "Snap": true,
                          "IgnoreFoW": false,
                          "MeasureMovement": false,
                          "DragSelectable": true,
                          "Autoraise": true,
                          "Sticky": true,
                          "Tooltip": true,
                          "GridProjection": false,
                          "HideWhenFaceDown": true,
                          "Hands": true,
                          "CardID": 1105127,
                          "SidewaysCard": false,
                          "CustomDeck": {
                            "11051": {
                              "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                              "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                              "NumWidth": 10,
                              "NumHeight": 7,
                              "BackIsHidden": true,
                              "UniqueBack": true,
                              "Type": 0
                            }
                          },
                          "LuaScript": "",
                          "LuaScriptState": "",
                          "XmlUI": ""
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "GUID": "cade6c",
              "Name": "Card",
              "Transform": {
                "posX": 5.500197,
                "posY": 1.50888085,
                "posZ": 13.0000086,
                "rotX": 0.0108920792,
                "rotY": 179.994553,
                "rotZ": 180.004959,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "Description": "",
              "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87005a\",\n  \"locationBack\": {\n    \"connections\": \"Portal\",\n    \"icons\": \"Tindalos\"\n  },\n  \"locationFront\": {\n    \"connections\": \"Portal\",\n    \"icons\": \"Tindalos\"\n  },\n  \"traits\": \"Past. Present. Future.\",\n  \"type\": \"Location\"\n}",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 0.713235259,
                "g": 0.713235259,
                "b": 0.713235259
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": true,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": true,
              "Tooltip": true,
              "GridProjection": false,
              "HideWhenFaceDown": true,
              "Hands": true,
              "CardID": 1105114,
              "SidewaysCard": false,
              "CustomDeck": {
                "11051": {
                  "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                  "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                  "NumWidth": 10,
                  "NumHeight": 7,
                  "BackIsHidden": true,
                  "UniqueBack": true,
                  "Type": 0
                }
              },
              "LuaScript": "",
              "LuaScriptState": "",
              "XmlUI": ""
            },
            {
              "GUID": "f3db90",
              "Name": "Custom_Model_Bag",
              "Transform": {
                "posX": -23.4999924,
                "posY": 1.83999932,
                "posZ": 24.00001,
                "rotX": -6.490395E-06,
                "rotY": 179.992218,
                "rotZ": -5.320247E-07,
                "scaleX": 0.7,
                "scaleY": 0.7,
                "scaleZ": 0.7
              },
              "Nickname": "Présent",
              "Description": "",
              "GMNotes": "",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": true,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": true,
              "Tooltip": true,
              "GridProjection": false,
              "HideWhenFaceDown": false,
              "Hands": false,
              "MaterialIndex": -1,
              "MeshIndex": -1,
              "CustomMesh": {
                "MeshURL": "https://pastebin.com/raw/ALrYhQGb",
                "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/5077277234366553874/6AD0ADBA7941ACCDAB1C18E898E706CAB8B5331F/",
                "NormalURL": "",
                "ColliderURL": "",
                "Convex": true,
                "MaterialIndex": 3,
                "TypeIndex": 6,
                "CustomShader": {
                  "SpecularColor": {
                    "r": 1.0,
                    "g": 1.0,
                    "b": 1.0
                  },
                  "SpecularIntensity": 0.0,
                  "SpecularSharpness": 2.0,
                  "FresnelStrength": 0.0
                },
                "CastShadows": true
              },
              "Bag": {
                "Order": 0
              },
              "LuaScript": "-- Utility memory bag by Directsun\r\n-- Version 2.7.0\r\n-- Fork of Memory Bag 2.0 by MrStump\r\n--\r\n-- Want to contribute? Create an issue or fork the code on GitHub and submit a pull request:\r\n-- https://github.com/sunflowermans/TTS-UtilityMemoryBag\r\n\r\n\r\nfunction updateSave()\r\n    local data_to_save = {[\"ml\"]=memoryList}\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n        -- memoryList[guid].rot.x = movedRotation.x\r\n        -- memoryList[guid].rot.y = movedRotation.y\r\n        -- memoryList[guid].rot.z = movedRotation.z\r\n    end\r\n\r\n    --theList[obj.getGUID()] = {\r\n    --    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n    --    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n    --    lock=obj.getLock()\r\n    --}\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n\r\n--Beginning Setup\r\n\r\n\r\n--Make setup button\r\nfunction createSetupButton()\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", {0.75, 0.75, 1})\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\n    -- return getAllObjects()\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1 * 1/self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor +2\r\n            objPos.z = objPos.z * globalScaleFactor\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = {0.75,0.25,0.25,0.6}\r\n            local colorMove = {0,0,1,0.6}\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function=funcName, function_owner=self,\r\n                position=objPos, rotation=rot, height=1000, width=1000,\r\n                color=color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n--Creates submit and cancel buttons\r\nfunction createSetupActionButtons(move)\r\n    self.createButton({\r\n       label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n       position={-1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n       font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    self.createButton({\r\n      label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n      position={-1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n      font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    if move == false then\r\n      self.createButton({\r\n          label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n          position={1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n          font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\r\n        })\r\n\r\n        self.createButton({\r\n            label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n            position={-1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n            font_size=250, color={0,0,0}, font_color={1,1,1}\r\n        })\r\n\r\n        if fresh == false then\r\n            self.createButton({\r\n                label=\"Mise à Jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                position={1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=180, color={0,0,0}, font_color={0.75,0.75,1}\r\n            })\r\n            self.createButton({\r\n                label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                position={1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\r\n            })\r\n        end\r\n    end\r\n\r\n    self.createButton({\r\n        label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n        position={0,0.3,-2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n\r\n--During Setup\r\n\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = {0,0,1,0.6}\r\n    local color = {0,1,0,0.6}\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({index=previousIndex, color=colorMove})\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({index=index, color=color})\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n            lock=obj.getLock(),\r\n            tint=obj.getColorTint()\r\n        }\r\n        obj.highlightOn({0,1,0})\r\n    else\r\n        color = {0.75,0.25,0.25,0.6}\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({index=index, color=color})\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({index=index, color={0,1,0,0.6}})\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n                    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n                    lock=obj.getLock(),\r\n                    tint=obj.getColorTint()\r\n                }\r\n                obj.highlightOn({0,1,0})\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = {0.75,0.25,0.25,0.6}\r\n                self.editButton({index=index, color=color})\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", {1,1,1})\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", {1, 0.25, 0.25})\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", {0.75, 0.75, 1})\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", {0.75, 0.25, 0.25})\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k,v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", {0.25, 0.75, 0.25})\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", {1.0, 0.25, 0.25})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Removed\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", {0.75, 0.75, 1})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\n\r\n--After Setup\r\n\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={0,0.3,2.8}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={2,0.3,0}, rotation={0,90,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---  \r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    local bagObjList = self.getObjects()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid=guid, position=entry.pos, rotation=entry.rot, smooth=false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n\r\n--Utility functions\r\n\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x-p1.x)\r\n    deltaPos.y = (p2.y-p1.y) + yOffset\r\n    deltaPos.z = (p2.z-p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10^(dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample:\r\n{'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'}\r\n--]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend",
              "LuaScriptState": "{\"ml\":{\"195e4a\":{\"lock\":false,\"pos\":{\"x\":-1.63377376338758E-06,\"y\":1.50575077533722,\"z\":13.0000038146973},\"rot\":{\"x\":0.0108916405588388,\"y\":179.999572753906,\"z\":0.00495276739820838},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"204732\":{\"lock\":false,\"pos\":{\"x\":2.99999833106995,\"y\":1.50492143630981,\"z\":10.0000028610229},\"rot\":{\"x\":0.00420642038807273,\"y\":224.98258972168,\"z\":0.0112033812329173},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"21bfdd\":{\"lock\":false,\"pos\":{\"x\":-2.67850850832474E-06,\"y\":1.51821494102478,\"z\":7.00000333786011},\"rot\":{\"x\":0.010891592130065,\"y\":179.998596191406,\"z\":0.00494797481223941},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"3d0be8\":{\"lock\":false,\"pos\":{\"x\":10.9999980926514,\"y\":1.51726496219635,\"z\":7.00000238418579},\"rot\":{\"x\":0.0108916237950325,\"y\":179.998062133789,\"z\":0.00494782626628876},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"43f53e\":{\"lock\":false,\"pos\":{\"x\":5.49999856948853,\"y\":1.50641632080078,\"z\":19.0000038146973},\"rot\":{\"x\":-0.00494691077619791,\"y\":269.9951171875,\"z\":0.0108991591259837},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"46ef5f\":{\"lock\":false,\"pos\":{\"x\":-3.08861694975349E-06,\"y\":1.52049601078033,\"z\":19.0000057220459},\"rot\":{\"x\":0.0108915697783232,\"y\":180.000106811523,\"z\":0.00494823185727},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"4f9c28\":{\"lock\":false,\"pos\":{\"x\":7.99999809265137,\"y\":1.50448966026306,\"z\":10.0000028610229},\"rot\":{\"x\":0.0112026762217283,\"y\":135.028564453125,\"z\":-0.00419864058494568},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"6be9fb\":{\"lock\":false,\"pos\":{\"x\":7.99999761581421,\"y\":1.50563013553619,\"z\":16.0000019073486},\"rot\":{\"x\":0.0042084320448339,\"y\":224.972137451172,\"z\":0.0112020205706358},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"70a1d6\":{\"lock\":false,\"pos\":{\"x\":10.9999980926514,\"y\":1.5195460319519,\"z\":19.0000057220459},\"rot\":{\"x\":0.0108919115737081,\"y\":179.995880126953,\"z\":0.00494739599525929},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"88507a\":{\"lock\":false,\"pos\":{\"x\":21.9999980926514,\"y\":1.51859605312347,\"z\":19.0000038146973},\"rot\":{\"x\":0.0108915492892265,\"y\":180.000122070313,\"z\":0.00494832079857588},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"9f298f\":{\"lock\":false,\"pos\":{\"x\":-2.99983406066895,\"y\":1.51847398281097,\"z\":7.00018119812012},\"rot\":{\"x\":0.0108902687206864,\"y\":180.013488769531,\"z\":0.0049507743678987},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"a7b6bf\":{\"lock\":false,\"pos\":{\"x\":10.9999990463257,\"y\":1.50480079650879,\"z\":13.0000028610229},\"rot\":{\"x\":0.0108919627964497,\"y\":179.994979858398,\"z\":0.00495126144960523},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"bad694\":{\"lock\":false,\"pos\":{\"x\":5.49999856948853,\"y\":1.50760626792908,\"z\":20.0000038146973},\"rot\":{\"x\":359.989105224609,\"y\":-0.000806594849564135,\"z\":-0.00494815921410918},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}},\"be55dc\":{\"lock\":false,\"pos\":{\"x\":5.48669958114624,\"y\":1.50413489341736,\"z\":6.99215078353882},\"rot\":{\"x\":-0.00494658062234521,\"y\":269.994873046875,\"z\":0.0109011745080352},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"d38e7c\":{\"lock\":false,\"pos\":{\"x\":2.99999761581421,\"y\":1.50606203079224,\"z\":16.0000038146973},\"rot\":{\"x\":0.0112019684165716,\"y\":135.022857666016,\"z\":-0.00420006131753325},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"d3f185\":{\"lock\":false,\"pos\":{\"x\":16.4999980926514,\"y\":1.50546634197235,\"z\":19.0000038146973},\"rot\":{\"x\":0.00495009962469339,\"y\":90.0118713378906,\"z\":359.989105224609},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"d42bcb\":{\"lock\":false,\"pos\":{\"x\":15,\"y\":1.5152086019516,\"z\":-2.00010800361633},\"rot\":{\"x\":0.0108911115676165,\"y\":180.00471496582,\"z\":0.00494911521673203},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"fbb748\":{\"lock\":false,\"pos\":{\"x\":-29,\"y\":1.7653,\"z\":17},\"rot\":{\"x\":0,\"y\":180,\"z\":0},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}}}}",
              "XmlUI": "",
              "ContainedObjects": [
                {
                  "GUID": "21bfdd",
                  "Name": "Card",
                  "Transform": {
                    "posX": -3.584211E-06,
                    "posY": 1.50821531,
                    "posZ": 7.00000429,
                    "rotX": 0.0108916517,
                    "rotY": 179.998611,
                    "rotZ": 0.00494805444,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "",
                  "Description": "",
                  "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87016\",\n  \"locationBack\": {\n    \"connections\": \"Clover|Tindalos\",\n    \"icons\": \"SlantedEquals|Portal\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Clover|Tindalos\",\n    \"icons\": \"SlantedEquals|Portal\"\n  },\n  \"traits\": \"Arkham. Portal. Present.\",\n  \"type\": \"Location\"\n}",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 0.713235259,
                    "g": 0.713235259,
                    "b": 0.713235259
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": true,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": true,
                  "Tooltip": true,
                  "GridProjection": false,
                  "HideWhenFaceDown": true,
                  "Hands": true,
                  "CardID": 1104916,
                  "SidewaysCard": false,
                  "CustomDeck": {
                    "11049": {
                      "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                      "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                      "NumWidth": 10,
                      "NumHeight": 7,
                      "BackIsHidden": true,
                      "UniqueBack": true,
                      "Type": 0
                    }
                  },
                  "LuaScript": "",
                  "LuaScriptState": "",
                  "XmlUI": ""
                },
                {
                  "GUID": "3d0be8",
                  "Name": "Card",
                  "Transform": {
                    "posX": 10.9999971,
                    "posY": 1.50726533,
                    "posZ": 7.000004,
                    "rotX": 0.0108916685,
                    "rotY": 179.998047,
                    "rotZ": 0.00494779972,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "",
                  "Description": "",
                  "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87018\",\n  \"locationBack\": {\n    \"connections\": \"SlantedEquals|Circle|Tindalos\",\n    \"icons\": \"Clover|Portal\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"SlantedEquals|Circle|Tindalos\",\n    \"icons\": \"Clover|Portal\"\n  },\n  \"traits\": \"Arkham. Portal. Present.\",\n  \"type\": \"Location\"\n}",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 0.713235259,
                    "g": 0.713235259,
                    "b": 0.713235259
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": true,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": true,
                  "Tooltip": true,
                  "GridProjection": false,
                  "HideWhenFaceDown": true,
                  "Hands": true,
                  "CardID": 1104918,
                  "SidewaysCard": false,
                  "CustomDeck": {
                    "11049": {
                      "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                      "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                      "NumWidth": 10,
                      "NumHeight": 7,
                      "BackIsHidden": true,
                      "UniqueBack": true,
                      "Type": 0
                    }
                  },
                  "LuaScript": "",
                  "LuaScriptState": "",
                  "XmlUI": ""
                },
                {
                  "GUID": "46ef5f",
                  "Name": "Card",
                  "Transform": {
                    "posX": -3.93125174E-06,
                    "posY": 1.51049638,
                    "posZ": 19.0000076,
                    "rotX": 0.0108914562,
                    "rotY": 180.000122,
                    "rotZ": 0.00494818855,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "",
                  "Description": "",
                  "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87017\",\n  \"locationBack\": {\n    \"connections\": \"SlantedEquals|Circle|Tindalos\",\n    \"icons\": \"Clover|Portal\",\n    \"uses\": {\n      \"countPerInvestigator\": 3,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    },\n    \"victory\": 1\n  },\n  \"locationFront\": {\n    \"connections\": \"SlantedEquals|Circle|Tindalos\",\n    \"icons\": \"Clover|Portal\"\n  },\n  \"traits\": \"Arkham. Portal. Present.\",\n  \"type\": \"Location\",\n  \"victory\": 1\n}",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 0.713235259,
                    "g": 0.713235259,
                    "b": 0.713235259
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": true,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": true,
                  "Tooltip": true,
                  "GridProjection": false,
                  "HideWhenFaceDown": true,
                  "Hands": true,
                  "CardID": 1104917,
                  "SidewaysCard": false,
                  "CustomDeck": {
                    "11049": {
                      "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                      "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                      "NumWidth": 10,
                      "NumHeight": 7,
                      "BackIsHidden": true,
                      "UniqueBack": true,
                      "Type": 0
                    }
                  },
                  "LuaScript": "",
                  "LuaScriptState": "",
                  "XmlUI": ""
                },
                {
                  "GUID": "70a1d6",
                  "Name": "Card",
                  "Transform": {
                    "posX": 10.9999981,
                    "posY": 1.5095464,
                    "posZ": 19.0000076,
                    "rotX": 0.0108918222,
                    "rotY": 179.9959,
                    "rotZ": 0.00494739832,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "",
                  "Description": "",
                  "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87019\",\n  \"locationBack\": {\n    \"connections\": \"Clover|Crescent|Tindalos\",\n    \"icons\": \"Circle|Portal\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Clover|Crescent|Tindalos\",\n    \"icons\": \"Circle|Portal\"\n  },\n  \"traits\": \"Arkham. Portal. Present.\",\n  \"type\": \"Location\"\n}",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 0.713235259,
                    "g": 0.713235259,
                    "b": 0.713235259
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": true,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": true,
                  "Tooltip": true,
                  "GridProjection": false,
                  "HideWhenFaceDown": true,
                  "Hands": true,
                  "CardID": 1104919,
                  "SidewaysCard": false,
                  "CustomDeck": {
                    "11049": {
                      "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                      "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                      "NumWidth": 10,
                      "NumHeight": 7,
                      "BackIsHidden": true,
                      "UniqueBack": true,
                      "Type": 0
                    }
                  },
                  "LuaScript": "",
                  "LuaScriptState": "",
                  "XmlUI": ""
                },
                {
                  "GUID": "88507a",
                  "Name": "Card",
                  "Transform": {
                    "posX": 22.0,
                    "posY": 1.50859642,
                    "posZ": 19.0000057,
                    "rotX": 0.0108915027,
                    "rotY": 180.000137,
                    "rotZ": 0.004948338,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "",
                  "Description": "",
                  "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87020\",\n  \"locationBack\": {\n    \"connections\": \"Circle\",\n    \"icons\": \"Crescent\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Circle\",\n    \"icons\": \"Crescent\"\n  },\n  \"traits\": \"Arkham. Present.\",\n  \"type\": \"Location\"\n}",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 0.713235259,
                    "g": 0.713235259,
                    "b": 0.713235259
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": true,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": true,
                  "Tooltip": true,
                  "GridProjection": false,
                  "HideWhenFaceDown": true,
                  "Hands": true,
                  "CardID": 1104920,
                  "SidewaysCard": false,
                  "CustomDeck": {
                    "11049": {
                      "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                      "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                      "NumWidth": 10,
                      "NumHeight": 7,
                      "BackIsHidden": true,
                      "UniqueBack": true,
                      "Type": 0
                    }
                  },
                  "LuaScript": "",
                  "LuaScriptState": "",
                  "XmlUI": ""
                },
                {
                  "GUID": "9f298f",
                  "Name": "Card",
                  "Transform": {
                    "posX": -2.99984765,
                    "posY": 1.50869465,
                    "posZ": 7.000208,
                    "rotX": 0.0157516487,
                    "rotY": 180.014023,
                    "rotZ": 0.009870296,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "",
                  "Description": "",
                  "GMNotes": "{\n  \"class\": \"Neutral\",\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"87014\",\n  \"sanity\": 1,\n  \"traits\": \"Scientist. Ally. Past.\",\n  \"type\": \"Asset\"\n}",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 0.713235259,
                    "g": 0.713235259,
                    "b": 0.713235259
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": true,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": true,
                  "Tooltip": true,
                  "GridProjection": false,
                  "HideWhenFaceDown": true,
                  "Hands": true,
                  "CardID": 1110700,
                  "SidewaysCard": false,
                  "CustomDeck": {
                    "11107": {
                      "FaceURL": "https://i.imgur.com/FhiblpC.jpg",
                      "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931552806915249927/583EE2570FC1A094D59B991E97AB542CA94BEBC9/",
                      "NumWidth": 10,
                      "NumHeight": 7,
                      "BackIsHidden": true,
                      "UniqueBack": false,
                      "Type": 0
                    }
                  },
                  "LuaScript": "",
                  "LuaScriptState": "",
                  "XmlUI": ""
                },
                {
                  "GUID": "bad694",
                  "Name": "Custom_Model",
                  "Transform": {
                    "posX": 5.499998,
                    "posY": 1.49760664,
                    "posZ": 20.0000057,
                    "rotX": 359.9891,
                    "rotY": -0.0008624701,
                    "rotZ": -0.00494831847,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "Text Tool",
                  "Description": "",
                  "GMNotes": "",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 0.0,
                    "g": 0.0,
                    "b": 0.0,
                    "a": 0.0
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": false,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": false,
                  "Tooltip": false,
                  "GridProjection": false,
                  "HideWhenFaceDown": false,
                  "Hands": false,
                  "CustomMesh": {
                    "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/1478820768302617365/27883B7913E0E69143C3AA03493B7E7C4E8C29C0/",
                    "DiffuseURL": "",
                    "NormalURL": "",
                    "ColliderURL": "",
                    "Convex": true,
                    "MaterialIndex": 1,
                    "TypeIndex": 0,
                    "CastShadows": true
                  },
                  "LuaScript": "-- Code for bag to identify text tool objects\r\nmovableTextTool_cowgoesmoo33 = true\r\n\r\n-- Number of characters before the text box width expands.\r\nEXPAND_INTERVAL = 20\r\n\r\n-- This table controls what is passed between save/load\r\ndata = {}\r\n\r\nfunction onLoad(saved_data)\r\n  if saved_data ~= '' then\r\n    data = JSON.decode(saved_data)\r\n    if data.text ~= '' then\r\n      self.interactable = data.interactable\r\n      staticMode()\r\n      return\r\n    end\r\n  else\r\n    data = {size=200, color=Color(0,0,0), text='', interactable=true,\r\n        enter_to_finish=false, autolock=false, autolift=false,\r\n        hover_height=0.05, box_transparency=1}\r\n  end\r\n\r\n  inputMode()\r\nend\r\n\r\n-- True if in the middle of delay after pressing Enter (with enter_to_finish on)\r\nfinishing = false\r\nfunction input_func(obj, color, input, stillEditing)\r\n  local params = getBox(input)\r\n  if params then\r\n    params.value = input\r\n    self.editInput(params)\r\n  end\r\n\r\n  if not stillEditing then\r\n    data.text = input\r\n    updateState()\r\n    if input ~= '' then staticMode(color) end\r\n  elseif data.enter_to_finish then\r\n    -- If enter is pressed: remove last newline and force finish\r\n    if not finishing and input:sub(-1) == '\\n' then\r\n      finishing = true\r\n      -- Delay to avoid user's Enter keypress being detected (opens chat box)\r\n      Wait.frames(function()\r\n        input = input:sub(1, -2)\r\n        data.text = input\r\n        updateState()\r\n        if input ~= '' then staticMode(color) else inputMode() end\r\n        finishing = false\r\n      end, 10)\r\n    end\r\n  end\r\nend\r\n\r\n-- When the inpupt box appears and lets the player type in it.\r\nfunction inputMode()\r\n  self.clearContextMenu()\r\n  self.clearInputs()\r\n  self.clearButtons()\r\n\r\n  local size = getBox(data.text, true)\r\n\r\n  self.createInput({\r\n    input_function = \"input_func\",\r\n    function_owner = self,\r\n    label          = \"Type Here\",\r\n    alignment      = 3,\r\n    position       = {x=0, y=data.hover_height, z=0},\r\n    rotation       = {0, 180, 0},\r\n    width          = size.width,\r\n    height         = size.height,\r\n    color          = getBackground(data.color),\r\n    font_color     = data.color,\r\n    font_size      = data.size,\r\n    value          = data.text,\r\n  })\r\n\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\nend\r\n\r\n-- When the input box disappears and displays the text.\r\nfunction staticMode(player)\r\n  self.clearContextMenu()\r\n  if data.autolock then\r\n    self.locked = true\r\n  end\r\n  if self.getInputs() and #self.getInputs() ~= 0 then\r\n    self.removeInput(0)\r\n  end\r\n\r\n  -- Clear from selecting player\r\n  if player then\r\n    self.removeFromPlayerSelection(player)\r\n  end\r\n\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  self.createButton({\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=self,\r\n    position={0,data.hover_height,0}, rotation={0,180,0}, height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  })\r\n\r\n  self.addContextMenuItem('Edit Text', function(color)\r\n    self.removeFromPlayerSelection(color)\r\n    inputMode()\r\n  end)\r\n  self.addContextMenuItem('Clear', function(color)\r\n    applyMultiple(color, 'clear', _, true)\r\n  end)\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\n  self.addContextMenuItem('Permanently Attach', attemptAttach)\r\n  self.addContextMenuItem('Permalock', function(color)\r\n    applyMultiple(color, 'permalock', _, true)\r\n  end)\r\nend\r\n\r\nfunction changeSize(params)\r\n  local delta = params[1]\r\n  local newSize = data.size + delta\r\n  if newSize > 800  or newSize < 50 then\r\n    return\r\n  end\r\n  data.size = newSize\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_size=data.size})\r\n  else\r\n    local size = getBox(data.text, true)\r\n    self.editInput({width=size.width, height=size.height, font_size=data.size})\r\n  end\r\nend\r\n\r\nfunction setColor(params)\r\n  if params and params[1] then\r\n    data.color = params[1]\r\n  else\r\n    data.color = self.getColorTint():setAt('a', 1) -- Take on color of object tint\r\n  end\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_color=data.color})\r\n  else\r\n    self.editInput({font_color=data.color, color=getBackground(data.color)})\r\n  end\r\nend\r\n\r\nfunction getBackground(color) --determines whether to use black or white depending on luminance\r\n  local r,g,b = Color(color):get()\r\n\r\n  local lum = 0.2126*r + 0.7152*g + 0.0722*b\r\n  if lum > 0.75 then\r\n    return {0.2,0.2,0.2, data.box_transparency}\r\n  else\r\n    return {1,1,1, data.box_transparency}\r\n  end\r\nend\r\n\r\nfunction clear()\r\n  data.text = ''\r\n  updateState()\r\n  inputMode()\r\nend\r\n\r\nfunction permalock()\r\n  self.interactable = false\r\n  data.interactable = false\r\n  updateState()\r\nend\r\n\r\nlocal target_script = [[\r\nfunction onLoad(script_state)\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    for _,entry in ipairs(state) do\r\n      self.createButton(entry)\r\n    end\r\n    self.addContextMenuItem('Clear All Text', function(color)\r\n      self.clearContextMenu()\r\n      self.clearButtons()\r\n      self.script_state = ''\r\n      self.script_code = ''\r\n    end)\r\n  end\r\nend\r\n]]\r\n\r\nfunction attemptAttach(player_color)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  local attachee\r\n  local attachers = {}\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if obj ~= self then\r\n        table.insert(attachers, obj)\r\n      end\r\n    else\r\n      if attachee then\r\n        broadcastToColor(\"More than one target selected.\", player_color)\r\n        return\r\n      else\r\n        attachee = obj\r\n      end\r\n    end\r\n  end\r\n  if attachee then\r\n    local code = attachee.script_code\r\n    if code and code ~= '' and code ~= target_script then\r\n      broadcastToColor(\"Warning: script on card has been overriden. Rewind time to undo.\", player_color)\r\n    end\r\n    for i,attacher in ipairs(attachers) do\r\n      attacher.call('attach', {target = attachee})\r\n    end\r\n    attach({target = attachee})\r\n    local type, flip = attachee.type, attachee.getRotation().z\r\n    if (type == 'Card' or type == 'Deck') and flip > 175 and flip < 185 then\r\n      broadcastToColor(\"Warning: text will not display if card or deck is facing down.\", player_color)\r\n    end\r\n  else\r\n    broadcastToColor(\"You must have a target object in your selection (using click-and-drag or Ctrl+Click) to use this option.\", player_color)\r\n  end\r\nend\r\n\r\nfunction attach(params)\r\n  local target = params.target\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  local textRotation = self.getRotation():sub(target.getRotation())\r\n    :add(Vector(180, 0, 180))\r\n\r\n  local textPosition = target.positionToLocal(\r\n    self.getPosition():add(Vector(0, data.hover_height, 0))\r\n  )\r\n  textPosition.x = -textPosition.x\r\n\r\n  local textScale = {}\r\n  textScale.x = self.getScale().x / target.getScale().x\r\n  textScale.y = self.getScale().x / target.getScale().y\r\n  textScale.z = self.getScale().x / target.getScale().z\r\n\r\n  local details = {\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=nil,\r\n    position=textPosition,\r\n    rotation=textRotation,\r\n    scale=textScale,\r\n    height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  }\r\n\r\n  target.createButton(details)\r\n\r\n  local script_state = target.script_state\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    table.insert(state, details)\r\n    target.script_state = JSON.encode(state)\r\n  else\r\n    target.script_state = JSON.encode({[1]=details})\r\n  end\r\n\r\n  target.script_code = target_script\r\n\r\n  self.destruct()\r\nend\r\n\r\nfunction applyMultiple(player_color, func_string, params, static_only)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if not static_only or obj.call('isStatic') then\r\n        obj.call(func_string, params)\r\n      end\r\n    end\r\n  end\r\nend\r\n\r\nfunction isStatic()\r\n  local input = self.getInputs()\r\n  return not input or #input == 0\r\nend\r\n\r\nfunction getBox(input, force)\r\n  local maxLength, lineCount = EXPAND_INTERVAL, 1\r\n  local lineLength = 0\r\n  for i = 1, #input do\r\n    local c = input:sub(i,i)\r\n    if c == '\\n' then\r\n      lineCount = lineCount + 1\r\n      if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n      lineLength = 0\r\n    else\r\n      lineLength = lineLength + 1\r\n    end\r\n  end\r\n  if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n\r\n  newWidth = data.size * maxLength * 0.9\r\n  newHeight = data.size * lineCount + 23\r\n\r\n  if force or boxWidth ~= newWidth or boxHeight ~= newHeight then\r\n    boxWidth, boxHeight = newWidth, newHeight\r\n    return {width = boxWidth, height = boxHeight}\r\n  end\r\n  return nil\r\nend\r\n\r\ntemp_lift = nil\r\nfunction onPickUp(player_color)\r\n  if data.autolift then\r\n    local player = Player[player_color]\r\n    temp_lift = player.lift_height\r\n    player.lift_height = 0\r\n  end\r\nend\r\n\r\nfunction onDrop(player_color)\r\n  if data.autolift and temp_lift then\r\n    Player[player_color].lift_height = temp_lift\r\n  end\r\nend\r\n\r\n-- Should be called every time data is modified, allows info to be saved on copy/paste\r\nfunction updateState()\r\n  self.script_state = JSON.encode(data)\r\nend\r\n\r\nfunction onSave()\r\n  self.script_state = JSON.encode(data)\r\n  return self.script_state\r\nend",
                  "LuaScriptState": "{\"autolift\":false,\"autolock\":false,\"box_transparency\":1,\"color\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1},\"enter_to_finish\":false,\"hover_height\":0.05,\"interactable\":true,\"size\":350,\"text\":\"Présent\"}",
                  "XmlUI": ""
                },
                {
                  "GUID": "d42bcb",
                  "Name": "Card",
                  "Transform": {
                    "posX": 15.0,
                    "posY": 1.505209,
                    "posZ": -2.00010872,
                    "rotX": 0.0108910846,
                    "rotY": 180.004684,
                    "rotZ": 0.00494904,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "",
                  "Description": "",
                  "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87015\",\n  \"type\": \"Story\",\n  \"victory\": 0\n}",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 0.713235259,
                    "g": 0.713235259,
                    "b": 0.713235259
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": true,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": true,
                  "Tooltip": true,
                  "GridProjection": false,
                  "HideWhenFaceDown": true,
                  "Hands": true,
                  "CardID": 1104909,
                  "SidewaysCard": false,
                  "CustomDeck": {
                    "11049": {
                      "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                      "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                      "NumWidth": 10,
                      "NumHeight": 7,
                      "BackIsHidden": true,
                      "UniqueBack": true,
                      "Type": 0
                    }
                  },
                  "LuaScript": "",
                  "LuaScriptState": "",
                  "XmlUI": ""
                },
                {
                  "GUID": "fbb748",
                  "Name": "Custom_Model_Bag",
                  "Transform": {
                    "posX": -29.0,
                    "posY": 1.77,
                    "posZ": 17.0,
                    "rotX": -4.785684E-06,
                    "rotY": 180.0,
                    "rotZ": -3.9298186E-07,
                    "scaleX": 1.0,
                    "scaleY": 0.562042058,
                    "scaleZ": 1.0
                  },
                  "Nickname": "Machinations",
                  "Description": "",
                  "GMNotes": "",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 1.0,
                    "g": 1.0,
                    "b": 1.0
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": true,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": true,
                  "Tooltip": true,
                  "GridProjection": false,
                  "HideWhenFaceDown": false,
                  "Hands": false,
                  "MaterialIndex": -1,
                  "MeshIndex": -1,
                  "CustomMesh": {
                    "MeshURL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/advboxes/tuckbox_h_MSH.obj",
                    "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/1983303656990210870/D2994AC54A968C74968E19B4F03195BC3664AEE5/",
                    "NormalURL": "",
                    "ColliderURL": "",
                    "Convex": true,
                    "MaterialIndex": 3,
                    "TypeIndex": 6,
                    "CustomShader": {
                      "SpecularColor": {
                        "r": 1.0,
                        "g": 1.0,
                        "b": 1.0
                      },
                      "SpecularIntensity": 0.0,
                      "SpecularSharpness": 2.0,
                      "FresnelStrength": 0.0
                    },
                    "CastShadows": true
                  },
                  "Bag": {
                    "Order": 2
                  },
                  "LuaScript": "",
                  "LuaScriptState": "",
                  "XmlUI": "",
                  "ContainedObjects": [
                    {
                      "GUID": "0c0189",
                      "Name": "Custom_Model_Bag",
                      "Transform": {
                        "posX": -29.5,
                        "posY": 2.415918,
                        "posZ": 17.0,
                        "rotX": -0.00017362721,
                        "rotY": 179.9811,
                        "rotZ": -0.000165336009,
                        "scaleX": 0.7,
                        "scaleY": 0.7,
                        "scaleZ": 0.7
                      },
                      "Nickname": "Une Âpre Rivalité",
                      "Description": "Machination",
                      "GMNotes": "",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 1.0,
                        "g": 1.0,
                        "b": 1.0
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": true,
                      "GridProjection": false,
                      "HideWhenFaceDown": false,
                      "Hands": false,
                      "MaterialIndex": -1,
                      "MeshIndex": -1,
                      "CustomMesh": {
                        "MeshURL": "https://pastebin.com/raw/ALrYhQGb",
                        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/5077277234366558480/31140655872853ACBC44735F25B0EE7E19C72536/",
                        "NormalURL": "",
                        "ColliderURL": "",
                        "Convex": true,
                        "MaterialIndex": 3,
                        "TypeIndex": 6,
                        "CustomShader": {
                          "SpecularColor": {
                            "r": 1.0,
                            "g": 1.0,
                            "b": 1.0
                          },
                          "SpecularIntensity": 0.0,
                          "SpecularSharpness": 2.0,
                          "FresnelStrength": 0.0
                        },
                        "CastShadows": true
                      },
                      "Bag": {
                        "Order": 0
                      },
                      "LuaScript": "-- Utility memory bag by Directsun\r\n-- Version 2.7.0\r\n-- Fork of Memory Bag 2.0 by MrStump\r\n--\r\n-- Want to contribute? Create an issue or fork the code on GitHub and submit a pull request:\r\n-- https://github.com/sunflowermans/TTS-UtilityMemoryBag\r\n\r\n\r\nfunction updateSave()\r\n    local data_to_save = {[\"ml\"]=memoryList}\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n        -- memoryList[guid].rot.x = movedRotation.x\r\n        -- memoryList[guid].rot.y = movedRotation.y\r\n        -- memoryList[guid].rot.z = movedRotation.z\r\n    end\r\n\r\n    --theList[obj.getGUID()] = {\r\n    --    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n    --    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n    --    lock=obj.getLock()\r\n    --}\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n\r\n--Beginning Setup\r\n\r\n\r\n--Make setup button\r\nfunction createSetupButton()\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", {0.75, 0.75, 1})\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\n    -- return getAllObjects()\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1 * 1/self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor +2\r\n            objPos.z = objPos.z * globalScaleFactor\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = {0.75,0.25,0.25,0.6}\r\n            local colorMove = {0,0,1,0.6}\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function=funcName, function_owner=self,\r\n                position=objPos, rotation=rot, height=1000, width=1000,\r\n                color=color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n--Creates submit and cancel buttons\r\nfunction createSetupActionButtons(move)\r\n    self.createButton({\r\n       label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n       position={-1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n       font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    self.createButton({\r\n      label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n      position={-1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n      font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    if move == false then\r\n      self.createButton({\r\n          label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n          position={1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n          font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\r\n        })\r\n\r\n        self.createButton({\r\n            label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n            position={-1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n            font_size=250, color={0,0,0}, font_color={1,1,1}\r\n        })\r\n\r\n        if fresh == false then\r\n            self.createButton({\r\n                label=\"Mise à Jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                position={1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=180, color={0,0,0}, font_color={0.75,0.75,1}\r\n            })\r\n            self.createButton({\r\n                label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                position={1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\r\n            })\r\n        end\r\n    end\r\n\r\n    self.createButton({\r\n        label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n        position={0,0.3,-2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n\r\n--During Setup\r\n\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = {0,0,1,0.6}\r\n    local color = {0,1,0,0.6}\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({index=previousIndex, color=colorMove})\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({index=index, color=color})\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n            lock=obj.getLock(),\r\n            tint=obj.getColorTint()\r\n        }\r\n        obj.highlightOn({0,1,0})\r\n    else\r\n        color = {0.75,0.25,0.25,0.6}\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({index=index, color=color})\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({index=index, color={0,1,0,0.6}})\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n                    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n                    lock=obj.getLock(),\r\n                    tint=obj.getColorTint()\r\n                }\r\n                obj.highlightOn({0,1,0})\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = {0.75,0.25,0.25,0.6}\r\n                self.editButton({index=index, color=color})\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", {1,1,1})\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", {1, 0.25, 0.25})\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", {0.75, 0.75, 1})\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", {0.75, 0.25, 0.25})\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k,v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", {0.25, 0.75, 0.25})\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", {1.0, 0.25, 0.25})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Removed\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", {0.75, 0.75, 1})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\n\r\n--After Setup\r\n\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={0,0.3,2.8}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={2,0.3,0}, rotation={0,90,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---  \r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    local bagObjList = self.getObjects()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid=guid, position=entry.pos, rotation=entry.rot, smooth=false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n\r\n--Utility functions\r\n\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x-p1.x)\r\n    deltaPos.y = (p2.y-p1.y) + yOffset\r\n    deltaPos.z = (p2.z-p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10^(dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample:\r\n{'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'}\r\n--]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend",
                      "LuaScriptState": "{\"ml\":{\"392434\":{\"lock\":false,\"pos\":{\"x\":-32.0000076293945,\"y\":1.77890563011169,\"z\":9.99999523162842},\"rot\":{\"x\":-4.8830488594831E-06,\"y\":180.002349853516,\"z\":-3.80367339403165E-07},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"98d7a0\":{\"lock\":false,\"pos\":{\"x\":-34.5000076293945,\"y\":1.77890574932098,\"z\":9.99998569488525},\"rot\":{\"x\":-4.87788747705054E-06,\"y\":179.975082397461,\"z\":4.73066847916925E-08},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e7eb14\":{\"lock\":false,\"pos\":{\"x\":35,\"y\":1.55608379840851,\"z\":-8.50010013580322},\"rot\":{\"x\":0.0910782441496849,\"y\":180.000930786133,\"z\":0.00103796040639281},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"fbcc01\":{\"lock\":false,\"pos\":{\"x\":-19.5000038146973,\"y\":1.77890598773956,\"z\":5.99999237060547},\"rot\":{\"x\":-5.04650006405427E-06,\"y\":180.000198364258,\"z\":-5.95107536582873E-08},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}}}}",
                      "XmlUI": "",
                      "ContainedObjects": [
                        {
                          "GUID": "392434",
                          "Name": "Card",
                          "Transform": {
                            "posX": -27.5000267,
                            "posY": 1.778906,
                            "posZ": 5.9999733,
                            "rotX": -4.9282994E-06,
                            "rotY": 180.002274,
                            "rotZ": 1.47109276E-08,
                            "scaleX": 1.0,
                            "scaleY": 1.0,
                            "scaleZ": 1.0
                          },
                          "Nickname": "",
                          "Description": "",
                          "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"87022\",\n  \"sanity\": 2,\n  \"traits\": \"Scientist. Ally. Present.\",\n  \"type\": \"Asset\"\n}",
                          "AltLookAngle": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0
                          },
                          "ColorDiffuse": {
                            "r": 0.713235259,
                            "g": 0.713235259,
                            "b": 0.713235259
                          },
                          "LayoutGroupSortIndex": 0,
                          "Value": 0,
                          "Locked": false,
                          "Grid": true,
                          "Snap": true,
                          "IgnoreFoW": false,
                          "MeasureMovement": false,
                          "DragSelectable": true,
                          "Autoraise": true,
                          "Sticky": true,
                          "Tooltip": true,
                          "GridProjection": false,
                          "HideWhenFaceDown": true,
                          "Hands": true,
                          "CardID": 1110641,
                          "SidewaysCard": false,
                          "CustomDeck": {
                            "11106": {
                              "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                              "NumWidth": 10,
                              "NumHeight": 7,
                              "BackIsHidden": true,
                              "UniqueBack": false,
                              "Type": 0
                            }
                          },
                          "LuaScript": "",
                          "LuaScriptState": "",
                          "XmlUI": ""
                        },
                        {
                          "GUID": "98d7a0",
                          "Name": "Card",
                          "Transform": {
                            "posX": -24.5000019,
                            "posY": 1.77890563,
                            "posZ": 9.999993,
                            "rotX": -5.135588E-06,
                            "rotY": 179.975357,
                            "rotZ": 1.0944575E-07,
                            "scaleX": 1.0,
                            "scaleY": 1.0,
                            "scaleZ": 1.0
                          },
                          "Nickname": "",
                          "Description": "",
                          "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"87021\",\n  \"sanity\": 2,\n  \"traits\": \"Scientist. Ally. Present.\",\n  \"type\": \"Asset\"\n}",
                          "AltLookAngle": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0
                          },
                          "ColorDiffuse": {
                            "r": 0.713235259,
                            "g": 0.713235259,
                            "b": 0.713235259
                          },
                          "LayoutGroupSortIndex": 0,
                          "Value": 0,
                          "Locked": false,
                          "Grid": true,
                          "Snap": true,
                          "IgnoreFoW": false,
                          "MeasureMovement": false,
                          "DragSelectable": true,
                          "Autoraise": true,
                          "Sticky": true,
                          "Tooltip": true,
                          "GridProjection": false,
                          "HideWhenFaceDown": true,
                          "Hands": true,
                          "CardID": 1110640,
                          "SidewaysCard": false,
                          "CustomDeck": {
                            "11106": {
                              "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                              "NumWidth": 10,
                              "NumHeight": 7,
                              "BackIsHidden": true,
                              "UniqueBack": false,
                              "Type": 0
                            }
                          },
                          "LuaScript": "",
                          "LuaScriptState": "",
                          "XmlUI": ""
                        },
                        {
                          "GUID": "e7eb14",
                          "Name": "Card",
                          "Transform": {
                            "posX": -27.0000153,
                            "posY": 1.77890563,
                            "posZ": 10.99997,
                            "rotX": -5.039164E-06,
                            "rotY": 180.000168,
                            "rotZ": -6.72113245E-08,
                            "scaleX": 1.0,
                            "scaleY": 1.0,
                            "scaleZ": 1.0
                          },
                          "Nickname": "Une Âpre Rivalité",
                          "Description": "Machination",
                          "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87033\",\n  \"type\": \"Story\",\n  \"victory\": 1\n}",
                          "AltLookAngle": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0
                          },
                          "ColorDiffuse": {
                            "r": 0.713235259,
                            "g": 0.713235259,
                            "b": 0.713235259
                          },
                          "LayoutGroupSortIndex": 0,
                          "Value": 0,
                          "Locked": false,
                          "Grid": true,
                          "Snap": true,
                          "IgnoreFoW": false,
                          "MeasureMovement": false,
                          "DragSelectable": true,
                          "Autoraise": true,
                          "Sticky": true,
                          "Tooltip": true,
                          "GridProjection": false,
                          "HideWhenFaceDown": true,
                          "Hands": true,
                          "CardID": 1104907,
                          "SidewaysCard": false,
                          "CustomDeck": {
                            "11049": {
                              "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                              "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                              "NumWidth": 10,
                              "NumHeight": 7,
                              "BackIsHidden": true,
                              "UniqueBack": true,
                              "Type": 0
                            }
                          },
                          "LuaScript": "",
                          "LuaScriptState": "",
                          "XmlUI": ""
                        },
                        {
                          "GUID": "fbcc01",
                          "Name": "Card",
                          "Transform": {
                            "posX": -30.0000229,
                            "posY": 1.77890563,
                            "posZ": 10.4999714,
                            "rotX": -4.99307E-06,
                            "rotY": 180.0004,
                            "rotZ": 2.17690168E-08,
                            "scaleX": 1.0,
                            "scaleY": 1.0,
                            "scaleZ": 1.0
                          },
                          "Nickname": "",
                          "Description": "",
                          "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"87037a\",\n  \"sanity\": 2,\n  \"traits\": \"Scientist. Ally.\",\n  \"type\": \"Asset\"\n}",
                          "AltLookAngle": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0
                          },
                          "ColorDiffuse": {
                            "r": 0.713235259,
                            "g": 0.713235259,
                            "b": 0.713235259
                          },
                          "LayoutGroupSortIndex": 0,
                          "Value": 0,
                          "Locked": false,
                          "Grid": true,
                          "Snap": true,
                          "IgnoreFoW": false,
                          "MeasureMovement": false,
                          "DragSelectable": true,
                          "Autoraise": true,
                          "Sticky": true,
                          "Tooltip": true,
                          "GridProjection": false,
                          "HideWhenFaceDown": true,
                          "Hands": true,
                          "CardID": 1105127,
                          "SidewaysCard": false,
                          "CustomDeck": {
                            "11051": {
                              "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                              "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                              "NumWidth": 10,
                              "NumHeight": 7,
                              "BackIsHidden": true,
                              "UniqueBack": true,
                              "Type": 0
                            }
                          },
                          "LuaScript": "",
                          "LuaScriptState": "",
                          "XmlUI": ""
                        }
                      ]
                    },
                    {
                      "GUID": "7f5aa5",
                      "Name": "Custom_Model_Bag",
                      "Transform": {
                        "posX": -29.5,
                        "posY": 2.415918,
                        "posZ": 17.0,
                        "rotX": -0.000171491629,
                        "rotY": 179.9851,
                        "rotZ": -0.00016477365,
                        "scaleX": 0.7,
                        "scaleY": 0.7,
                        "scaleZ": 0.7
                      },
                      "Nickname": "Rédemption d'un Ancien Collègue",
                      "Description": "Machination",
                      "GMNotes": "",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 1.0,
                        "g": 1.0,
                        "b": 1.0
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": true,
                      "GridProjection": false,
                      "HideWhenFaceDown": false,
                      "Hands": false,
                      "MaterialIndex": -1,
                      "MeshIndex": -1,
                      "CustomMesh": {
                        "MeshURL": "https://pastebin.com/raw/ALrYhQGb",
                        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/5077277234366558480/31140655872853ACBC44735F25B0EE7E19C72536/",
                        "NormalURL": "",
                        "ColliderURL": "",
                        "Convex": true,
                        "MaterialIndex": 3,
                        "TypeIndex": 6,
                        "CustomShader": {
                          "SpecularColor": {
                            "r": 1.0,
                            "g": 1.0,
                            "b": 1.0
                          },
                          "SpecularIntensity": 0.0,
                          "SpecularSharpness": 2.0,
                          "FresnelStrength": 0.0
                        },
                        "CastShadows": true
                      },
                      "Bag": {
                        "Order": 0
                      },
                      "LuaScript": "-- Utility memory bag by Directsun\r\n-- Version 2.7.0\r\n-- Fork of Memory Bag 2.0 by MrStump\r\n--\r\n-- Want to contribute? Create an issue or fork the code on GitHub and submit a pull request:\r\n-- https://github.com/sunflowermans/TTS-UtilityMemoryBag\r\n\r\n\r\nfunction updateSave()\r\n    local data_to_save = {[\"ml\"]=memoryList}\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n        -- memoryList[guid].rot.x = movedRotation.x\r\n        -- memoryList[guid].rot.y = movedRotation.y\r\n        -- memoryList[guid].rot.z = movedRotation.z\r\n    end\r\n\r\n    --theList[obj.getGUID()] = {\r\n    --    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n    --    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n    --    lock=obj.getLock()\r\n    --}\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n\r\n--Beginning Setup\r\n\r\n\r\n--Make setup button\r\nfunction createSetupButton()\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", {0.75, 0.75, 1})\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\n    -- return getAllObjects()\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1 * 1/self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor +2\r\n            objPos.z = objPos.z * globalScaleFactor\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = {0.75,0.25,0.25,0.6}\r\n            local colorMove = {0,0,1,0.6}\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function=funcName, function_owner=self,\r\n                position=objPos, rotation=rot, height=1000, width=1000,\r\n                color=color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n--Creates submit and cancel buttons\r\nfunction createSetupActionButtons(move)\r\n    self.createButton({\r\n       label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n       position={-1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n       font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    self.createButton({\r\n      label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n      position={-1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n      font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    if move == false then\r\n      self.createButton({\r\n          label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n          position={1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n          font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\r\n        })\r\n\r\n        self.createButton({\r\n            label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n            position={-1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n            font_size=250, color={0,0,0}, font_color={1,1,1}\r\n        })\r\n\r\n        if fresh == false then\r\n            self.createButton({\r\n                label=\"Mise à Jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                position={1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=180, color={0,0,0}, font_color={0.75,0.75,1}\r\n            })\r\n            self.createButton({\r\n                label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                position={1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\r\n            })\r\n        end\r\n    end\r\n\r\n    self.createButton({\r\n        label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n        position={0,0.3,-2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n\r\n--During Setup\r\n\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = {0,0,1,0.6}\r\n    local color = {0,1,0,0.6}\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({index=previousIndex, color=colorMove})\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({index=index, color=color})\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n            lock=obj.getLock(),\r\n            tint=obj.getColorTint()\r\n        }\r\n        obj.highlightOn({0,1,0})\r\n    else\r\n        color = {0.75,0.25,0.25,0.6}\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({index=index, color=color})\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({index=index, color={0,1,0,0.6}})\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n                    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n                    lock=obj.getLock(),\r\n                    tint=obj.getColorTint()\r\n                }\r\n                obj.highlightOn({0,1,0})\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = {0.75,0.25,0.25,0.6}\r\n                self.editButton({index=index, color=color})\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", {1,1,1})\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", {1, 0.25, 0.25})\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", {0.75, 0.75, 1})\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", {0.75, 0.25, 0.25})\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k,v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", {0.25, 0.75, 0.25})\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", {1.0, 0.25, 0.25})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Removed\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", {0.75, 0.75, 1})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\n\r\n--After Setup\r\n\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={0,0.3,2.8}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={2,0.3,0}, rotation={0,90,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---  \r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    local bagObjList = self.getObjects()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid=guid, position=entry.pos, rotation=entry.rot, smooth=false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n\r\n--Utility functions\r\n\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x-p1.x)\r\n    deltaPos.y = (p2.y-p1.y) + yOffset\r\n    deltaPos.z = (p2.z-p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10^(dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample:\r\n{'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'}\r\n--]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend",
                      "LuaScriptState": "{\"ml\":{\"1781f2\":{\"lock\":false,\"pos\":{\"x\":13.4999990463257,\"y\":1.51933014392853,\"z\":19.0000019073486},\"rot\":{\"x\":0.010891430079937,\"y\":180.001281738281,\"z\":0.00494843441992998},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"1c93ce\":{\"lock\":false,\"pos\":{\"x\":-32.0000114440918,\"y\":1.77890563011169,\"z\":9.99999237060547},\"rot\":{\"x\":-4.93900870424113E-06,\"y\":180.00260925293,\"z\":-9.84570576179067E-08},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"43c540\":{\"lock\":false,\"pos\":{\"x\":-34.5000114440918,\"y\":1.77890563011169,\"z\":9.99998188018799},\"rot\":{\"x\":-5.17784246767405E-06,\"y\":179.97737121582,\"z\":1.87379740168581E-07},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"906c4a\":{\"lock\":false,\"pos\":{\"x\":35,\"y\":1.55608379840851,\"z\":-8.50010013580322},\"rot\":{\"x\":0.091077908873558,\"y\":180.003540039063,\"z\":0.00104233797173947},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}}}}",
                      "XmlUI": "",
                      "ContainedObjects": [
                        {
                          "GUID": "1781f2",
                          "Name": "Card",
                          "Transform": {
                            "posX": -11.0000019,
                            "posY": 1.51964009,
                            "posZ": 9.500004,
                            "rotX": 0.0108914394,
                            "rotY": 180.001251,
                            "rotZ": 0.00494845863,
                            "scaleX": 1.0,
                            "scaleY": 1.0,
                            "scaleZ": 1.0
                          },
                          "Nickname": "",
                          "Description": "",
                          "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"87037a\",\n  \"sanity\": 2,\n  \"traits\": \"Scientist. Ally.\",\n  \"type\": \"Asset\"\n}",
                          "AltLookAngle": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0
                          },
                          "ColorDiffuse": {
                            "r": 0.713235259,
                            "g": 0.713235259,
                            "b": 0.713235259
                          },
                          "LayoutGroupSortIndex": 0,
                          "Value": 0,
                          "Locked": false,
                          "Grid": true,
                          "Snap": true,
                          "IgnoreFoW": false,
                          "MeasureMovement": false,
                          "DragSelectable": true,
                          "Autoraise": true,
                          "Sticky": true,
                          "Tooltip": true,
                          "GridProjection": false,
                          "HideWhenFaceDown": true,
                          "Hands": true,
                          "CardID": 1105127,
                          "SidewaysCard": false,
                          "CustomDeck": {
                            "11051": {
                              "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                              "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                              "NumWidth": 10,
                              "NumHeight": 7,
                              "BackIsHidden": true,
                              "UniqueBack": true,
                              "Type": 0
                            }
                          },
                          "LuaScript": "",
                          "LuaScriptState": "",
                          "XmlUI": ""
                        },
                        {
                          "GUID": "1c93ce",
                          "Name": "Card",
                          "Transform": {
                            "posX": -14.4999838,
                            "posY": 1.52003741,
                            "posZ": 10.0000248,
                            "rotX": 0.0108913332,
                            "rotY": 180.002777,
                            "rotZ": 0.00494883,
                            "scaleX": 1.0,
                            "scaleY": 1.0,
                            "scaleZ": 1.0
                          },
                          "Nickname": "",
                          "Description": "",
                          "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"87022\",\n  \"sanity\": 2,\n  \"traits\": \"Scientist. Ally. Present.\",\n  \"type\": \"Asset\"\n}",
                          "AltLookAngle": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0
                          },
                          "ColorDiffuse": {
                            "r": 0.713235259,
                            "g": 0.713235259,
                            "b": 0.713235259
                          },
                          "LayoutGroupSortIndex": 0,
                          "Value": 0,
                          "Locked": false,
                          "Grid": true,
                          "Snap": true,
                          "IgnoreFoW": false,
                          "MeasureMovement": false,
                          "DragSelectable": true,
                          "Autoraise": true,
                          "Sticky": true,
                          "Tooltip": true,
                          "GridProjection": false,
                          "HideWhenFaceDown": true,
                          "Hands": true,
                          "CardID": 1110641,
                          "SidewaysCard": false,
                          "CustomDeck": {
                            "11106": {
                              "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                              "NumWidth": 10,
                              "NumHeight": 7,
                              "BackIsHidden": true,
                              "UniqueBack": false,
                              "Type": 0
                            }
                          },
                          "LuaScript": "",
                          "LuaScriptState": "",
                          "XmlUI": ""
                        },
                        {
                          "GUID": "43c540",
                          "Name": "Card",
                          "Transform": {
                            "posX": -17.5,
                            "posY": 1.77890575,
                            "posZ": 9.5,
                            "rotX": -5.17781928E-06,
                            "rotY": 179.977371,
                            "rotZ": 5.50611325E-08,
                            "scaleX": 1.0,
                            "scaleY": 1.0,
                            "scaleZ": 1.0
                          },
                          "Nickname": "",
                          "Description": "",
                          "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"87021\",\n  \"sanity\": 2,\n  \"traits\": \"Scientist. Ally. Present.\",\n  \"type\": \"Asset\"\n}",
                          "AltLookAngle": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0
                          },
                          "ColorDiffuse": {
                            "r": 0.713235259,
                            "g": 0.713235259,
                            "b": 0.713235259
                          },
                          "LayoutGroupSortIndex": 0,
                          "Value": 0,
                          "Locked": false,
                          "Grid": true,
                          "Snap": true,
                          "IgnoreFoW": false,
                          "MeasureMovement": false,
                          "DragSelectable": true,
                          "Autoraise": true,
                          "Sticky": true,
                          "Tooltip": true,
                          "GridProjection": false,
                          "HideWhenFaceDown": true,
                          "Hands": true,
                          "CardID": 1110640,
                          "SidewaysCard": false,
                          "CustomDeck": {
                            "11106": {
                              "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                              "NumWidth": 10,
                              "NumHeight": 7,
                              "BackIsHidden": true,
                              "UniqueBack": false,
                              "Type": 0
                            }
                          },
                          "LuaScript": "",
                          "LuaScriptState": "",
                          "XmlUI": ""
                        },
                        {
                          "GUID": "906c4a",
                          "Name": "Card",
                          "Transform": {
                            "posX": -20.5,
                            "posY": 1.77890563,
                            "posZ": 9.999991,
                            "rotX": -5.11602457E-06,
                            "rotY": 180.00058,
                            "rotZ": -9.909685E-08,
                            "scaleX": 1.0,
                            "scaleY": 1.0,
                            "scaleZ": 1.0
                          },
                          "Nickname": "Rédemption d'un Ancien Collègue",
                          "Description": "Machination",
                          "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87034\",\n  \"traits\": \"Machination.\",\n  \"type\": \"Story\",\n  \"victory\": 1\n}",
                          "AltLookAngle": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0
                          },
                          "ColorDiffuse": {
                            "r": 0.713235259,
                            "g": 0.713235259,
                            "b": 0.713235259
                          },
                          "LayoutGroupSortIndex": 0,
                          "Value": 0,
                          "Locked": false,
                          "Grid": true,
                          "Snap": true,
                          "IgnoreFoW": false,
                          "MeasureMovement": false,
                          "DragSelectable": true,
                          "Autoraise": true,
                          "Sticky": true,
                          "Tooltip": true,
                          "GridProjection": false,
                          "HideWhenFaceDown": true,
                          "Hands": true,
                          "CardID": 1104906,
                          "SidewaysCard": false,
                          "CustomDeck": {
                            "11049": {
                              "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                              "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                              "NumWidth": 10,
                              "NumHeight": 7,
                              "BackIsHidden": true,
                              "UniqueBack": true,
                              "Type": 0
                            }
                          },
                          "LuaScript": "",
                          "LuaScriptState": "",
                          "XmlUI": ""
                        }
                      ]
                    },
                    {
                      "GUID": "c68b2a",
                      "Name": "Custom_Model_Bag",
                      "Transform": {
                        "posX": -29.5,
                        "posY": 2.41591835,
                        "posZ": 17.0,
                        "rotX": -0.000171173757,
                        "rotY": 179.985352,
                        "rotZ": -0.000165212856,
                        "scaleX": 0.7,
                        "scaleY": 0.7,
                        "scaleZ": 0.7
                      },
                      "Nickname": "Une Alliance Improbable",
                      "Description": "Machination",
                      "GMNotes": "",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 1.0,
                        "g": 1.0,
                        "b": 1.0
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": true,
                      "GridProjection": false,
                      "HideWhenFaceDown": false,
                      "Hands": false,
                      "MaterialIndex": -1,
                      "MeshIndex": -1,
                      "CustomMesh": {
                        "MeshURL": "https://pastebin.com/raw/ALrYhQGb",
                        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/5077277234366558480/31140655872853ACBC44735F25B0EE7E19C72536/",
                        "NormalURL": "",
                        "ColliderURL": "",
                        "Convex": true,
                        "MaterialIndex": 3,
                        "TypeIndex": 6,
                        "CustomShader": {
                          "SpecularColor": {
                            "r": 1.0,
                            "g": 1.0,
                            "b": 1.0
                          },
                          "SpecularIntensity": 0.0,
                          "SpecularSharpness": 2.0,
                          "FresnelStrength": 0.0
                        },
                        "CastShadows": true
                      },
                      "Bag": {
                        "Order": 0
                      },
                      "LuaScript": "-- Utility memory bag by Directsun\r\n-- Version 2.7.0\r\n-- Fork of Memory Bag 2.0 by MrStump\r\n--\r\n-- Want to contribute? Create an issue or fork the code on GitHub and submit a pull request:\r\n-- https://github.com/sunflowermans/TTS-UtilityMemoryBag\r\n\r\n\r\nfunction updateSave()\r\n    local data_to_save = {[\"ml\"]=memoryList}\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n        -- memoryList[guid].rot.x = movedRotation.x\r\n        -- memoryList[guid].rot.y = movedRotation.y\r\n        -- memoryList[guid].rot.z = movedRotation.z\r\n    end\r\n\r\n    --theList[obj.getGUID()] = {\r\n    --    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n    --    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n    --    lock=obj.getLock()\r\n    --}\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n\r\n--Beginning Setup\r\n\r\n\r\n--Make setup button\r\nfunction createSetupButton()\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", {0.75, 0.75, 1})\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\n    -- return getAllObjects()\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1 * 1/self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor +2\r\n            objPos.z = objPos.z * globalScaleFactor\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = {0.75,0.25,0.25,0.6}\r\n            local colorMove = {0,0,1,0.6}\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function=funcName, function_owner=self,\r\n                position=objPos, rotation=rot, height=1000, width=1000,\r\n                color=color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n--Creates submit and cancel buttons\r\nfunction createSetupActionButtons(move)\r\n    self.createButton({\r\n       label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n       position={-1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n       font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    self.createButton({\r\n      label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n      position={-1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n      font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    if move == false then\r\n      self.createButton({\r\n          label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n          position={1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n          font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\r\n        })\r\n\r\n        self.createButton({\r\n            label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n            position={-1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n            font_size=250, color={0,0,0}, font_color={1,1,1}\r\n        })\r\n\r\n        if fresh == false then\r\n            self.createButton({\r\n                label=\"Mise à Jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                position={1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=180, color={0,0,0}, font_color={0.75,0.75,1}\r\n            })\r\n            self.createButton({\r\n                label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                position={1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\r\n            })\r\n        end\r\n    end\r\n\r\n    self.createButton({\r\n        label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n        position={0,0.3,-2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n\r\n--During Setup\r\n\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = {0,0,1,0.6}\r\n    local color = {0,1,0,0.6}\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({index=previousIndex, color=colorMove})\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({index=index, color=color})\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n            lock=obj.getLock(),\r\n            tint=obj.getColorTint()\r\n        }\r\n        obj.highlightOn({0,1,0})\r\n    else\r\n        color = {0.75,0.25,0.25,0.6}\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({index=index, color=color})\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({index=index, color={0,1,0,0.6}})\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n                    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n                    lock=obj.getLock(),\r\n                    tint=obj.getColorTint()\r\n                }\r\n                obj.highlightOn({0,1,0})\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = {0.75,0.25,0.25,0.6}\r\n                self.editButton({index=index, color=color})\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", {1,1,1})\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", {1, 0.25, 0.25})\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", {0.75, 0.75, 1})\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", {0.75, 0.25, 0.25})\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k,v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", {0.25, 0.75, 0.25})\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", {1.0, 0.25, 0.25})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Removed\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", {0.75, 0.75, 1})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\n\r\n--After Setup\r\n\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={0,0.3,2.8}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={2,0.3,0}, rotation={0,90,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---  \r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    local bagObjList = self.getObjects()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid=guid, position=entry.pos, rotation=entry.rot, smooth=false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n\r\n--Utility functions\r\n\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x-p1.x)\r\n    deltaPos.y = (p2.y-p1.y) + yOffset\r\n    deltaPos.z = (p2.z-p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10^(dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample:\r\n{'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'}\r\n--]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend",
                      "LuaScriptState": "{\"ml\":{\"107b72\":{\"lock\":false,\"pos\":{\"x\":35,\"y\":1.55607211589813,\"z\":-8.50010108947754},\"rot\":{\"x\":0.0923844873905182,\"y\":180.003723144531,\"z\":-6.11997020314448E-05},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"3af1ae\":{\"lock\":false,\"pos\":{\"x\":-32.0000076293945,\"y\":1.77890563011169,\"z\":9.9999942779541},\"rot\":{\"x\":-4.87201805299264E-06,\"y\":179.981079101563,\"z\":-1.1390434195846E-07},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"506c91\":{\"lock\":false,\"pos\":{\"x\":-34.5000076293945,\"y\":1.77890563011169,\"z\":9.99998474121094},\"rot\":{\"x\":-5.01832482768805E-06,\"y\":179.977249145508,\"z\":9.17278498491214E-07},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"6977b1\":{\"lock\":false,\"pos\":{\"x\":-19.4999465942383,\"y\":1.77890598773956,\"z\":5.99999332427979},\"rot\":{\"x\":-5.1537035687943E-06,\"y\":179.996765136719,\"z\":180},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e86ec6\":{\"lock\":false,\"pos\":{\"x\":-23.500057220459,\"y\":1.84246289730072,\"z\":6.99996852874756},\"rot\":{\"x\":-0.0001626090524951,\"y\":180.000198364258,\"z\":0.000942527956794947},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}}}}",
                      "XmlUI": "",
                      "ContainedObjects": [
                        {
                          "GUID": "107b72",
                          "Name": "Card",
                          "Transform": {
                            "posX": -10.50031,
                            "posY": 1.53582692,
                            "posZ": 22.5000458,
                            "rotX": 359.496582,
                            "rotY": 180.0017,
                            "rotZ": 0.00572887762,
                            "scaleX": 1.0,
                            "scaleY": 1.0,
                            "scaleZ": 1.0
                          },
                          "Nickname": "Une Alliance Improbable",
                          "Description": "Machination",
                          "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87035\",\n  \"traits\": \"Machination.\",\n  \"type\": \"Story\",\n  \"victory\": 1\n}",
                          "AltLookAngle": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0
                          },
                          "ColorDiffuse": {
                            "r": 0.713235259,
                            "g": 0.713235259,
                            "b": 0.713235259
                          },
                          "LayoutGroupSortIndex": 0,
                          "Value": 0,
                          "Locked": false,
                          "Grid": true,
                          "Snap": true,
                          "IgnoreFoW": false,
                          "MeasureMovement": false,
                          "DragSelectable": true,
                          "Autoraise": true,
                          "Sticky": true,
                          "Tooltip": true,
                          "GridProjection": false,
                          "HideWhenFaceDown": true,
                          "Hands": true,
                          "CardID": 1104905,
                          "SidewaysCard": false,
                          "CustomDeck": {
                            "11049": {
                              "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                              "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                              "NumWidth": 10,
                              "NumHeight": 7,
                              "BackIsHidden": true,
                              "UniqueBack": true,
                              "Type": 0
                            }
                          },
                          "LuaScript": "",
                          "LuaScriptState": "",
                          "XmlUI": ""
                        },
                        {
                          "GUID": "3af1ae",
                          "Name": "Card",
                          "Transform": {
                            "posX": -12.5000048,
                            "posY": 1.52081513,
                            "posZ": 15.0000029,
                            "rotX": 0.0108931409,
                            "rotY": 179.981079,
                            "rotZ": 0.0049447394,
                            "scaleX": 1.0,
                            "scaleY": 1.0,
                            "scaleZ": 1.0
                          },
                          "Nickname": "",
                          "Description": "",
                          "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 1,\n  \"id\": \"87031\",\n  \"sanity\": 2,\n  \"traits\": \"Scientist. Ally. Future.\",\n  \"type\": \"Asset\"\n}",
                          "AltLookAngle": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0
                          },
                          "ColorDiffuse": {
                            "r": 0.713235259,
                            "g": 0.713235259,
                            "b": 0.713235259
                          },
                          "LayoutGroupSortIndex": 0,
                          "Value": 0,
                          "Locked": false,
                          "Grid": true,
                          "Snap": true,
                          "IgnoreFoW": false,
                          "MeasureMovement": false,
                          "DragSelectable": true,
                          "Autoraise": true,
                          "Sticky": true,
                          "Tooltip": true,
                          "GridProjection": false,
                          "HideWhenFaceDown": true,
                          "Hands": true,
                          "CardID": 1110639,
                          "SidewaysCard": false,
                          "CustomDeck": {
                            "11106": {
                              "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                              "NumWidth": 10,
                              "NumHeight": 7,
                              "BackIsHidden": true,
                              "UniqueBack": false,
                              "Type": 0
                            }
                          },
                          "LuaScript": "",
                          "LuaScriptState": "",
                          "XmlUI": ""
                        },
                        {
                          "GUID": "506c91",
                          "Name": "Card",
                          "Transform": {
                            "posX": -14.9999762,
                            "posY": 1.52245677,
                            "posZ": 22.5000229,
                            "rotX": 0.0108935544,
                            "rotY": 179.97728,
                            "rotZ": 0.004943726,
                            "scaleX": 1.0,
                            "scaleY": 1.0,
                            "scaleZ": 1.0
                          },
                          "Nickname": "",
                          "Description": "",
                          "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"87021\",\n  \"sanity\": 2,\n  \"traits\": \"Scientist. Ally. Present.\",\n  \"type\": \"Asset\"\n}",
                          "AltLookAngle": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0
                          },
                          "ColorDiffuse": {
                            "r": 0.713235259,
                            "g": 0.713235259,
                            "b": 0.713235259
                          },
                          "LayoutGroupSortIndex": 0,
                          "Value": 0,
                          "Locked": false,
                          "Grid": true,
                          "Snap": true,
                          "IgnoreFoW": false,
                          "MeasureMovement": false,
                          "DragSelectable": true,
                          "Autoraise": true,
                          "Sticky": true,
                          "Tooltip": true,
                          "GridProjection": false,
                          "HideWhenFaceDown": true,
                          "Hands": true,
                          "CardID": 1110640,
                          "SidewaysCard": false,
                          "CustomDeck": {
                            "11106": {
                              "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                              "NumWidth": 10,
                              "NumHeight": 7,
                              "BackIsHidden": true,
                              "UniqueBack": false,
                              "Type": 0
                            }
                          },
                          "LuaScript": "",
                          "LuaScriptState": "",
                          "XmlUI": ""
                        },
                        {
                          "GUID": "6977b1",
                          "Name": "Card",
                          "Transform": {
                            "posX": -12.5000248,
                            "posY": 1.52167618,
                            "posZ": 19.5000153,
                            "rotX": 0.0108162947,
                            "rotY": 179.997238,
                            "rotZ": 180.004532,
                            "scaleX": 1.0,
                            "scaleY": 1.0,
                            "scaleZ": 1.0
                          },
                          "Nickname": "",
                          "Description": "",
                          "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"87037a\",\n  \"sanity\": 2,\n  \"traits\": \"Scientist. Ally.\",\n  \"type\": \"Asset\"\n}",
                          "AltLookAngle": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0
                          },
                          "ColorDiffuse": {
                            "r": 0.713235259,
                            "g": 0.713235259,
                            "b": 0.713235259
                          },
                          "LayoutGroupSortIndex": 0,
                          "Value": 0,
                          "Locked": false,
                          "Grid": true,
                          "Snap": true,
                          "IgnoreFoW": false,
                          "MeasureMovement": false,
                          "DragSelectable": true,
                          "Autoraise": true,
                          "Sticky": true,
                          "Tooltip": true,
                          "GridProjection": false,
                          "HideWhenFaceDown": true,
                          "Hands": true,
                          "CardID": 1105127,
                          "SidewaysCard": false,
                          "CustomDeck": {
                            "11051": {
                              "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                              "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                              "NumWidth": 10,
                              "NumHeight": 7,
                              "BackIsHidden": true,
                              "UniqueBack": true,
                              "Type": 0
                            }
                          },
                          "LuaScript": "",
                          "LuaScriptState": "",
                          "XmlUI": ""
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "GUID": "63c308",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": -33.5007439,
            "posY": 1.83999932,
            "posZ": 24.0086384,
            "rotX": -4.95919267E-06,
            "rotY": 179.9938,
            "rotZ": -1.37177921E-07,
            "scaleX": 0.7,
            "scaleY": 0.7,
            "scaleZ": 0.7
          },
          "Nickname": "Mode Groupe Unique",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "CustomMesh": {
            "MeshURL": "https://pastebin.com/raw/ALrYhQGb",
            "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/1932636510528590924/9B20F28E3CE6172A74394ADD06861FC5414F9FE8/",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "-- Utility memory bag by Directsun\r\n-- Version 2.7.0\r\n-- Fork of Memory Bag 2.0 by MrStump\r\n--\r\n-- Want to contribute? Create an issue or fork the code on GitHub and submit a pull request:\r\n-- https://github.com/sunflowermans/TTS-UtilityMemoryBag\r\n\r\n\r\nfunction updateSave()\r\n    local data_to_save = {[\"ml\"]=memoryList}\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n        -- memoryList[guid].rot.x = movedRotation.x\r\n        -- memoryList[guid].rot.y = movedRotation.y\r\n        -- memoryList[guid].rot.z = movedRotation.z\r\n    end\r\n\r\n    --theList[obj.getGUID()] = {\r\n    --    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n    --    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n    --    lock=obj.getLock()\r\n    --}\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n\r\n--Beginning Setup\r\n\r\n\r\n--Make setup button\r\nfunction createSetupButton()\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", {0.75, 0.75, 1})\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\n    -- return getAllObjects()\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1 * 1/self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor +2\r\n            objPos.z = objPos.z * globalScaleFactor\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = {0.75,0.25,0.25,0.6}\r\n            local colorMove = {0,0,1,0.6}\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function=funcName, function_owner=self,\r\n                position=objPos, rotation=rot, height=1000, width=1000,\r\n                color=color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n--Creates submit and cancel buttons\r\nfunction createSetupActionButtons(move)\r\n    self.createButton({\r\n       label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n       position={-1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n       font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    self.createButton({\r\n      label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n      position={-1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n      font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    if move == false then\r\n      self.createButton({\r\n          label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n          position={1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n          font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\r\n        })\r\n\r\n        self.createButton({\r\n            label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n            position={-1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n            font_size=250, color={0,0,0}, font_color={1,1,1}\r\n        })\r\n\r\n        if fresh == false then\r\n            self.createButton({\r\n                label=\"Mise à Jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                position={1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=180, color={0,0,0}, font_color={0.75,0.75,1}\r\n            })\r\n            self.createButton({\r\n                label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                position={1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\r\n            })\r\n        end\r\n    end\r\n\r\n    self.createButton({\r\n        label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n        position={0,0.3,-2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n\r\n--During Setup\r\n\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = {0,0,1,0.6}\r\n    local color = {0,1,0,0.6}\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({index=previousIndex, color=colorMove})\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({index=index, color=color})\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n            lock=obj.getLock(),\r\n            tint=obj.getColorTint()\r\n        }\r\n        obj.highlightOn({0,1,0})\r\n    else\r\n        color = {0.75,0.25,0.25,0.6}\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({index=index, color=color})\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({index=index, color={0,1,0,0.6}})\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n                    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n                    lock=obj.getLock(),\r\n                    tint=obj.getColorTint()\r\n                }\r\n                obj.highlightOn({0,1,0})\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = {0.75,0.25,0.25,0.6}\r\n                self.editButton({index=index, color=color})\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", {1,1,1})\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", {1, 0.25, 0.25})\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", {0.75, 0.75, 1})\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", {0.75, 0.25, 0.25})\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k,v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", {0.25, 0.75, 0.25})\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", {1.0, 0.25, 0.25})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Removed\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", {0.75, 0.75, 1})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\n\r\n--After Setup\r\n\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={0,0.3,2.8}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={2,0.3,0}, rotation={0,90,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---  \r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    local bagObjList = self.getObjects()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid=guid, position=entry.pos, rotation=entry.rot, smooth=false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n\r\n--Utility functions\r\n\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x-p1.x)\r\n    deltaPos.y = (p2.y-p1.y) + yOffset\r\n    deltaPos.z = (p2.z-p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10^(dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample:\r\n{'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'}\r\n--]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend",
          "LuaScriptState": "{\"ml\":{\"1067a4\":{\"lock\":false,\"pos\":{\"x\":-26,\"y\":1.76629984378815,\"z\":20},\"rot\":{\"x\":4.90871207148302E-06,\"y\":0.000233057013247162,\"z\":7.65027792226647E-08},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}},\"2a823b\":{\"lock\":false,\"pos\":{\"x\":-33.0000038146973,\"y\":1.76530027389526,\"z\":16.9999980926514},\"rot\":{\"x\":-5.18173283126089E-06,\"y\":179.986633300781,\"z\":8.31077784368972E-08},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"39d218\":{\"lock\":false,\"pos\":{\"x\":-22.4999980926514,\"y\":1.76629984378815,\"z\":20.0000019073486},\"rot\":{\"x\":5.35624849362648E-06,\"y\":-9.17828510864638E-05,\"z\":-1.05583175979973E-07},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}},\"63027a\":{\"lock\":false,\"pos\":{\"x\":-19.9999961853027,\"y\":1.83529961109161,\"z\":24.0000038146973},\"rot\":{\"x\":-2.49158961196372E-06,\"y\":179.990203857422,\"z\":6.24646929736628E-07},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"b042a5\":{\"lock\":false,\"pos\":{\"x\":-22.9999961853027,\"y\":1.76629936695099,\"z\":25.5000038146973},\"rot\":{\"x\":5.27182737641851E-06,\"y\":-0.00010300687426934,\"z\":7.7373456974783E-08},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}},\"c72403\":{\"lock\":false,\"pos\":{\"x\":-25.9999961853027,\"y\":1.83529949188232,\"z\":24.0000019073486},\"rot\":{\"x\":-5.17955413670279E-06,\"y\":180.001190185547,\"z\":1.34551532937621E-06},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"cade6c\":{\"lock\":false,\"pos\":{\"x\":5.5,\"y\":1.51888048648834,\"z\":13},\"rot\":{\"x\":0.01089165546,\"y\":179.998306274414,\"z\":0.00494808051735163},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"f3db90\":{\"lock\":false,\"pos\":{\"x\":-22.9999961853027,\"y\":1.83529961109161,\"z\":24.0000038146973},\"rot\":{\"x\":-4.68025109512382E-06,\"y\":179.989715576172,\"z\":3.05738069528161E-07},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"f9e05e\":{\"lock\":false,\"pos\":{\"x\":-29,\"y\":1.76530027389526,\"z\":17},\"rot\":{\"x\":-4.93075094709639E-06,\"y\":179.999481201172,\"z\":3.02360490422871E-07},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}}}}",
          "XmlUI": "",
          "ContainedObjects": [
            {
              "GUID": "1067a4",
              "Name": "Custom_Model",
              "Transform": {
                "posX": -26.0,
                "posY": 1.77099967,
                "posZ": 20.0,
                "rotX": 5.18336628E-06,
                "rotY": 0.000340235129,
                "rotZ": 7.114897E-08,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "Text Tool",
              "Description": "",
              "GMNotes": "",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 0.0,
                "g": 0.0,
                "b": 0.0,
                "a": 0.0
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": false,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": false,
              "Tooltip": false,
              "GridProjection": false,
              "HideWhenFaceDown": false,
              "Hands": false,
              "CustomMesh": {
                "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/1478820768302617365/27883B7913E0E69143C3AA03493B7E7C4E8C29C0/",
                "DiffuseURL": "",
                "NormalURL": "",
                "ColliderURL": "",
                "Convex": true,
                "MaterialIndex": 1,
                "TypeIndex": 0,
                "CastShadows": true
              },
              "LuaScript": "-- Code for bag to identify text tool objects\r\nmovableTextTool_cowgoesmoo33 = true\r\n\r\n-- Number of characters before the text box width expands.\r\nEXPAND_INTERVAL = 20\r\n\r\n-- This table controls what is passed between save/load\r\ndata = {}\r\n\r\nfunction onLoad(saved_data)\r\n  if saved_data ~= '' then\r\n    data = JSON.decode(saved_data)\r\n    if data.text ~= '' then\r\n      self.interactable = data.interactable\r\n      staticMode()\r\n      return\r\n    end\r\n  else\r\n    data = {size=200, color=Color(0,0,0), text='', interactable=true,\r\n        enter_to_finish=false, autolock=false, autolift=false,\r\n        hover_height=0.05, box_transparency=1}\r\n  end\r\n\r\n  inputMode()\r\nend\r\n\r\n-- True if in the middle of delay after pressing Enter (with enter_to_finish on)\r\nfinishing = false\r\nfunction input_func(obj, color, input, stillEditing)\r\n  local params = getBox(input)\r\n  if params then\r\n    params.value = input\r\n    self.editInput(params)\r\n  end\r\n\r\n  if not stillEditing then\r\n    data.text = input\r\n    updateState()\r\n    if input ~= '' then staticMode(color) end\r\n  elseif data.enter_to_finish then\r\n    -- If enter is pressed: remove last newline and force finish\r\n    if not finishing and input:sub(-1) == '\\n' then\r\n      finishing = true\r\n      -- Delay to avoid user's Enter keypress being detected (opens chat box)\r\n      Wait.frames(function()\r\n        input = input:sub(1, -2)\r\n        data.text = input\r\n        updateState()\r\n        if input ~= '' then staticMode(color) else inputMode() end\r\n        finishing = false\r\n      end, 10)\r\n    end\r\n  end\r\nend\r\n\r\n-- When the inpupt box appears and lets the player type in it.\r\nfunction inputMode()\r\n  self.clearContextMenu()\r\n  self.clearInputs()\r\n  self.clearButtons()\r\n\r\n  local size = getBox(data.text, true)\r\n\r\n  self.createInput({\r\n    input_function = \"input_func\",\r\n    function_owner = self,\r\n    label          = \"Type Here\",\r\n    alignment      = 3,\r\n    position       = {x=0, y=data.hover_height, z=0},\r\n    rotation       = {0, 180, 0},\r\n    width          = size.width,\r\n    height         = size.height,\r\n    color          = getBackground(data.color),\r\n    font_color     = data.color,\r\n    font_size      = data.size,\r\n    value          = data.text,\r\n  })\r\n\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\nend\r\n\r\n-- When the input box disappears and displays the text.\r\nfunction staticMode(player)\r\n  self.clearContextMenu()\r\n  if data.autolock then\r\n    self.locked = true\r\n  end\r\n  if self.getInputs() and #self.getInputs() ~= 0 then\r\n    self.removeInput(0)\r\n  end\r\n\r\n  -- Clear from selecting player\r\n  if player then\r\n    self.removeFromPlayerSelection(player)\r\n  end\r\n\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  self.createButton({\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=self,\r\n    position={0,data.hover_height,0}, rotation={0,180,0}, height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  })\r\n\r\n  self.addContextMenuItem('Edit Text', function(color)\r\n    self.removeFromPlayerSelection(color)\r\n    inputMode()\r\n  end)\r\n  self.addContextMenuItem('Clear', function(color)\r\n    applyMultiple(color, 'clear', _, true)\r\n  end)\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\n  self.addContextMenuItem('Permanently Attach', attemptAttach)\r\n  self.addContextMenuItem('Permalock', function(color)\r\n    applyMultiple(color, 'permalock', _, true)\r\n  end)\r\nend\r\n\r\nfunction changeSize(params)\r\n  local delta = params[1]\r\n  local newSize = data.size + delta\r\n  if newSize > 800  or newSize < 50 then\r\n    return\r\n  end\r\n  data.size = newSize\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_size=data.size})\r\n  else\r\n    local size = getBox(data.text, true)\r\n    self.editInput({width=size.width, height=size.height, font_size=data.size})\r\n  end\r\nend\r\n\r\nfunction setColor(params)\r\n  if params and params[1] then\r\n    data.color = params[1]\r\n  else\r\n    data.color = self.getColorTint():setAt('a', 1) -- Take on color of object tint\r\n  end\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_color=data.color})\r\n  else\r\n    self.editInput({font_color=data.color, color=getBackground(data.color)})\r\n  end\r\nend\r\n\r\nfunction getBackground(color) --determines whether to use black or white depending on luminance\r\n  local r,g,b = Color(color):get()\r\n\r\n  local lum = 0.2126*r + 0.7152*g + 0.0722*b\r\n  if lum > 0.75 then\r\n    return {0.2,0.2,0.2, data.box_transparency}\r\n  else\r\n    return {1,1,1, data.box_transparency}\r\n  end\r\nend\r\n\r\nfunction clear()\r\n  data.text = ''\r\n  updateState()\r\n  inputMode()\r\nend\r\n\r\nfunction permalock()\r\n  self.interactable = false\r\n  data.interactable = false\r\n  updateState()\r\nend\r\n\r\nlocal target_script = [[\r\nfunction onLoad(script_state)\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    for _,entry in ipairs(state) do\r\n      self.createButton(entry)\r\n    end\r\n    self.addContextMenuItem('Clear All Text', function(color)\r\n      self.clearContextMenu()\r\n      self.clearButtons()\r\n      self.script_state = ''\r\n      self.script_code = ''\r\n    end)\r\n  end\r\nend\r\n]]\r\n\r\nfunction attemptAttach(player_color)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  local attachee\r\n  local attachers = {}\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if obj ~= self then\r\n        table.insert(attachers, obj)\r\n      end\r\n    else\r\n      if attachee then\r\n        broadcastToColor(\"More than one target selected.\", player_color)\r\n        return\r\n      else\r\n        attachee = obj\r\n      end\r\n    end\r\n  end\r\n  if attachee then\r\n    local code = attachee.script_code\r\n    if code and code ~= '' and code ~= target_script then\r\n      broadcastToColor(\"Warning: script on card has been overriden. Rewind time to undo.\", player_color)\r\n    end\r\n    for i,attacher in ipairs(attachers) do\r\n      attacher.call('attach', {target = attachee})\r\n    end\r\n    attach({target = attachee})\r\n    local type, flip = attachee.type, attachee.getRotation().z\r\n    if (type == 'Card' or type == 'Deck') and flip > 175 and flip < 185 then\r\n      broadcastToColor(\"Warning: text will not display if card or deck is facing down.\", player_color)\r\n    end\r\n  else\r\n    broadcastToColor(\"You must have a target object in your selection (using click-and-drag or Ctrl+Click) to use this option.\", player_color)\r\n  end\r\nend\r\n\r\nfunction attach(params)\r\n  local target = params.target\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  local textRotation = self.getRotation():sub(target.getRotation())\r\n    :add(Vector(180, 0, 180))\r\n\r\n  local textPosition = target.positionToLocal(\r\n    self.getPosition():add(Vector(0, data.hover_height, 0))\r\n  )\r\n  textPosition.x = -textPosition.x\r\n\r\n  local textScale = {}\r\n  textScale.x = self.getScale().x / target.getScale().x\r\n  textScale.y = self.getScale().x / target.getScale().y\r\n  textScale.z = self.getScale().x / target.getScale().z\r\n\r\n  local details = {\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=nil,\r\n    position=textPosition,\r\n    rotation=textRotation,\r\n    scale=textScale,\r\n    height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  }\r\n\r\n  target.createButton(details)\r\n\r\n  local script_state = target.script_state\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    table.insert(state, details)\r\n    target.script_state = JSON.encode(state)\r\n  else\r\n    target.script_state = JSON.encode({[1]=details})\r\n  end\r\n\r\n  target.script_code = target_script\r\n\r\n  self.destruct()\r\nend\r\n\r\nfunction applyMultiple(player_color, func_string, params, static_only)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if not static_only or obj.call('isStatic') then\r\n        obj.call(func_string, params)\r\n      end\r\n    end\r\n  end\r\nend\r\n\r\nfunction isStatic()\r\n  local input = self.getInputs()\r\n  return not input or #input == 0\r\nend\r\n\r\nfunction getBox(input, force)\r\n  local maxLength, lineCount = EXPAND_INTERVAL, 1\r\n  local lineLength = 0\r\n  for i = 1, #input do\r\n    local c = input:sub(i,i)\r\n    if c == '\\n' then\r\n      lineCount = lineCount + 1\r\n      if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n      lineLength = 0\r\n    else\r\n      lineLength = lineLength + 1\r\n    end\r\n  end\r\n  if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n\r\n  newWidth = data.size * maxLength * 0.9\r\n  newHeight = data.size * lineCount + 23\r\n\r\n  if force or boxWidth ~= newWidth or boxHeight ~= newHeight then\r\n    boxWidth, boxHeight = newWidth, newHeight\r\n    return {width = boxWidth, height = boxHeight}\r\n  end\r\n  return nil\r\nend\r\n\r\ntemp_lift = nil\r\nfunction onPickUp(player_color)\r\n  if data.autolift then\r\n    local player = Player[player_color]\r\n    temp_lift = player.lift_height\r\n    player.lift_height = 0\r\n  end\r\nend\r\n\r\nfunction onDrop(player_color)\r\n  if data.autolift and temp_lift then\r\n    Player[player_color].lift_height = temp_lift\r\n  end\r\nend\r\n\r\n-- Should be called every time data is modified, allows info to be saved on copy/paste\r\nfunction updateState()\r\n  self.script_state = JSON.encode(data)\r\nend\r\n\r\nfunction onSave()\r\n  self.script_state = JSON.encode(data)\r\n  return self.script_state\r\nend",
              "LuaScriptState": "{\"autolift\":false,\"autolock\":false,\"box_transparency\":1,\"color\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1},\"enter_to_finish\":false,\"hover_height\":0.05,\"interactable\":true,\"size\":250,\"text\":\"3)\"}",
              "XmlUI": ""
            },
            {
              "GUID": "2a823b",
              "Name": "Custom_Model_Bag",
              "Transform": {
                "posX": -33.0000076,
                "posY": 1.77000034,
                "posZ": 16.9999962,
                "rotX": -4.017133E-06,
                "rotY": 179.986679,
                "rotZ": -2.32131E-06,
                "scaleX": 1.0,
                "scaleY": 0.562042058,
                "scaleZ": 1.0
              },
              "Nickname": "Complots",
              "Description": "",
              "GMNotes": "",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": true,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": true,
              "Tooltip": true,
              "GridProjection": false,
              "HideWhenFaceDown": false,
              "Hands": false,
              "MaterialIndex": -1,
              "MeshIndex": -1,
              "CustomMesh": {
                "MeshURL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/advboxes/tuckbox_h_MSH.obj",
                "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/1983303656990210870/D2994AC54A968C74968E19B4F03195BC3664AEE5/",
                "NormalURL": "",
                "ColliderURL": "",
                "Convex": true,
                "MaterialIndex": 3,
                "TypeIndex": 6,
                "CustomShader": {
                  "SpecularColor": {
                    "r": 1.0,
                    "g": 1.0,
                    "b": 1.0
                  },
                  "SpecularIntensity": 0.0,
                  "SpecularSharpness": 2.0,
                  "FresnelStrength": 0.0
                },
                "CastShadows": true
              },
              "Bag": {
                "Order": 2
              },
              "LuaScript": "",
              "LuaScriptState": "",
              "XmlUI": "",
              "ContainedObjects": [
                {
                  "GUID": "de50fc",
                  "Name": "Custom_Model_Bag",
                  "Transform": {
                    "posX": -34.0,
                    "posY": 2.41590643,
                    "posZ": 17.5,
                    "rotX": -0.0008779993,
                    "rotY": 180.019562,
                    "rotZ": -0.0022020943,
                    "scaleX": 0.7,
                    "scaleY": 0.7,
                    "scaleZ": 0.7
                  },
                  "Nickname": "Indicibles Abominations",
                  "Description": "Complot",
                  "GMNotes": "",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 1.0,
                    "g": 1.0,
                    "b": 1.0
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": true,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": true,
                  "Tooltip": true,
                  "GridProjection": false,
                  "HideWhenFaceDown": false,
                  "Hands": false,
                  "MaterialIndex": -1,
                  "MeshIndex": -1,
                  "CustomMesh": {
                    "MeshURL": "https://pastebin.com/raw/ALrYhQGb",
                    "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/5077277234366558480/31140655872853ACBC44735F25B0EE7E19C72536/",
                    "NormalURL": "",
                    "ColliderURL": "",
                    "Convex": true,
                    "MaterialIndex": 3,
                    "TypeIndex": 6,
                    "CustomShader": {
                      "SpecularColor": {
                        "r": 1.0,
                        "g": 1.0,
                        "b": 1.0
                      },
                      "SpecularIntensity": 0.0,
                      "SpecularSharpness": 2.0,
                      "FresnelStrength": 0.0
                    },
                    "CastShadows": true
                  },
                  "Bag": {
                    "Order": 0
                  },
                  "LuaScript": "-- Utility memory bag by Directsun\r\n-- Version 2.7.0\r\n-- Fork of Memory Bag 2.0 by MrStump\r\n--\r\n-- Want to contribute? Create an issue or fork the code on GitHub and submit a pull request:\r\n-- https://github.com/sunflowermans/TTS-UtilityMemoryBag\r\n\r\n\r\nfunction updateSave()\r\n    local data_to_save = {[\"ml\"]=memoryList}\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n        -- memoryList[guid].rot.x = movedRotation.x\r\n        -- memoryList[guid].rot.y = movedRotation.y\r\n        -- memoryList[guid].rot.z = movedRotation.z\r\n    end\r\n\r\n    --theList[obj.getGUID()] = {\r\n    --    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n    --    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n    --    lock=obj.getLock()\r\n    --}\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n\r\n--Beginning Setup\r\n\r\n\r\n--Make setup button\r\nfunction createSetupButton()\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", {0.75, 0.75, 1})\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\n    -- return getAllObjects()\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1 * 1/self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor +2\r\n            objPos.z = objPos.z * globalScaleFactor\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = {0.75,0.25,0.25,0.6}\r\n            local colorMove = {0,0,1,0.6}\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function=funcName, function_owner=self,\r\n                position=objPos, rotation=rot, height=1000, width=1000,\r\n                color=color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n--Creates submit and cancel buttons\r\nfunction createSetupActionButtons(move)\r\n    self.createButton({\r\n       label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n       position={-1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n       font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    self.createButton({\r\n      label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n      position={-1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n      font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    if move == false then\r\n      self.createButton({\r\n          label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n          position={1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n          font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\r\n        })\r\n\r\n        self.createButton({\r\n            label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n            position={-1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n            font_size=250, color={0,0,0}, font_color={1,1,1}\r\n        })\r\n\r\n        if fresh == false then\r\n            self.createButton({\r\n                label=\"Mise à Jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                position={1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=180, color={0,0,0}, font_color={0.75,0.75,1}\r\n            })\r\n            self.createButton({\r\n                label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                position={1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\r\n            })\r\n        end\r\n    end\r\n\r\n    self.createButton({\r\n        label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n        position={0,0.3,-2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n\r\n--During Setup\r\n\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = {0,0,1,0.6}\r\n    local color = {0,1,0,0.6}\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({index=previousIndex, color=colorMove})\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({index=index, color=color})\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n            lock=obj.getLock(),\r\n            tint=obj.getColorTint()\r\n        }\r\n        obj.highlightOn({0,1,0})\r\n    else\r\n        color = {0.75,0.25,0.25,0.6}\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({index=index, color=color})\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({index=index, color={0,1,0,0.6}})\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n                    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n                    lock=obj.getLock(),\r\n                    tint=obj.getColorTint()\r\n                }\r\n                obj.highlightOn({0,1,0})\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = {0.75,0.25,0.25,0.6}\r\n                self.editButton({index=index, color=color})\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", {1,1,1})\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", {1, 0.25, 0.25})\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", {0.75, 0.75, 1})\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", {0.75, 0.25, 0.25})\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k,v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", {0.25, 0.75, 0.25})\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", {1.0, 0.25, 0.25})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Removed\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", {0.75, 0.75, 1})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\n\r\n--After Setup\r\n\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={0,0.3,2.8}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={2,0.3,0}, rotation={0,90,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---  \r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    local bagObjList = self.getObjects()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid=guid, position=entry.pos, rotation=entry.rot, smooth=false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n\r\n--Utility functions\r\n\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x-p1.x)\r\n    deltaPos.y = (p2.y-p1.y) + yOffset\r\n    deltaPos.z = (p2.z-p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10^(dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample:\r\n{'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'}\r\n--]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend",
                  "LuaScriptState": "{\"ml\":{\"7972d3\":{\"lock\":false,\"pos\":{\"x\":-24.5,\"y\":1.7789,\"z\":2.5},\"rot\":{\"x\":0,\"y\":179.9754,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"a985e3\":{\"lock\":false,\"pos\":{\"x\":30.5,\"y\":1.5561,\"z\":-8.5},\"rot\":{\"x\":0.0942,\"y\":180.001,\"z\":180.0002},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}}}}",
                  "XmlUI": "",
                  "ContainedObjects": [
                    {
                      "GUID": "7972d3",
                      "Name": "Card",
                      "Transform": {
                        "posX": -32.500267,
                        "posY": 1.797866,
                        "posZ": 13.00006,
                        "rotX": -6.59672151E-05,
                        "rotY": 179.980331,
                        "rotZ": 358.958069,
                        "scaleX": 1.0,
                        "scaleY": 1.0,
                        "scaleZ": 1.0
                      },
                      "Nickname": "",
                      "Description": "",
                      "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": -2,\n  \"id\": \"87043\",\n  \"traits\": \"Ancient One. Tindalos. Elite.\",\n  \"type\": \"Enemy\",\n  \"victory\": 0\n}",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 0.713235259,
                        "g": 0.713235259,
                        "b": 0.713235259
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": true,
                      "GridProjection": false,
                      "HideWhenFaceDown": true,
                      "Hands": true,
                      "CardID": 1110604,
                      "SidewaysCard": false,
                      "CustomDeck": {
                        "11106": {
                          "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                          "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                          "NumWidth": 10,
                          "NumHeight": 7,
                          "BackIsHidden": true,
                          "UniqueBack": false,
                          "Type": 0
                        }
                      },
                      "LuaScript": "",
                      "LuaScriptState": "",
                      "XmlUI": ""
                    },
                    {
                      "GUID": "a985e3",
                      "Name": "Card",
                      "Transform": {
                        "posX": -31.0000477,
                        "posY": 1.77888858,
                        "posZ": 11.4999952,
                        "rotX": 0.000167531893,
                        "rotY": 180.000839,
                        "rotZ": 180.001175,
                        "scaleX": 1.0,
                        "scaleY": 1.0,
                        "scaleZ": 1.0
                      },
                      "Nickname": "Indicibles Abominations",
                      "Description": "Complot",
                      "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87042\",\n  \"traits\": \"Plot.\",\n  \"type\": \"Story\",\n  \"victory\": 1\n}",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 0.713235259,
                        "g": 0.713235259,
                        "b": 0.713235259
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": true,
                      "GridProjection": false,
                      "HideWhenFaceDown": true,
                      "Hands": true,
                      "CardID": 1104902,
                      "SidewaysCard": false,
                      "CustomDeck": {
                        "11049": {
                          "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                          "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                          "NumWidth": 10,
                          "NumHeight": 7,
                          "BackIsHidden": true,
                          "UniqueBack": true,
                          "Type": 0
                        }
                      },
                      "LuaScript": "",
                      "LuaScriptState": "",
                      "XmlUI": ""
                    }
                  ]
                },
                {
                  "GUID": "9d0d3e",
                  "Name": "Custom_Model_Bag",
                  "Transform": {
                    "posX": -36.0,
                    "posY": 2.41422653,
                    "posZ": 20.5,
                    "rotX": -0.000117357195,
                    "rotY": 179.988037,
                    "rotZ": 0.0001680851,
                    "scaleX": 0.700000048,
                    "scaleY": 0.7,
                    "scaleZ": 0.700000048
                  },
                  "Nickname": "Problèmes avec la Pègre",
                  "Description": "Complot",
                  "GMNotes": "",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 1.0,
                    "g": 1.0,
                    "b": 1.0
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": true,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": true,
                  "Tooltip": true,
                  "GridProjection": false,
                  "HideWhenFaceDown": false,
                  "Hands": false,
                  "MaterialIndex": -1,
                  "MeshIndex": -1,
                  "CustomMesh": {
                    "MeshURL": "https://pastebin.com/raw/ALrYhQGb",
                    "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/5077277234366558480/31140655872853ACBC44735F25B0EE7E19C72536/",
                    "NormalURL": "",
                    "ColliderURL": "",
                    "Convex": true,
                    "MaterialIndex": 3,
                    "TypeIndex": 6,
                    "CustomShader": {
                      "SpecularColor": {
                        "r": 1.0,
                        "g": 1.0,
                        "b": 1.0
                      },
                      "SpecularIntensity": 0.0,
                      "SpecularSharpness": 2.0,
                      "FresnelStrength": 0.0
                    },
                    "CastShadows": true
                  },
                  "Bag": {
                    "Order": 0
                  },
                  "LuaScript": "-- Utility memory bag by Directsun\r\n-- Version 2.7.0\r\n-- Fork of Memory Bag 2.0 by MrStump\r\n--\r\n-- Want to contribute? Create an issue or fork the code on GitHub and submit a pull request:\r\n-- https://github.com/sunflowermans/TTS-UtilityMemoryBag\r\n\r\n\r\nfunction updateSave()\r\n    local data_to_save = {[\"ml\"]=memoryList}\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n        -- memoryList[guid].rot.x = movedRotation.x\r\n        -- memoryList[guid].rot.y = movedRotation.y\r\n        -- memoryList[guid].rot.z = movedRotation.z\r\n    end\r\n\r\n    --theList[obj.getGUID()] = {\r\n    --    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n    --    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n    --    lock=obj.getLock()\r\n    --}\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n\r\n--Beginning Setup\r\n\r\n\r\n--Make setup button\r\nfunction createSetupButton()\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", {0.75, 0.75, 1})\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\n    -- return getAllObjects()\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1 * 1/self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor +2\r\n            objPos.z = objPos.z * globalScaleFactor\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = {0.75,0.25,0.25,0.6}\r\n            local colorMove = {0,0,1,0.6}\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function=funcName, function_owner=self,\r\n                position=objPos, rotation=rot, height=1000, width=1000,\r\n                color=color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n--Creates submit and cancel buttons\r\nfunction createSetupActionButtons(move)\r\n    self.createButton({\r\n       label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n       position={-1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n       font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    self.createButton({\r\n      label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n      position={-1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n      font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    if move == false then\r\n      self.createButton({\r\n          label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n          position={1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n          font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\r\n        })\r\n\r\n        self.createButton({\r\n            label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n            position={-1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n            font_size=250, color={0,0,0}, font_color={1,1,1}\r\n        })\r\n\r\n        if fresh == false then\r\n            self.createButton({\r\n                label=\"Mise à Jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                position={1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=180, color={0,0,0}, font_color={0.75,0.75,1}\r\n            })\r\n            self.createButton({\r\n                label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                position={1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\r\n            })\r\n        end\r\n    end\r\n\r\n    self.createButton({\r\n        label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n        position={0,0.3,-2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n\r\n--During Setup\r\n\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = {0,0,1,0.6}\r\n    local color = {0,1,0,0.6}\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({index=previousIndex, color=colorMove})\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({index=index, color=color})\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n            lock=obj.getLock(),\r\n            tint=obj.getColorTint()\r\n        }\r\n        obj.highlightOn({0,1,0})\r\n    else\r\n        color = {0.75,0.25,0.25,0.6}\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({index=index, color=color})\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({index=index, color={0,1,0,0.6}})\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n                    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n                    lock=obj.getLock(),\r\n                    tint=obj.getColorTint()\r\n                }\r\n                obj.highlightOn({0,1,0})\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = {0.75,0.25,0.25,0.6}\r\n                self.editButton({index=index, color=color})\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", {1,1,1})\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", {1, 0.25, 0.25})\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", {0.75, 0.75, 1})\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", {0.75, 0.25, 0.25})\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k,v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", {0.25, 0.75, 0.25})\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", {1.0, 0.25, 0.25})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Removed\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", {0.75, 0.75, 1})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\n\r\n--After Setup\r\n\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={0,0.3,2.8}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={2,0.3,0}, rotation={0,90,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---  \r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    local bagObjList = self.getObjects()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid=guid, position=entry.pos, rotation=entry.rot, smooth=false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n\r\n--Utility functions\r\n\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x-p1.x)\r\n    deltaPos.y = (p2.y-p1.y) + yOffset\r\n    deltaPos.z = (p2.z-p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10^(dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample:\r\n{'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'}\r\n--]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend",
                  "LuaScriptState": "{\"ml\":{\"6043d5\":{\"lock\":false,\"pos\":{\"x\":30.5,\"y\":1.5561,\"z\":-8.5},\"rot\":{\"x\":0.0942,\"y\":180.0055,\"z\":-0.0001},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"8e3ec4\":{\"lock\":false,\"pos\":{\"x\":-27,\"y\":1.7789,\"z\":2.5},\"rot\":{\"x\":0,\"y\":179.9804,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"d0f686\":{\"lock\":false,\"pos\":{\"x\":-24.5,\"y\":1.8007,\"z\":2.5},\"rot\":{\"x\":0,\"y\":180,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}}}}",
                  "XmlUI": "",
                  "ContainedObjects": [
                    {
                      "GUID": "6043d5",
                      "Name": "Card",
                      "Transform": {
                        "posX": -38.0,
                        "posY": 1.49346459,
                        "posZ": 9.500001,
                        "rotX": 8.704931E-09,
                        "rotY": 180.0016,
                        "rotZ": -1.19507021E-07,
                        "scaleX": 1.0,
                        "scaleY": 1.0,
                        "scaleZ": 1.0
                      },
                      "Nickname": "Problèmes avec la Pègre",
                      "Description": "Complot",
                      "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87039\",\n  \"traits\": \"Plot.\",\n  \"type\": \"Story\",\n  \"victory\": 1\n}",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 0.713235259,
                        "g": 0.713235259,
                        "b": 0.713235259
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": true,
                      "GridProjection": false,
                      "HideWhenFaceDown": true,
                      "Hands": true,
                      "CardID": 1104903,
                      "SidewaysCard": false,
                      "CustomDeck": {
                        "11049": {
                          "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                          "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                          "NumWidth": 10,
                          "NumHeight": 7,
                          "BackIsHidden": true,
                          "UniqueBack": true,
                          "Type": 0
                        }
                      },
                      "LuaScript": "",
                      "LuaScriptState": "",
                      "XmlUI": ""
                    },
                    {
                      "GUID": "8e3ec4",
                      "Name": "Card",
                      "Transform": {
                        "posX": -33.0000343,
                        "posY": 1.77890635,
                        "posZ": 1.99997294,
                        "rotX": -4.95640052E-06,
                        "rotY": 179.980515,
                        "rotZ": -1.77959464E-07,
                        "scaleX": 1.0,
                        "scaleY": 1.0,
                        "scaleZ": 1.0
                      },
                      "Nickname": "",
                      "Description": "",
                      "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 1,\n  \"id\": \"87040\",\n  \"traits\": \"Humanoid. Criminal. Syndicate.\",\n  \"type\": \"Enemy\",\n  \"victory\": 0\n}",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 0.713235259,
                        "g": 0.713235259,
                        "b": 0.713235259
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": true,
                      "GridProjection": false,
                      "HideWhenFaceDown": true,
                      "Hands": true,
                      "CardID": 1110600,
                      "SidewaysCard": false,
                      "CustomDeck": {
                        "11106": {
                          "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                          "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                          "NumWidth": 10,
                          "NumHeight": 7,
                          "BackIsHidden": true,
                          "UniqueBack": false,
                          "Type": 0
                        }
                      },
                      "LuaScript": "",
                      "LuaScriptState": "",
                      "XmlUI": ""
                    },
                    {
                      "GUID": "d0f686",
                      "Name": "Deck",
                      "Transform": {
                        "posX": -35.9999275,
                        "posY": 1.800674,
                        "posZ": 4.499891,
                        "rotX": -5.213249E-06,
                        "rotY": 180.000488,
                        "rotZ": 4.34650076E-08,
                        "scaleX": 1.0,
                        "scaleY": 1.0,
                        "scaleZ": 1.0
                      },
                      "Nickname": "",
                      "Description": "",
                      "GMNotes": "",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 0.713235259,
                        "g": 0.713235259,
                        "b": 0.713235259
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": true,
                      "GridProjection": false,
                      "HideWhenFaceDown": true,
                      "Hands": false,
                      "SidewaysCard": false,
                      "DeckIDs": [
                        1110601,
                        1110603,
                        1110602
                      ],
                      "CustomDeck": {
                        "11106": {
                          "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                          "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                          "NumWidth": 10,
                          "NumHeight": 7,
                          "BackIsHidden": true,
                          "UniqueBack": false,
                          "Type": 0
                        }
                      },
                      "LuaScript": "",
                      "LuaScriptState": "",
                      "XmlUI": "",
                      "ContainedObjects": [
                        {
                          "GUID": "415b95",
                          "Name": "Card",
                          "Transform": {
                            "posX": -36.0000572,
                            "posY": 4.85607767,
                            "posZ": 4.499955,
                            "rotX": -4.416456E-06,
                            "rotY": 180.000336,
                            "rotZ": -1.74900117E-06,
                            "scaleX": 1.0,
                            "scaleY": 1.0,
                            "scaleZ": 1.0
                          },
                          "Nickname": "",
                          "Description": "",
                          "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 1,\n  \"id\": \"87041\",\n  \"traits\": \"Humanoid. Criminal. Syndicate. Elite.\",\n  \"type\": \"Enemy\",\n  \"victory\": 0\n}",
                          "AltLookAngle": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0
                          },
                          "ColorDiffuse": {
                            "r": 0.713235259,
                            "g": 0.713235259,
                            "b": 0.713235259
                          },
                          "LayoutGroupSortIndex": 0,
                          "Value": 0,
                          "Locked": false,
                          "Grid": true,
                          "Snap": true,
                          "IgnoreFoW": false,
                          "MeasureMovement": false,
                          "DragSelectable": true,
                          "Autoraise": true,
                          "Sticky": true,
                          "Tooltip": true,
                          "GridProjection": false,
                          "HideWhenFaceDown": true,
                          "Hands": true,
                          "CardID": 1110601,
                          "SidewaysCard": false,
                          "CustomDeck": {
                            "11106": {
                              "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                              "NumWidth": 10,
                              "NumHeight": 7,
                              "BackIsHidden": true,
                              "UniqueBack": false,
                              "Type": 0
                            }
                          },
                          "LuaScript": "",
                          "LuaScriptState": "",
                          "XmlUI": ""
                        },
                        {
                          "GUID": "44370c",
                          "Name": "Card",
                          "Transform": {
                            "posX": -36.0000572,
                            "posY": 5.05607748,
                            "posZ": 4.499955,
                            "rotX": -4.416456E-06,
                            "rotY": 180.000336,
                            "rotZ": -1.74900117E-06,
                            "scaleX": 1.0,
                            "scaleY": 1.0,
                            "scaleZ": 1.0
                          },
                          "Nickname": "",
                          "Description": "",
                          "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 1,\n  \"id\": \"87041\",\n  \"traits\": \"Humanoid. Criminal. Syndicate. Elite.\",\n  \"type\": \"Enemy\",\n  \"victory\": 0\n}",
                          "AltLookAngle": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0
                          },
                          "ColorDiffuse": {
                            "r": 0.713235259,
                            "g": 0.713235259,
                            "b": 0.713235259
                          },
                          "LayoutGroupSortIndex": 0,
                          "Value": 0,
                          "Locked": false,
                          "Grid": true,
                          "Snap": true,
                          "IgnoreFoW": false,
                          "MeasureMovement": false,
                          "DragSelectable": true,
                          "Autoraise": true,
                          "Sticky": true,
                          "Tooltip": true,
                          "GridProjection": false,
                          "HideWhenFaceDown": true,
                          "Hands": true,
                          "CardID": 1110603,
                          "SidewaysCard": false,
                          "CustomDeck": {
                            "11106": {
                              "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                              "NumWidth": 10,
                              "NumHeight": 7,
                              "BackIsHidden": true,
                              "UniqueBack": false,
                              "Type": 0
                            }
                          },
                          "LuaScript": "",
                          "LuaScriptState": "",
                          "XmlUI": ""
                        },
                        {
                          "GUID": "c05ff7",
                          "Name": "Card",
                          "Transform": {
                            "posX": -36.0000572,
                            "posY": 1.877357,
                            "posZ": 4.499955,
                            "rotX": 0.00176238478,
                            "rotY": 180.000336,
                            "rotZ": 0.00171769934,
                            "scaleX": 1.0,
                            "scaleY": 1.0,
                            "scaleZ": 1.0
                          },
                          "Nickname": "",
                          "Description": "",
                          "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 1,\n  \"id\": \"87041\",\n  \"traits\": \"Humanoid. Criminal. Syndicate. Elite.\",\n  \"type\": \"Enemy\",\n  \"victory\": 0\n}",
                          "AltLookAngle": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0
                          },
                          "ColorDiffuse": {
                            "r": 0.713235259,
                            "g": 0.713235259,
                            "b": 0.713235259
                          },
                          "LayoutGroupSortIndex": 0,
                          "Value": 0,
                          "Locked": false,
                          "Grid": true,
                          "Snap": true,
                          "IgnoreFoW": false,
                          "MeasureMovement": false,
                          "DragSelectable": true,
                          "Autoraise": true,
                          "Sticky": true,
                          "Tooltip": true,
                          "GridProjection": false,
                          "HideWhenFaceDown": true,
                          "Hands": true,
                          "CardID": 1110602,
                          "SidewaysCard": false,
                          "CustomDeck": {
                            "11106": {
                              "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                              "NumWidth": 10,
                              "NumHeight": 7,
                              "BackIsHidden": true,
                              "UniqueBack": false,
                              "Type": 0
                            }
                          },
                          "LuaScript": "",
                          "LuaScriptState": "",
                          "XmlUI": ""
                        }
                      ]
                    }
                  ]
                },
                {
                  "GUID": "caf359",
                  "Name": "Custom_Model_Bag",
                  "Transform": {
                    "posX": -31.0,
                    "posY": 2.414691,
                    "posZ": 14.5,
                    "rotX": 0.09664125,
                    "rotY": 179.980179,
                    "rotZ": 0.00257178745,
                    "scaleX": 0.7,
                    "scaleY": 0.7,
                    "scaleZ": 0.7
                  },
                  "Nickname": "Anomalies Spacio-Temporelles",
                  "Description": "Complot",
                  "GMNotes": "",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 1.0,
                    "g": 1.0,
                    "b": 1.0
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": true,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": true,
                  "Tooltip": true,
                  "GridProjection": false,
                  "HideWhenFaceDown": false,
                  "Hands": false,
                  "MaterialIndex": -1,
                  "MeshIndex": -1,
                  "CustomMesh": {
                    "MeshURL": "https://pastebin.com/raw/ALrYhQGb",
                    "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/5077277234366558480/31140655872853ACBC44735F25B0EE7E19C72536/",
                    "NormalURL": "",
                    "ColliderURL": "",
                    "Convex": true,
                    "MaterialIndex": 3,
                    "TypeIndex": 6,
                    "CustomShader": {
                      "SpecularColor": {
                        "r": 1.0,
                        "g": 1.0,
                        "b": 1.0
                      },
                      "SpecularIntensity": 0.0,
                      "SpecularSharpness": 2.0,
                      "FresnelStrength": 0.0
                    },
                    "CastShadows": true
                  },
                  "Bag": {
                    "Order": 0
                  },
                  "LuaScript": "-- Utility memory bag by Directsun\r\n-- Version 2.7.0\r\n-- Fork of Memory Bag 2.0 by MrStump\r\n--\r\n-- Want to contribute? Create an issue or fork the code on GitHub and submit a pull request:\r\n-- https://github.com/sunflowermans/TTS-UtilityMemoryBag\r\n\r\n\r\nfunction updateSave()\r\n    local data_to_save = {[\"ml\"]=memoryList}\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n        -- memoryList[guid].rot.x = movedRotation.x\r\n        -- memoryList[guid].rot.y = movedRotation.y\r\n        -- memoryList[guid].rot.z = movedRotation.z\r\n    end\r\n\r\n    --theList[obj.getGUID()] = {\r\n    --    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n    --    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n    --    lock=obj.getLock()\r\n    --}\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n\r\n--Beginning Setup\r\n\r\n\r\n--Make setup button\r\nfunction createSetupButton()\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", {0.75, 0.75, 1})\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\n    -- return getAllObjects()\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1 * 1/self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor +2\r\n            objPos.z = objPos.z * globalScaleFactor\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = {0.75,0.25,0.25,0.6}\r\n            local colorMove = {0,0,1,0.6}\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function=funcName, function_owner=self,\r\n                position=objPos, rotation=rot, height=1000, width=1000,\r\n                color=color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n--Creates submit and cancel buttons\r\nfunction createSetupActionButtons(move)\r\n    self.createButton({\r\n       label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n       position={-1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n       font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    self.createButton({\r\n      label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n      position={-1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n      font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    if move == false then\r\n      self.createButton({\r\n          label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n          position={1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n          font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\r\n        })\r\n\r\n        self.createButton({\r\n            label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n            position={-1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n            font_size=250, color={0,0,0}, font_color={1,1,1}\r\n        })\r\n\r\n        if fresh == false then\r\n            self.createButton({\r\n                label=\"Mise à Jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                position={1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=180, color={0,0,0}, font_color={0.75,0.75,1}\r\n            })\r\n            self.createButton({\r\n                label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                position={1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\r\n            })\r\n        end\r\n    end\r\n\r\n    self.createButton({\r\n        label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n        position={0,0.3,-2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n\r\n--During Setup\r\n\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = {0,0,1,0.6}\r\n    local color = {0,1,0,0.6}\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({index=previousIndex, color=colorMove})\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({index=index, color=color})\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n            lock=obj.getLock(),\r\n            tint=obj.getColorTint()\r\n        }\r\n        obj.highlightOn({0,1,0})\r\n    else\r\n        color = {0.75,0.25,0.25,0.6}\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({index=index, color=color})\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({index=index, color={0,1,0,0.6}})\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n                    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n                    lock=obj.getLock(),\r\n                    tint=obj.getColorTint()\r\n                }\r\n                obj.highlightOn({0,1,0})\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = {0.75,0.25,0.25,0.6}\r\n                self.editButton({index=index, color=color})\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", {1,1,1})\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", {1, 0.25, 0.25})\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", {0.75, 0.75, 1})\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", {0.75, 0.25, 0.25})\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k,v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", {0.25, 0.75, 0.25})\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", {1.0, 0.25, 0.25})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Removed\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", {0.75, 0.75, 1})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\n\r\n--After Setup\r\n\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={0,0.3,2.8}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={2,0.3,0}, rotation={0,90,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---  \r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    local bagObjList = self.getObjects()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid=guid, position=entry.pos, rotation=entry.rot, smooth=false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n\r\n--Utility functions\r\n\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x-p1.x)\r\n    deltaPos.y = (p2.y-p1.y) + yOffset\r\n    deltaPos.z = (p2.z-p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10^(dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample:\r\n{'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'}\r\n--]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend",
                  "LuaScriptState": "{\"ml\":{\"0fffb3\":{\"lock\":false,\"pos\":{\"x\":30.5,\"y\":1.5561,\"z\":-8.5001},\"rot\":{\"x\":0.0942,\"y\":180,\"z\":-0.0001},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"463080\":{\"lock\":false,\"pos\":{\"x\":21,\"y\":1.5543,\"z\":15},\"rot\":{\"x\":0.0109,\"y\":179.9713,\"z\":0.0049},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"b56d63\":{\"lock\":false,\"pos\":{\"x\":-1,\"y\":1.5579,\"z\":24},\"rot\":{\"x\":0.0109,\"y\":179.9713,\"z\":0.0049},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}},\"d3c60f\":{\"lock\":false,\"pos\":{\"x\":-1,\"y\":1.5545,\"z\":5.9981},\"rot\":{\"x\":0.0109,\"y\":179.9736,\"z\":0.0049},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}}}}",
                  "XmlUI": "",
                  "ContainedObjects": [
                    {
                      "GUID": "0fffb3",
                      "Name": "Card",
                      "Transform": {
                        "posX": -26.9995613,
                        "posY": 1.8391968,
                        "posZ": 3.998919,
                        "rotX": 2.25458837,
                        "rotY": 179.989731,
                        "rotZ": -0.0015327615,
                        "scaleX": 1.0,
                        "scaleY": 1.0,
                        "scaleZ": 1.0
                      },
                      "Nickname": "Anomalies Spacio-Temporelles",
                      "Description": "Complot",
                      "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87038\",\n  \"traits\": \"Plot.\",\n  \"type\": \"Story\",\n  \"victory\": 1\n}",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 0.713235259,
                        "g": 0.713235259,
                        "b": 0.713235259
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": true,
                      "GridProjection": false,
                      "HideWhenFaceDown": true,
                      "Hands": true,
                      "CardID": 1104904,
                      "SidewaysCard": false,
                      "CustomDeck": {
                        "11049": {
                          "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                          "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                          "NumWidth": 10,
                          "NumHeight": 7,
                          "BackIsHidden": true,
                          "UniqueBack": true,
                          "Type": 0
                        }
                      },
                      "LuaScript": "",
                      "LuaScriptState": "",
                      "XmlUI": ""
                    },
                    {
                      "GUID": "463080",
                      "Name": "Custom_Token",
                      "Transform": {
                        "posX": -27.5000038,
                        "posY": 1.81530118,
                        "posZ": 6.50000048,
                        "rotX": -7.20561229E-06,
                        "rotY": 179.971451,
                        "rotZ": -3.878988E-05,
                        "scaleX": 0.3,
                        "scaleY": 1.0,
                        "scaleZ": 0.3
                      },
                      "Nickname": "Horror",
                      "Description": "Left click - Increase\nRight click - Decrease",
                      "GMNotes": "",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 1.0,
                        "g": 1.0,
                        "b": 1.0
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": false,
                      "GridProjection": false,
                      "HideWhenFaceDown": false,
                      "Hands": false,
                      "CustomImage": {
                        "ImageURL": "https://steamusercontent-a.akamaihd.net/ugc/949599153663403796/E6FC1B82A5BC3893CFDCDF3CD580D05E9218AE52/",
                        "ImageSecondaryURL": "",
                        "ImageScalar": 1.0,
                        "WidthScale": 0.0,
                        "CustomToken": {
                          "Thickness": 0.1,
                          "MergeDistancePixels": 5.0,
                          "StandUp": false,
                          "Stackable": false
                        }
                      },
                      "LuaScript": "MIN_VALUE = -99\r\nMAX_VALUE = 999\r\n\r\nfunction onload(saved_data)\r\n    light_mode = true\r\n    val = 0\r\n\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        light_mode = loaded_data[1]\r\n        val = loaded_data[2]\r\n    end\r\n\r\n    createAll()\r\nend\r\n\r\nfunction updateSave()\r\n    local data_to_save = {light_mode, val}\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction createAll()\r\n    s_color = {0,0,0,100}\r\n\n    if light_mode then\r\n        f_color = {1,1,1,100}\r\n    else\r\n        f_color = {0,0,0,100}\r\n    end\r\n\r\n\r\n\r\n    self.createButton({\r\n      label=tostring(val),\r\n      click_function=\"add_subtract\",\r\n      function_owner=self,\r\n      position={-0.025,0.05,-0.025},\r\n      height=600,\r\n      width=1000,\r\n      alignment = 3,\r\n      scale={x=1.5, y=1.5, z=1.5},\r\n      font_size=600,\r\n      font_color=f_color,\r\n      color={1,1,1,0}\r\n      })\r\n\r\n\r\n\r\n\r\n    if light_mode then\r\n        lightButtonText = \"[ Set dark ]\"\r\n    else\r\n        lightButtonText = \"[ Set light ]\"\r\n    end\r\n \r\nend\r\n\r\nfunction removeAll()\r\n    self.removeInput(0)\r\n    self.removeInput(1)\r\n    self.removeButton(0)\r\n    self.removeButton(1)\r\n    self.removeButton(2)\r\nend\r\n\r\nfunction reloadAll()\r\n    removeAll()\r\n    createAll()\r\n\r\n    updateSave()\r\nend\r\n\r\nfunction swap_fcolor(_obj, _color, alt_click)\r\n    light_mode = not light_mode\r\n    reloadAll()\r\nend\r\n\r\nfunction swap_align(_obj, _color, alt_click)\r\n    center_mode = not center_mode\r\n    reloadAll()\r\nend\r\n\r\nfunction editName(_obj, _string, value) \r\n    self.setName(value)\r\n    setTooltips()\r\nend\r\n\r\nfunction add_subtract(_obj, _color, alt_click)\r\n    mod = alt_click and -1 or 1\r\n    new_value = math.min(math.max(val + mod, MIN_VALUE), MAX_VALUE)\r\n    if val ~= new_value then\r\n        val = new_value\r\n      updateVal()\r\n        updateSave()\r\n    end\r\nend\r\n\r\nfunction updateVal()\r\n\r\n    self.editButton({\r\n        index = 0,\r\n        label = tostring(val),\r\n\r\n        })\r\nend\r\n\r\nfunction reset_val()\r\n    val = 0\r\n    updateVal()\r\n    updateSave()\r\nend\r\n\r\nfunction setTooltips()\r\n    self.editInput({\r\n        index = 0,\r\n        value = self.getName(),\r\n        tooltip = ttText\r\n        })\r\n    self.editButton({\r\n        index = 0,\r\n        value = tostring(val),\r\n        tooltip = ttText\r\n        })\r\nend\r\n\r\nfunction null()\r\nend\r\n\r\nfunction keepSample(_obj, _string, value) \r\n    reloadAll()\r\nend",
                      "LuaScriptState": "[true,0]",
                      "XmlUI": ""
                    },
                    {
                      "GUID": "b56d63",
                      "Name": "Custom_Token",
                      "Transform": {
                        "posX": -28.0000038,
                        "posY": 1.8153013,
                        "posZ": 7.99999952,
                        "rotX": -2.47839034E-05,
                        "rotY": 179.971558,
                        "rotZ": -2.01821058E-05,
                        "scaleX": 0.3,
                        "scaleY": 1.0,
                        "scaleZ": 0.3
                      },
                      "Nickname": "Horror",
                      "Description": "Left click - Increase\nRight click - Decrease",
                      "GMNotes": "",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 1.0,
                        "g": 1.0,
                        "b": 1.0
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": false,
                      "GridProjection": false,
                      "HideWhenFaceDown": false,
                      "Hands": false,
                      "CustomImage": {
                        "ImageURL": "https://steamusercontent-a.akamaihd.net/ugc/949599153663403796/E6FC1B82A5BC3893CFDCDF3CD580D05E9218AE52/",
                        "ImageSecondaryURL": "",
                        "ImageScalar": 1.0,
                        "WidthScale": 0.0,
                        "CustomToken": {
                          "Thickness": 0.1,
                          "MergeDistancePixels": 5.0,
                          "StandUp": false,
                          "Stackable": false
                        }
                      },
                      "LuaScript": "MIN_VALUE = -99\r\nMAX_VALUE = 999\r\n\r\nfunction onload(saved_data)\r\n    light_mode = true\r\n    val = 0\r\n\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        light_mode = loaded_data[1]\r\n        val = loaded_data[2]\r\n    end\r\n\r\n    createAll()\r\nend\r\n\r\nfunction updateSave()\r\n    local data_to_save = {light_mode, val}\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction createAll()\r\n    s_color = {0,0,0,100}\r\n\n    if light_mode then\r\n        f_color = {1,1,1,100}\r\n    else\r\n        f_color = {0,0,0,100}\r\n    end\r\n\r\n\r\n\r\n    self.createButton({\r\n      label=tostring(val),\r\n      click_function=\"add_subtract\",\r\n      function_owner=self,\r\n      position={-0.025,0.05,-0.025},\r\n      height=600,\r\n      width=1000,\r\n      alignment = 3,\r\n      scale={x=1.5, y=1.5, z=1.5},\r\n      font_size=600,\r\n      font_color=f_color,\r\n      color={1,1,1,0}\r\n      })\r\n\r\n\r\n\r\n\r\n    if light_mode then\r\n        lightButtonText = \"[ Set dark ]\"\r\n    else\r\n        lightButtonText = \"[ Set light ]\"\r\n    end\r\n \r\nend\r\n\r\nfunction removeAll()\r\n    self.removeInput(0)\r\n    self.removeInput(1)\r\n    self.removeButton(0)\r\n    self.removeButton(1)\r\n    self.removeButton(2)\r\nend\r\n\r\nfunction reloadAll()\r\n    removeAll()\r\n    createAll()\r\n\r\n    updateSave()\r\nend\r\n\r\nfunction swap_fcolor(_obj, _color, alt_click)\r\n    light_mode = not light_mode\r\n    reloadAll()\r\nend\r\n\r\nfunction swap_align(_obj, _color, alt_click)\r\n    center_mode = not center_mode\r\n    reloadAll()\r\nend\r\n\r\nfunction editName(_obj, _string, value) \r\n    self.setName(value)\r\n    setTooltips()\r\nend\r\n\r\nfunction add_subtract(_obj, _color, alt_click)\r\n    mod = alt_click and -1 or 1\r\n    new_value = math.min(math.max(val + mod, MIN_VALUE), MAX_VALUE)\r\n    if val ~= new_value then\r\n        val = new_value\r\n      updateVal()\r\n        updateSave()\r\n    end\r\nend\r\n\r\nfunction updateVal()\r\n\r\n    self.editButton({\r\n        index = 0,\r\n        label = tostring(val),\r\n\r\n        })\r\nend\r\n\r\nfunction reset_val()\r\n    val = 0\r\n    updateVal()\r\n    updateSave()\r\nend\r\n\r\nfunction setTooltips()\r\n    self.editInput({\r\n        index = 0,\r\n        value = self.getName(),\r\n        tooltip = ttText\r\n        })\r\n    self.editButton({\r\n        index = 0,\r\n        value = tostring(val),\r\n        tooltip = ttText\r\n        })\r\nend\r\n\r\nfunction null()\r\nend\r\n\r\nfunction keepSample(_obj, _string, value) \r\n    reloadAll()\r\nend",
                      "LuaScriptState": "[true,0]",
                      "XmlUI": ""
                    },
                    {
                      "GUID": "d3c60f",
                      "Name": "Custom_Token",
                      "Transform": {
                        "posX": -26.5000553,
                        "posY": 1.81528687,
                        "posZ": 5.49981833,
                        "rotX": 0.006691237,
                        "rotY": 179.98439,
                        "rotZ": -0.00237952638,
                        "scaleX": 0.3,
                        "scaleY": 1.0,
                        "scaleZ": 0.3
                      },
                      "Nickname": "Horror",
                      "Description": "Left click - Increase\nRight click - Decrease",
                      "GMNotes": "",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 1.0,
                        "g": 1.0,
                        "b": 1.0
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": false,
                      "GridProjection": false,
                      "HideWhenFaceDown": false,
                      "Hands": false,
                      "CustomImage": {
                        "ImageURL": "https://steamusercontent-a.akamaihd.net/ugc/949599153663403796/E6FC1B82A5BC3893CFDCDF3CD580D05E9218AE52/",
                        "ImageSecondaryURL": "",
                        "ImageScalar": 1.0,
                        "WidthScale": 0.0,
                        "CustomToken": {
                          "Thickness": 0.1,
                          "MergeDistancePixels": 5.0,
                          "StandUp": false,
                          "Stackable": false
                        }
                      },
                      "LuaScript": "MIN_VALUE = -99\r\nMAX_VALUE = 999\r\n\r\nfunction onload(saved_data)\r\n    light_mode = true\r\n    val = 0\r\n\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        light_mode = loaded_data[1]\r\n        val = loaded_data[2]\r\n    end\r\n\r\n    createAll()\r\nend\r\n\r\nfunction updateSave()\r\n    local data_to_save = {light_mode, val}\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction createAll()\r\n    s_color = {0,0,0,100}\r\n\n    if light_mode then\r\n        f_color = {1,1,1,100}\r\n    else\r\n        f_color = {0,0,0,100}\r\n    end\r\n\r\n\r\n\r\n    self.createButton({\r\n      label=tostring(val),\r\n      click_function=\"add_subtract\",\r\n      function_owner=self,\r\n      position={-0.025,0.05,-0.025},\r\n      height=600,\r\n      width=1000,\r\n      alignment = 3,\r\n      scale={x=1.5, y=1.5, z=1.5},\r\n      font_size=600,\r\n      font_color=f_color,\r\n      color={1,1,1,0}\r\n      })\r\n\r\n\r\n\r\n\r\n    if light_mode then\r\n        lightButtonText = \"[ Set dark ]\"\r\n    else\r\n        lightButtonText = \"[ Set light ]\"\r\n    end\r\n \r\nend\r\n\r\nfunction removeAll()\r\n    self.removeInput(0)\r\n    self.removeInput(1)\r\n    self.removeButton(0)\r\n    self.removeButton(1)\r\n    self.removeButton(2)\r\nend\r\n\r\nfunction reloadAll()\r\n    removeAll()\r\n    createAll()\r\n\r\n    updateSave()\r\nend\r\n\r\nfunction swap_fcolor(_obj, _color, alt_click)\r\n    light_mode = not light_mode\r\n    reloadAll()\r\nend\r\n\r\nfunction swap_align(_obj, _color, alt_click)\r\n    center_mode = not center_mode\r\n    reloadAll()\r\nend\r\n\r\nfunction editName(_obj, _string, value) \r\n    self.setName(value)\r\n    setTooltips()\r\nend\r\n\r\nfunction add_subtract(_obj, _color, alt_click)\r\n    mod = alt_click and -1 or 1\r\n    new_value = math.min(math.max(val + mod, MIN_VALUE), MAX_VALUE)\r\n    if val ~= new_value then\r\n        val = new_value\r\n      updateVal()\r\n        updateSave()\r\n    end\r\nend\r\n\r\nfunction updateVal()\r\n\r\n    self.editButton({\r\n        index = 0,\r\n        label = tostring(val),\r\n\r\n        })\r\nend\r\n\r\nfunction reset_val()\r\n    val = 0\r\n    updateVal()\r\n    updateSave()\r\nend\r\n\r\nfunction setTooltips()\r\n    self.editInput({\r\n        index = 0,\r\n        value = self.getName(),\r\n        tooltip = ttText\r\n        })\r\n    self.editButton({\r\n        index = 0,\r\n        value = tostring(val),\r\n        tooltip = ttText\r\n        })\r\nend\r\n\r\nfunction null()\r\nend\r\n\r\nfunction keepSample(_obj, _string, value) \r\n    reloadAll()\r\nend",
                      "LuaScriptState": "[true,0]",
                      "XmlUI": ""
                    }
                  ]
                }
              ]
            },
            {
              "GUID": "39d218",
              "Name": "Custom_Model",
              "Transform": {
                "posX": -22.4999962,
                "posY": 1.77099967,
                "posZ": 20.0000038,
                "rotX": 5.22000073E-06,
                "rotY": -9.154566E-05,
                "rotZ": 4.81338844E-08,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "Text Tool",
              "Description": "",
              "GMNotes": "",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 0.0,
                "g": 0.0,
                "b": 0.0,
                "a": 0.0
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": false,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": false,
              "Tooltip": false,
              "GridProjection": false,
              "HideWhenFaceDown": false,
              "Hands": false,
              "CustomMesh": {
                "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/1478820768302617365/27883B7913E0E69143C3AA03493B7E7C4E8C29C0/",
                "DiffuseURL": "",
                "NormalURL": "",
                "ColliderURL": "",
                "Convex": true,
                "MaterialIndex": 1,
                "TypeIndex": 0,
                "CastShadows": true
              },
              "LuaScript": "-- Code for bag to identify text tool objects\r\nmovableTextTool_cowgoesmoo33 = true\r\n\r\n-- Number of characters before the text box width expands.\r\nEXPAND_INTERVAL = 20\r\n\r\n-- This table controls what is passed between save/load\r\ndata = {}\r\n\r\nfunction onLoad(saved_data)\r\n  if saved_data ~= '' then\r\n    data = JSON.decode(saved_data)\r\n    if data.text ~= '' then\r\n      self.interactable = data.interactable\r\n      staticMode()\r\n      return\r\n    end\r\n  else\r\n    data = {size=200, color=Color(0,0,0), text='', interactable=true,\r\n        enter_to_finish=false, autolock=false, autolift=false,\r\n        hover_height=0.05, box_transparency=1}\r\n  end\r\n\r\n  inputMode()\r\nend\r\n\r\n-- True if in the middle of delay after pressing Enter (with enter_to_finish on)\r\nfinishing = false\r\nfunction input_func(obj, color, input, stillEditing)\r\n  local params = getBox(input)\r\n  if params then\r\n    params.value = input\r\n    self.editInput(params)\r\n  end\r\n\r\n  if not stillEditing then\r\n    data.text = input\r\n    updateState()\r\n    if input ~= '' then staticMode(color) end\r\n  elseif data.enter_to_finish then\r\n    -- If enter is pressed: remove last newline and force finish\r\n    if not finishing and input:sub(-1) == '\\n' then\r\n      finishing = true\r\n      -- Delay to avoid user's Enter keypress being detected (opens chat box)\r\n      Wait.frames(function()\r\n        input = input:sub(1, -2)\r\n        data.text = input\r\n        updateState()\r\n        if input ~= '' then staticMode(color) else inputMode() end\r\n        finishing = false\r\n      end, 10)\r\n    end\r\n  end\r\nend\r\n\r\n-- When the inpupt box appears and lets the player type in it.\r\nfunction inputMode()\r\n  self.clearContextMenu()\r\n  self.clearInputs()\r\n  self.clearButtons()\r\n\r\n  local size = getBox(data.text, true)\r\n\r\n  self.createInput({\r\n    input_function = \"input_func\",\r\n    function_owner = self,\r\n    label          = \"Type Here\",\r\n    alignment      = 3,\r\n    position       = {x=0, y=data.hover_height, z=0},\r\n    rotation       = {0, 180, 0},\r\n    width          = size.width,\r\n    height         = size.height,\r\n    color          = getBackground(data.color),\r\n    font_color     = data.color,\r\n    font_size      = data.size,\r\n    value          = data.text,\r\n  })\r\n\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\nend\r\n\r\n-- When the input box disappears and displays the text.\r\nfunction staticMode(player)\r\n  self.clearContextMenu()\r\n  if data.autolock then\r\n    self.locked = true\r\n  end\r\n  if self.getInputs() and #self.getInputs() ~= 0 then\r\n    self.removeInput(0)\r\n  end\r\n\r\n  -- Clear from selecting player\r\n  if player then\r\n    self.removeFromPlayerSelection(player)\r\n  end\r\n\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  self.createButton({\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=self,\r\n    position={0,data.hover_height,0}, rotation={0,180,0}, height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  })\r\n\r\n  self.addContextMenuItem('Edit Text', function(color)\r\n    self.removeFromPlayerSelection(color)\r\n    inputMode()\r\n  end)\r\n  self.addContextMenuItem('Clear', function(color)\r\n    applyMultiple(color, 'clear', _, true)\r\n  end)\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\n  self.addContextMenuItem('Permanently Attach', attemptAttach)\r\n  self.addContextMenuItem('Permalock', function(color)\r\n    applyMultiple(color, 'permalock', _, true)\r\n  end)\r\nend\r\n\r\nfunction changeSize(params)\r\n  local delta = params[1]\r\n  local newSize = data.size + delta\r\n  if newSize > 800  or newSize < 50 then\r\n    return\r\n  end\r\n  data.size = newSize\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_size=data.size})\r\n  else\r\n    local size = getBox(data.text, true)\r\n    self.editInput({width=size.width, height=size.height, font_size=data.size})\r\n  end\r\nend\r\n\r\nfunction setColor(params)\r\n  if params and params[1] then\r\n    data.color = params[1]\r\n  else\r\n    data.color = self.getColorTint():setAt('a', 1) -- Take on color of object tint\r\n  end\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_color=data.color})\r\n  else\r\n    self.editInput({font_color=data.color, color=getBackground(data.color)})\r\n  end\r\nend\r\n\r\nfunction getBackground(color) --determines whether to use black or white depending on luminance\r\n  local r,g,b = Color(color):get()\r\n\r\n  local lum = 0.2126*r + 0.7152*g + 0.0722*b\r\n  if lum > 0.75 then\r\n    return {0.2,0.2,0.2, data.box_transparency}\r\n  else\r\n    return {1,1,1, data.box_transparency}\r\n  end\r\nend\r\n\r\nfunction clear()\r\n  data.text = ''\r\n  updateState()\r\n  inputMode()\r\nend\r\n\r\nfunction permalock()\r\n  self.interactable = false\r\n  data.interactable = false\r\n  updateState()\r\nend\r\n\r\nlocal target_script = [[\r\nfunction onLoad(script_state)\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    for _,entry in ipairs(state) do\r\n      self.createButton(entry)\r\n    end\r\n    self.addContextMenuItem('Clear All Text', function(color)\r\n      self.clearContextMenu()\r\n      self.clearButtons()\r\n      self.script_state = ''\r\n      self.script_code = ''\r\n    end)\r\n  end\r\nend\r\n]]\r\n\r\nfunction attemptAttach(player_color)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  local attachee\r\n  local attachers = {}\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if obj ~= self then\r\n        table.insert(attachers, obj)\r\n      end\r\n    else\r\n      if attachee then\r\n        broadcastToColor(\"More than one target selected.\", player_color)\r\n        return\r\n      else\r\n        attachee = obj\r\n      end\r\n    end\r\n  end\r\n  if attachee then\r\n    local code = attachee.script_code\r\n    if code and code ~= '' and code ~= target_script then\r\n      broadcastToColor(\"Warning: script on card has been overriden. Rewind time to undo.\", player_color)\r\n    end\r\n    for i,attacher in ipairs(attachers) do\r\n      attacher.call('attach', {target = attachee})\r\n    end\r\n    attach({target = attachee})\r\n    local type, flip = attachee.type, attachee.getRotation().z\r\n    if (type == 'Card' or type == 'Deck') and flip > 175 and flip < 185 then\r\n      broadcastToColor(\"Warning: text will not display if card or deck is facing down.\", player_color)\r\n    end\r\n  else\r\n    broadcastToColor(\"You must have a target object in your selection (using click-and-drag or Ctrl+Click) to use this option.\", player_color)\r\n  end\r\nend\r\n\r\nfunction attach(params)\r\n  local target = params.target\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  local textRotation = self.getRotation():sub(target.getRotation())\r\n    :add(Vector(180, 0, 180))\r\n\r\n  local textPosition = target.positionToLocal(\r\n    self.getPosition():add(Vector(0, data.hover_height, 0))\r\n  )\r\n  textPosition.x = -textPosition.x\r\n\r\n  local textScale = {}\r\n  textScale.x = self.getScale().x / target.getScale().x\r\n  textScale.y = self.getScale().x / target.getScale().y\r\n  textScale.z = self.getScale().x / target.getScale().z\r\n\r\n  local details = {\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=nil,\r\n    position=textPosition,\r\n    rotation=textRotation,\r\n    scale=textScale,\r\n    height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  }\r\n\r\n  target.createButton(details)\r\n\r\n  local script_state = target.script_state\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    table.insert(state, details)\r\n    target.script_state = JSON.encode(state)\r\n  else\r\n    target.script_state = JSON.encode({[1]=details})\r\n  end\r\n\r\n  target.script_code = target_script\r\n\r\n  self.destruct()\r\nend\r\n\r\nfunction applyMultiple(player_color, func_string, params, static_only)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if not static_only or obj.call('isStatic') then\r\n        obj.call(func_string, params)\r\n      end\r\n    end\r\n  end\r\nend\r\n\r\nfunction isStatic()\r\n  local input = self.getInputs()\r\n  return not input or #input == 0\r\nend\r\n\r\nfunction getBox(input, force)\r\n  local maxLength, lineCount = EXPAND_INTERVAL, 1\r\n  local lineLength = 0\r\n  for i = 1, #input do\r\n    local c = input:sub(i,i)\r\n    if c == '\\n' then\r\n      lineCount = lineCount + 1\r\n      if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n      lineLength = 0\r\n    else\r\n      lineLength = lineLength + 1\r\n    end\r\n  end\r\n  if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n\r\n  newWidth = data.size * maxLength * 0.9\r\n  newHeight = data.size * lineCount + 23\r\n\r\n  if force or boxWidth ~= newWidth or boxHeight ~= newHeight then\r\n    boxWidth, boxHeight = newWidth, newHeight\r\n    return {width = boxWidth, height = boxHeight}\r\n  end\r\n  return nil\r\nend\r\n\r\ntemp_lift = nil\r\nfunction onPickUp(player_color)\r\n  if data.autolift then\r\n    local player = Player[player_color]\r\n    temp_lift = player.lift_height\r\n    player.lift_height = 0\r\n  end\r\nend\r\n\r\nfunction onDrop(player_color)\r\n  if data.autolift and temp_lift then\r\n    Player[player_color].lift_height = temp_lift\r\n  end\r\nend\r\n\r\n-- Should be called every time data is modified, allows info to be saved on copy/paste\r\nfunction updateState()\r\n  self.script_state = JSON.encode(data)\r\nend\r\n\r\nfunction onSave()\r\n  self.script_state = JSON.encode(data)\r\n  return self.script_state\r\nend",
              "LuaScriptState": "{\"autolift\":false,\"autolock\":false,\"box_transparency\":1,\"color\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1},\"enter_to_finish\":false,\"hover_height\":0.05,\"interactable\":true,\"size\":200,\"text\":\"Tirer un complot et une machination\\nposez les ci dessous et placez les\"}",
              "XmlUI": ""
            },
            {
              "GUID": "63027a",
              "Name": "Custom_Model_Bag",
              "Transform": {
                "posX": -19.9999866,
                "posY": 1.83999944,
                "posZ": 24.0000114,
                "rotX": -3.28043257E-06,
                "rotY": 179.990219,
                "rotZ": 1.810019E-07,
                "scaleX": 0.7,
                "scaleY": 0.7,
                "scaleZ": 0.7
              },
              "Nickname": "Futur",
              "Description": "",
              "GMNotes": "",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": true,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": true,
              "Tooltip": true,
              "GridProjection": false,
              "HideWhenFaceDown": false,
              "Hands": false,
              "MaterialIndex": -1,
              "MeshIndex": -1,
              "CustomMesh": {
                "MeshURL": "https://pastebin.com/raw/ALrYhQGb",
                "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/5077277234366553874/6AD0ADBA7941ACCDAB1C18E898E706CAB8B5331F/",
                "NormalURL": "",
                "ColliderURL": "",
                "Convex": true,
                "MaterialIndex": 3,
                "TypeIndex": 6,
                "CustomShader": {
                  "SpecularColor": {
                    "r": 1.0,
                    "g": 1.0,
                    "b": 1.0
                  },
                  "SpecularIntensity": 0.0,
                  "SpecularSharpness": 2.0,
                  "FresnelStrength": 0.0
                },
                "CastShadows": true
              },
              "Bag": {
                "Order": 0
              },
              "LuaScript": "-- Utility memory bag by Directsun\r\n-- Version 2.7.0\r\n-- Fork of Memory Bag 2.0 by MrStump\r\n--\r\n-- Want to contribute? Create an issue or fork the code on GitHub and submit a pull request:\r\n-- https://github.com/sunflowermans/TTS-UtilityMemoryBag\r\n\r\n\r\nfunction updateSave()\r\n    local data_to_save = {[\"ml\"]=memoryList}\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n        -- memoryList[guid].rot.x = movedRotation.x\r\n        -- memoryList[guid].rot.y = movedRotation.y\r\n        -- memoryList[guid].rot.z = movedRotation.z\r\n    end\r\n\r\n    --theList[obj.getGUID()] = {\r\n    --    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n    --    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n    --    lock=obj.getLock()\r\n    --}\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n\r\n--Beginning Setup\r\n\r\n\r\n--Make setup button\r\nfunction createSetupButton()\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", {0.75, 0.75, 1})\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\n    -- return getAllObjects()\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1 * 1/self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor +2\r\n            objPos.z = objPos.z * globalScaleFactor\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = {0.75,0.25,0.25,0.6}\r\n            local colorMove = {0,0,1,0.6}\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function=funcName, function_owner=self,\r\n                position=objPos, rotation=rot, height=1000, width=1000,\r\n                color=color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n--Creates submit and cancel buttons\r\nfunction createSetupActionButtons(move)\r\n    self.createButton({\r\n       label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n       position={-1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n       font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    self.createButton({\r\n      label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n      position={-1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n      font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    if move == false then\r\n      self.createButton({\r\n          label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n          position={1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n          font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\r\n        })\r\n\r\n        self.createButton({\r\n            label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n            position={-1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n            font_size=250, color={0,0,0}, font_color={1,1,1}\r\n        })\r\n\r\n        if fresh == false then\r\n            self.createButton({\r\n                label=\"Mise à Jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                position={1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=180, color={0,0,0}, font_color={0.75,0.75,1}\r\n            })\r\n            self.createButton({\r\n                label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                position={1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\r\n            })\r\n        end\r\n    end\r\n\r\n    self.createButton({\r\n        label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n        position={0,0.3,-2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n\r\n--During Setup\r\n\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = {0,0,1,0.6}\r\n    local color = {0,1,0,0.6}\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({index=previousIndex, color=colorMove})\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({index=index, color=color})\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n            lock=obj.getLock(),\r\n            tint=obj.getColorTint()\r\n        }\r\n        obj.highlightOn({0,1,0})\r\n    else\r\n        color = {0.75,0.25,0.25,0.6}\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({index=index, color=color})\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({index=index, color={0,1,0,0.6}})\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n                    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n                    lock=obj.getLock(),\r\n                    tint=obj.getColorTint()\r\n                }\r\n                obj.highlightOn({0,1,0})\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = {0.75,0.25,0.25,0.6}\r\n                self.editButton({index=index, color=color})\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", {1,1,1})\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", {1, 0.25, 0.25})\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", {0.75, 0.75, 1})\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", {0.75, 0.25, 0.25})\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k,v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", {0.25, 0.75, 0.25})\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", {1.0, 0.25, 0.25})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Removed\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", {0.75, 0.75, 1})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\n\r\n--After Setup\r\n\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={0,0.3,2.8}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={2,0.3,0}, rotation={0,90,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---  \r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    local bagObjList = self.getObjects()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid=guid, position=entry.pos, rotation=entry.rot, smooth=false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n\r\n--Utility functions\r\n\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x-p1.x)\r\n    deltaPos.y = (p2.y-p1.y) + yOffset\r\n    deltaPos.z = (p2.z-p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10^(dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample:\r\n{'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'}\r\n--]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend",
              "LuaScriptState": "{\"ml\":{\"14a5bc\":{\"lock\":false,\"pos\":{\"x\":-10,\"y\":1.5049,\"z\":4},\"rot\":{\"x\":0.0109,\"y\":179.9995,\"z\":0.0049},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"232a70\":{\"lock\":false,\"pos\":{\"x\":-7,\"y\":1.5044,\"z\":2.5},\"rot\":{\"x\":0.0042,\"y\":224.995,\"z\":0.0112},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"3d81f6\":{\"lock\":false,\"pos\":{\"x\":-7,\"y\":1.5049,\"z\":5.5},\"rot\":{\"x\":0.0112,\"y\":135.0028,\"z\":-0.0042},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"60bf33\":{\"lock\":false,\"pos\":{\"x\":-10,\"y\":1.50765311717987,\"z\":-0.500109612941742},\"rot\":{\"x\":0.0108914701268077,\"y\":180.000152587891,\"z\":0.00494831800460815},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"6cc831\":{\"lock\":false,\"pos\":{\"x\":-1.86466104423744E-06,\"y\":1.50678956508636,\"z\":-0.49999663233757},\"rot\":{\"x\":0.0108914161100984,\"y\":180.001022338867,\"z\":0.00494832452386618},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"825940\":{\"lock\":false,\"pos\":{\"x\":-10.0034503936768,\"y\":1.5097439289093,\"z\":10.4970979690552},\"rot\":{\"x\":0.0108916750177741,\"y\":179.99772644043,\"z\":0.00494786445051432},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"92eaf8\":{\"lock\":false,\"pos\":{\"x\":-4,\"y\":1.5041,\"z\":2.5},\"rot\":{\"x\":0.0112,\"y\":135.0028,\"z\":-0.0042},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"9d232c\":{\"lock\":false,\"pos\":{\"x\":3,\"y\":1.5042,\"z\":6},\"rot\":{\"x\":359.9903,\"y\":300.02,\"z\":0.007},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"a43d95\":{\"lock\":false,\"pos\":{\"x\":-5.5,\"y\":1.5055,\"z\":4},\"rot\":{\"x\":359.9891,\"y\":0.005,\"z\":-0.0049},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}},\"a7fa09\":{\"lock\":false,\"pos\":{\"x\":-4,\"y\":1.5047,\"z\":5.5},\"rot\":{\"x\":0.0042,\"y\":224.9951,\"z\":0.0112},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"a99e44\":{\"lock\":false,\"pos\":{\"x\":-5.5,\"y\":1.5037,\"z\":-0.5},\"rot\":{\"x\":-0.0049,\"y\":269.9948,\"z\":0.0109},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"bc0ba0\":{\"lock\":true,\"pos\":{\"x\":7,\"y\":1.517,\"z\":4},\"rot\":{\"x\":0.0109,\"y\":179.9857,\"z\":0.0049},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"dc7905\":{\"lock\":false,\"pos\":{\"x\":-5.50000524520874,\"y\":1.50869023799896,\"z\":7.00000381469727},\"rot\":{\"x\":0.0108913434669375,\"y\":180.001831054688,\"z\":0.00494869844987988},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e30486\":{\"lock\":false,\"pos\":{\"x\":18.0000019073486,\"y\":1.50494992733002,\"z\":-1.9999988079071},\"rot\":{\"x\":0.0108915567398071,\"y\":179.999206542969,\"z\":0.00494815921410918},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e46534\":{\"lock\":false,\"pos\":{\"x\":-1,\"y\":1.5041,\"z\":4},\"rot\":{\"x\":0.0109,\"y\":179.9951,\"z\":0.005},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"f12ee8\":{\"lock\":false,\"pos\":{\"x\":-5.5,\"y\":1.5054,\"z\":8.5},\"rot\":{\"x\":-0.0049,\"y\":269.9949,\"z\":0.0109},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"fe84d6\":{\"lock\":false,\"pos\":{\"x\":-5.00000238418579,\"y\":1.49433135986328,\"z\":-1.99999678134918},\"rot\":{\"x\":359.989105224609,\"y\":359.982208251953,\"z\":-0.00494517059996724},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}}}}",
              "XmlUI": "",
              "ContainedObjects": [
                {
                  "GUID": "60bf33",
                  "Name": "Card",
                  "Transform": {
                    "posX": -10.0,
                    "posY": 1.50765312,
                    "posZ": -0.5001108,
                    "rotX": 0.01089154,
                    "rotY": 180.000122,
                    "rotZ": 0.004948227,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "",
                  "Description": "",
                  "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87025\",\n  \"locationBack\": {\n    \"connections\": \"Spade|Tindalos\",\n    \"icons\": \"Plus|Portal\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Spade|Tindalos\",\n    \"icons\": \"Plus|Portal\"\n  },\n  \"traits\": \"Arkham. Portal. Future.\",\n  \"type\": \"Location\"\n}",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 0.713235259,
                    "g": 0.713235259,
                    "b": 0.713235259
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": true,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": true,
                  "Tooltip": true,
                  "GridProjection": false,
                  "HideWhenFaceDown": true,
                  "Hands": true,
                  "CardID": 1104921,
                  "SidewaysCard": false,
                  "CustomDeck": {
                    "11049": {
                      "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                      "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                      "NumWidth": 10,
                      "NumHeight": 7,
                      "BackIsHidden": true,
                      "UniqueBack": true,
                      "Type": 0
                    }
                  },
                  "LuaScript": "",
                  "LuaScriptState": "",
                  "XmlUI": ""
                },
                {
                  "GUID": "6cc831",
                  "Name": "Card",
                  "Transform": {
                    "posX": -1.95241887E-06,
                    "posY": 1.50678957,
                    "posZ": -0.499996722,
                    "rotX": 0.0108914226,
                    "rotY": 180.001,
                    "rotZ": 0.004948483,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "",
                  "Description": "",
                  "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87027\",\n  \"locationBack\": {\n    \"connections\": \"Plus|Diamond|Tindalos\",\n    \"icons\": \"Spade|Portal\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Plus|Diamond|Tindalos\",\n    \"icons\": \"Spade|Portal\"\n  },\n  \"traits\": \"Arkham. Portal. Future.\",\n  \"type\": \"Location\"\n}",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 0.713235259,
                    "g": 0.713235259,
                    "b": 0.713235259
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": true,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": true,
                  "Tooltip": true,
                  "GridProjection": false,
                  "HideWhenFaceDown": true,
                  "Hands": true,
                  "CardID": 1104923,
                  "SidewaysCard": false,
                  "CustomDeck": {
                    "11049": {
                      "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                      "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                      "NumWidth": 10,
                      "NumHeight": 7,
                      "BackIsHidden": true,
                      "UniqueBack": true,
                      "Type": 0
                    }
                  },
                  "LuaScript": "",
                  "LuaScriptState": "",
                  "XmlUI": ""
                },
                {
                  "GUID": "825940",
                  "Name": "Card",
                  "Transform": {
                    "posX": -10.0034513,
                    "posY": 1.50974393,
                    "posZ": 10.497098,
                    "rotX": 0.0108916927,
                    "rotY": 179.997772,
                    "rotZ": 0.00494796457,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "",
                  "Description": "",
                  "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87017\",\n  \"locationBack\": {\n    \"connections\": \"Plus|Diamond|Tindalos\",\n    \"icons\": \"Spade|Portal\",\n    \"uses\": {\n      \"countPerInvestigator\": 3,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    },\n    \"victory\": 1\n  },\n  \"locationFront\": {\n    \"connections\": \"Plus|Diamond|Tindalos\",\n    \"icons\": \"Spade|Portal\"\n  },\n  \"traits\": \"Arkham. Portal. Present.\",\n  \"type\": \"Location\",\n  \"victory\": 1\n}",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 0.713235259,
                    "g": 0.713235259,
                    "b": 0.713235259
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": true,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": true,
                  "Tooltip": true,
                  "GridProjection": false,
                  "HideWhenFaceDown": true,
                  "Hands": true,
                  "CardID": 1104922,
                  "SidewaysCard": false,
                  "CustomDeck": {
                    "11049": {
                      "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                      "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                      "NumWidth": 10,
                      "NumHeight": 7,
                      "BackIsHidden": true,
                      "UniqueBack": true,
                      "Type": 0
                    }
                  },
                  "LuaScript": "",
                  "LuaScriptState": "",
                  "XmlUI": ""
                },
                {
                  "GUID": "dc7905",
                  "Name": "Card",
                  "Transform": {
                    "posX": -5.500006,
                    "posY": 1.50869024,
                    "posZ": 7.000004,
                    "rotX": 0.0108913425,
                    "rotY": 180.001816,
                    "rotZ": 0.004948491,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "",
                  "Description": "",
                  "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87028\",\n  \"locationBack\": {\n    \"connections\": \"Spade|Apostrophe|Tindalos\",\n    \"icons\": \"Diamond|Portal\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Spade|Apostrophe|Tindalos\",\n    \"icons\": \"Diamond|Portal\"\n  },\n  \"traits\": \"Arkham. Portal. Future.\",\n  \"type\": \"Location\"\n}",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 0.713235259,
                    "g": 0.713235259,
                    "b": 0.713235259
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": true,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": true,
                  "Tooltip": true,
                  "GridProjection": false,
                  "HideWhenFaceDown": true,
                  "Hands": true,
                  "CardID": 1104924,
                  "SidewaysCard": false,
                  "CustomDeck": {
                    "11049": {
                      "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                      "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                      "NumWidth": 10,
                      "NumHeight": 7,
                      "BackIsHidden": true,
                      "UniqueBack": true,
                      "Type": 0
                    }
                  },
                  "LuaScript": "",
                  "LuaScriptState": "",
                  "XmlUI": ""
                },
                {
                  "GUID": "e30486",
                  "Name": "Card",
                  "Transform": {
                    "posX": 18.0000019,
                    "posY": 1.50494993,
                    "posZ": -1.99999881,
                    "rotX": 0.0108915791,
                    "rotY": 179.9992,
                    "rotZ": 0.004947973,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "",
                  "Description": "",
                  "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87024\",\n  \"type\": \"Story\",\n  \"victory\": 1\n}",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 0.713235259,
                    "g": 0.713235259,
                    "b": 0.713235259
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": true,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": true,
                  "Tooltip": true,
                  "GridProjection": false,
                  "HideWhenFaceDown": true,
                  "Hands": true,
                  "CardID": 1104908,
                  "SidewaysCard": false,
                  "CustomDeck": {
                    "11049": {
                      "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                      "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                      "NumWidth": 10,
                      "NumHeight": 7,
                      "BackIsHidden": true,
                      "UniqueBack": true,
                      "Type": 0
                    }
                  },
                  "LuaScript": "",
                  "LuaScriptState": "",
                  "XmlUI": ""
                },
                {
                  "GUID": "fe84d6",
                  "Name": "Custom_Model",
                  "Transform": {
                    "posX": -5.00000334,
                    "posY": 1.49433136,
                    "posZ": -1.99999666,
                    "rotX": 359.9891,
                    "rotY": 359.9822,
                    "rotZ": -0.004944763,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "Text Tool",
                  "Description": "",
                  "GMNotes": "",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 0.0,
                    "g": 0.0,
                    "b": 0.0,
                    "a": 0.0
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": false,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": false,
                  "Tooltip": false,
                  "GridProjection": false,
                  "HideWhenFaceDown": false,
                  "Hands": false,
                  "CustomMesh": {
                    "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/1478820768302617365/27883B7913E0E69143C3AA03493B7E7C4E8C29C0/",
                    "DiffuseURL": "",
                    "NormalURL": "",
                    "ColliderURL": "",
                    "Convex": true,
                    "MaterialIndex": 1,
                    "TypeIndex": 0,
                    "CastShadows": true
                  },
                  "LuaScript": "-- Code for bag to identify text tool objects\r\nmovableTextTool_cowgoesmoo33 = true\r\n\r\n-- Number of characters before the text box width expands.\r\nEXPAND_INTERVAL = 20\r\n\r\n-- This table controls what is passed between save/load\r\ndata = {}\r\n\r\nfunction onLoad(saved_data)\r\n  if saved_data ~= '' then\r\n    data = JSON.decode(saved_data)\r\n    if data.text ~= '' then\r\n      self.interactable = data.interactable\r\n      staticMode()\r\n      return\r\n    end\r\n  else\r\n    data = {size=200, color=Color(0,0,0), text='', interactable=true,\r\n        enter_to_finish=false, autolock=false, autolift=false,\r\n        hover_height=0.05, box_transparency=1}\r\n  end\r\n\r\n  inputMode()\r\nend\r\n\r\n-- True if in the middle of delay after pressing Enter (with enter_to_finish on)\r\nfinishing = false\r\nfunction input_func(obj, color, input, stillEditing)\r\n  local params = getBox(input)\r\n  if params then\r\n    params.value = input\r\n    self.editInput(params)\r\n  end\r\n\r\n  if not stillEditing then\r\n    data.text = input\r\n    updateState()\r\n    if input ~= '' then staticMode(color) end\r\n  elseif data.enter_to_finish then\r\n    -- If enter is pressed: remove last newline and force finish\r\n    if not finishing and input:sub(-1) == '\\n' then\r\n      finishing = true\r\n      -- Delay to avoid user's Enter keypress being detected (opens chat box)\r\n      Wait.frames(function()\r\n        input = input:sub(1, -2)\r\n        data.text = input\r\n        updateState()\r\n        if input ~= '' then staticMode(color) else inputMode() end\r\n        finishing = false\r\n      end, 10)\r\n    end\r\n  end\r\nend\r\n\r\n-- When the inpupt box appears and lets the player type in it.\r\nfunction inputMode()\r\n  self.clearContextMenu()\r\n  self.clearInputs()\r\n  self.clearButtons()\r\n\r\n  local size = getBox(data.text, true)\r\n\r\n  self.createInput({\r\n    input_function = \"input_func\",\r\n    function_owner = self,\r\n    label          = \"Type Here\",\r\n    alignment      = 3,\r\n    position       = {x=0, y=data.hover_height, z=0},\r\n    rotation       = {0, 180, 0},\r\n    width          = size.width,\r\n    height         = size.height,\r\n    color          = getBackground(data.color),\r\n    font_color     = data.color,\r\n    font_size      = data.size,\r\n    value          = data.text,\r\n  })\r\n\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\nend\r\n\r\n-- When the input box disappears and displays the text.\r\nfunction staticMode(player)\r\n  self.clearContextMenu()\r\n  if data.autolock then\r\n    self.locked = true\r\n  end\r\n  if self.getInputs() and #self.getInputs() ~= 0 then\r\n    self.removeInput(0)\r\n  end\r\n\r\n  -- Clear from selecting player\r\n  if player then\r\n    self.removeFromPlayerSelection(player)\r\n  end\r\n\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  self.createButton({\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=self,\r\n    position={0,data.hover_height,0}, rotation={0,180,0}, height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  })\r\n\r\n  self.addContextMenuItem('Edit Text', function(color)\r\n    self.removeFromPlayerSelection(color)\r\n    inputMode()\r\n  end)\r\n  self.addContextMenuItem('Clear', function(color)\r\n    applyMultiple(color, 'clear', _, true)\r\n  end)\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\n  self.addContextMenuItem('Permanently Attach', attemptAttach)\r\n  self.addContextMenuItem('Permalock', function(color)\r\n    applyMultiple(color, 'permalock', _, true)\r\n  end)\r\nend\r\n\r\nfunction changeSize(params)\r\n  local delta = params[1]\r\n  local newSize = data.size + delta\r\n  if newSize > 800  or newSize < 50 then\r\n    return\r\n  end\r\n  data.size = newSize\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_size=data.size})\r\n  else\r\n    local size = getBox(data.text, true)\r\n    self.editInput({width=size.width, height=size.height, font_size=data.size})\r\n  end\r\nend\r\n\r\nfunction setColor(params)\r\n  if params and params[1] then\r\n    data.color = params[1]\r\n  else\r\n    data.color = self.getColorTint():setAt('a', 1) -- Take on color of object tint\r\n  end\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_color=data.color})\r\n  else\r\n    self.editInput({font_color=data.color, color=getBackground(data.color)})\r\n  end\r\nend\r\n\r\nfunction getBackground(color) --determines whether to use black or white depending on luminance\r\n  local r,g,b = Color(color):get()\r\n\r\n  local lum = 0.2126*r + 0.7152*g + 0.0722*b\r\n  if lum > 0.75 then\r\n    return {0.2,0.2,0.2, data.box_transparency}\r\n  else\r\n    return {1,1,1, data.box_transparency}\r\n  end\r\nend\r\n\r\nfunction clear()\r\n  data.text = ''\r\n  updateState()\r\n  inputMode()\r\nend\r\n\r\nfunction permalock()\r\n  self.interactable = false\r\n  data.interactable = false\r\n  updateState()\r\nend\r\n\r\nlocal target_script = [[\r\nfunction onLoad(script_state)\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    for _,entry in ipairs(state) do\r\n      self.createButton(entry)\r\n    end\r\n    self.addContextMenuItem('Clear All Text', function(color)\r\n      self.clearContextMenu()\r\n      self.clearButtons()\r\n      self.script_state = ''\r\n      self.script_code = ''\r\n    end)\r\n  end\r\nend\r\n]]\r\n\r\nfunction attemptAttach(player_color)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  local attachee\r\n  local attachers = {}\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if obj ~= self then\r\n        table.insert(attachers, obj)\r\n      end\r\n    else\r\n      if attachee then\r\n        broadcastToColor(\"More than one target selected.\", player_color)\r\n        return\r\n      else\r\n        attachee = obj\r\n      end\r\n    end\r\n  end\r\n  if attachee then\r\n    local code = attachee.script_code\r\n    if code and code ~= '' and code ~= target_script then\r\n      broadcastToColor(\"Warning: script on card has been overriden. Rewind time to undo.\", player_color)\r\n    end\r\n    for i,attacher in ipairs(attachers) do\r\n      attacher.call('attach', {target = attachee})\r\n    end\r\n    attach({target = attachee})\r\n    local type, flip = attachee.type, attachee.getRotation().z\r\n    if (type == 'Card' or type == 'Deck') and flip > 175 and flip < 185 then\r\n      broadcastToColor(\"Warning: text will not display if card or deck is facing down.\", player_color)\r\n    end\r\n  else\r\n    broadcastToColor(\"You must have a target object in your selection (using click-and-drag or Ctrl+Click) to use this option.\", player_color)\r\n  end\r\nend\r\n\r\nfunction attach(params)\r\n  local target = params.target\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  local textRotation = self.getRotation():sub(target.getRotation())\r\n    :add(Vector(180, 0, 180))\r\n\r\n  local textPosition = target.positionToLocal(\r\n    self.getPosition():add(Vector(0, data.hover_height, 0))\r\n  )\r\n  textPosition.x = -textPosition.x\r\n\r\n  local textScale = {}\r\n  textScale.x = self.getScale().x / target.getScale().x\r\n  textScale.y = self.getScale().x / target.getScale().y\r\n  textScale.z = self.getScale().x / target.getScale().z\r\n\r\n  local details = {\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=nil,\r\n    position=textPosition,\r\n    rotation=textRotation,\r\n    scale=textScale,\r\n    height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  }\r\n\r\n  target.createButton(details)\r\n\r\n  local script_state = target.script_state\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    table.insert(state, details)\r\n    target.script_state = JSON.encode(state)\r\n  else\r\n    target.script_state = JSON.encode({[1]=details})\r\n  end\r\n\r\n  target.script_code = target_script\r\n\r\n  self.destruct()\r\nend\r\n\r\nfunction applyMultiple(player_color, func_string, params, static_only)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if not static_only or obj.call('isStatic') then\r\n        obj.call(func_string, params)\r\n      end\r\n    end\r\n  end\r\nend\r\n\r\nfunction isStatic()\r\n  local input = self.getInputs()\r\n  return not input or #input == 0\r\nend\r\n\r\nfunction getBox(input, force)\r\n  local maxLength, lineCount = EXPAND_INTERVAL, 1\r\n  local lineLength = 0\r\n  for i = 1, #input do\r\n    local c = input:sub(i,i)\r\n    if c == '\\n' then\r\n      lineCount = lineCount + 1\r\n      if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n      lineLength = 0\r\n    else\r\n      lineLength = lineLength + 1\r\n    end\r\n  end\r\n  if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n\r\n  newWidth = data.size * maxLength * 0.9\r\n  newHeight = data.size * lineCount + 23\r\n\r\n  if force or boxWidth ~= newWidth or boxHeight ~= newHeight then\r\n    boxWidth, boxHeight = newWidth, newHeight\r\n    return {width = boxWidth, height = boxHeight}\r\n  end\r\n  return nil\r\nend\r\n\r\ntemp_lift = nil\r\nfunction onPickUp(player_color)\r\n  if data.autolift then\r\n    local player = Player[player_color]\r\n    temp_lift = player.lift_height\r\n    player.lift_height = 0\r\n  end\r\nend\r\n\r\nfunction onDrop(player_color)\r\n  if data.autolift and temp_lift then\r\n    Player[player_color].lift_height = temp_lift\r\n  end\r\nend\r\n\r\n-- Should be called every time data is modified, allows info to be saved on copy/paste\r\nfunction updateState()\r\n  self.script_state = JSON.encode(data)\r\nend\r\n\r\nfunction onSave()\r\n  self.script_state = JSON.encode(data)\r\n  return self.script_state\r\nend",
                  "LuaScriptState": "{\"autolift\":false,\"autolock\":false,\"box_transparency\":1,\"color\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1},\"enter_to_finish\":false,\"hover_height\":0.05,\"interactable\":true,\"size\":350,\"text\":\"Futur\"}",
                  "XmlUI": ""
                }
              ]
            },
            {
              "GUID": "b042a5",
              "Name": "Custom_Model",
              "Transform": {
                "posX": -22.9999924,
                "posY": 1.77099919,
                "posZ": 25.5000076,
                "rotX": 4.62726439E-06,
                "rotY": -9.451893E-05,
                "rotZ": -1.9683921E-07,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "Text Tool",
              "Description": "",
              "GMNotes": "",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 0.0,
                "g": 0.0,
                "b": 0.0,
                "a": 0.0
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": false,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": false,
              "Tooltip": false,
              "GridProjection": false,
              "HideWhenFaceDown": false,
              "Hands": false,
              "CustomMesh": {
                "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/1478820768302617365/27883B7913E0E69143C3AA03493B7E7C4E8C29C0/",
                "DiffuseURL": "",
                "NormalURL": "",
                "ColliderURL": "",
                "Convex": true,
                "MaterialIndex": 1,
                "TypeIndex": 0,
                "CastShadows": true
              },
              "LuaScript": "-- Code for bag to identify text tool objects\r\nmovableTextTool_cowgoesmoo33 = true\r\n\r\n-- Number of characters before the text box width expands.\r\nEXPAND_INTERVAL = 20\r\n\r\n-- This table controls what is passed between save/load\r\ndata = {}\r\n\r\nfunction onLoad(saved_data)\r\n  if saved_data ~= '' then\r\n    data = JSON.decode(saved_data)\r\n    if data.text ~= '' then\r\n      self.interactable = data.interactable\r\n      staticMode()\r\n      return\r\n    end\r\n  else\r\n    data = {size=200, color=Color(0,0,0), text='', interactable=true,\r\n        enter_to_finish=false, autolock=false, autolift=false,\r\n        hover_height=0.05, box_transparency=1}\r\n  end\r\n\r\n  inputMode()\r\nend\r\n\r\n-- True if in the middle of delay after pressing Enter (with enter_to_finish on)\r\nfinishing = false\r\nfunction input_func(obj, color, input, stillEditing)\r\n  local params = getBox(input)\r\n  if params then\r\n    params.value = input\r\n    self.editInput(params)\r\n  end\r\n\r\n  if not stillEditing then\r\n    data.text = input\r\n    updateState()\r\n    if input ~= '' then staticMode(color) end\r\n  elseif data.enter_to_finish then\r\n    -- If enter is pressed: remove last newline and force finish\r\n    if not finishing and input:sub(-1) == '\\n' then\r\n      finishing = true\r\n      -- Delay to avoid user's Enter keypress being detected (opens chat box)\r\n      Wait.frames(function()\r\n        input = input:sub(1, -2)\r\n        data.text = input\r\n        updateState()\r\n        if input ~= '' then staticMode(color) else inputMode() end\r\n        finishing = false\r\n      end, 10)\r\n    end\r\n  end\r\nend\r\n\r\n-- When the inpupt box appears and lets the player type in it.\r\nfunction inputMode()\r\n  self.clearContextMenu()\r\n  self.clearInputs()\r\n  self.clearButtons()\r\n\r\n  local size = getBox(data.text, true)\r\n\r\n  self.createInput({\r\n    input_function = \"input_func\",\r\n    function_owner = self,\r\n    label          = \"Type Here\",\r\n    alignment      = 3,\r\n    position       = {x=0, y=data.hover_height, z=0},\r\n    rotation       = {0, 180, 0},\r\n    width          = size.width,\r\n    height         = size.height,\r\n    color          = getBackground(data.color),\r\n    font_color     = data.color,\r\n    font_size      = data.size,\r\n    value          = data.text,\r\n  })\r\n\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\nend\r\n\r\n-- When the input box disappears and displays the text.\r\nfunction staticMode(player)\r\n  self.clearContextMenu()\r\n  if data.autolock then\r\n    self.locked = true\r\n  end\r\n  if self.getInputs() and #self.getInputs() ~= 0 then\r\n    self.removeInput(0)\r\n  end\r\n\r\n  -- Clear from selecting player\r\n  if player then\r\n    self.removeFromPlayerSelection(player)\r\n  end\r\n\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  self.createButton({\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=self,\r\n    position={0,data.hover_height,0}, rotation={0,180,0}, height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  })\r\n\r\n  self.addContextMenuItem('Edit Text', function(color)\r\n    self.removeFromPlayerSelection(color)\r\n    inputMode()\r\n  end)\r\n  self.addContextMenuItem('Clear', function(color)\r\n    applyMultiple(color, 'clear', _, true)\r\n  end)\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\n  self.addContextMenuItem('Permanently Attach', attemptAttach)\r\n  self.addContextMenuItem('Permalock', function(color)\r\n    applyMultiple(color, 'permalock', _, true)\r\n  end)\r\nend\r\n\r\nfunction changeSize(params)\r\n  local delta = params[1]\r\n  local newSize = data.size + delta\r\n  if newSize > 800  or newSize < 50 then\r\n    return\r\n  end\r\n  data.size = newSize\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_size=data.size})\r\n  else\r\n    local size = getBox(data.text, true)\r\n    self.editInput({width=size.width, height=size.height, font_size=data.size})\r\n  end\r\nend\r\n\r\nfunction setColor(params)\r\n  if params and params[1] then\r\n    data.color = params[1]\r\n  else\r\n    data.color = self.getColorTint():setAt('a', 1) -- Take on color of object tint\r\n  end\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_color=data.color})\r\n  else\r\n    self.editInput({font_color=data.color, color=getBackground(data.color)})\r\n  end\r\nend\r\n\r\nfunction getBackground(color) --determines whether to use black or white depending on luminance\r\n  local r,g,b = Color(color):get()\r\n\r\n  local lum = 0.2126*r + 0.7152*g + 0.0722*b\r\n  if lum > 0.75 then\r\n    return {0.2,0.2,0.2, data.box_transparency}\r\n  else\r\n    return {1,1,1, data.box_transparency}\r\n  end\r\nend\r\n\r\nfunction clear()\r\n  data.text = ''\r\n  updateState()\r\n  inputMode()\r\nend\r\n\r\nfunction permalock()\r\n  self.interactable = false\r\n  data.interactable = false\r\n  updateState()\r\nend\r\n\r\nlocal target_script = [[\r\nfunction onLoad(script_state)\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    for _,entry in ipairs(state) do\r\n      self.createButton(entry)\r\n    end\r\n    self.addContextMenuItem('Clear All Text', function(color)\r\n      self.clearContextMenu()\r\n      self.clearButtons()\r\n      self.script_state = ''\r\n      self.script_code = ''\r\n    end)\r\n  end\r\nend\r\n]]\r\n\r\nfunction attemptAttach(player_color)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  local attachee\r\n  local attachers = {}\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if obj ~= self then\r\n        table.insert(attachers, obj)\r\n      end\r\n    else\r\n      if attachee then\r\n        broadcastToColor(\"More than one target selected.\", player_color)\r\n        return\r\n      else\r\n        attachee = obj\r\n      end\r\n    end\r\n  end\r\n  if attachee then\r\n    local code = attachee.script_code\r\n    if code and code ~= '' and code ~= target_script then\r\n      broadcastToColor(\"Warning: script on card has been overriden. Rewind time to undo.\", player_color)\r\n    end\r\n    for i,attacher in ipairs(attachers) do\r\n      attacher.call('attach', {target = attachee})\r\n    end\r\n    attach({target = attachee})\r\n    local type, flip = attachee.type, attachee.getRotation().z\r\n    if (type == 'Card' or type == 'Deck') and flip > 175 and flip < 185 then\r\n      broadcastToColor(\"Warning: text will not display if card or deck is facing down.\", player_color)\r\n    end\r\n  else\r\n    broadcastToColor(\"You must have a target object in your selection (using click-and-drag or Ctrl+Click) to use this option.\", player_color)\r\n  end\r\nend\r\n\r\nfunction attach(params)\r\n  local target = params.target\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  local textRotation = self.getRotation():sub(target.getRotation())\r\n    :add(Vector(180, 0, 180))\r\n\r\n  local textPosition = target.positionToLocal(\r\n    self.getPosition():add(Vector(0, data.hover_height, 0))\r\n  )\r\n  textPosition.x = -textPosition.x\r\n\r\n  local textScale = {}\r\n  textScale.x = self.getScale().x / target.getScale().x\r\n  textScale.y = self.getScale().x / target.getScale().y\r\n  textScale.z = self.getScale().x / target.getScale().z\r\n\r\n  local details = {\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=nil,\r\n    position=textPosition,\r\n    rotation=textRotation,\r\n    scale=textScale,\r\n    height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  }\r\n\r\n  target.createButton(details)\r\n\r\n  local script_state = target.script_state\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    table.insert(state, details)\r\n    target.script_state = JSON.encode(state)\r\n  else\r\n    target.script_state = JSON.encode({[1]=details})\r\n  end\r\n\r\n  target.script_code = target_script\r\n\r\n  self.destruct()\r\nend\r\n\r\nfunction applyMultiple(player_color, func_string, params, static_only)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if not static_only or obj.call('isStatic') then\r\n        obj.call(func_string, params)\r\n      end\r\n    end\r\n  end\r\nend\r\n\r\nfunction isStatic()\r\n  local input = self.getInputs()\r\n  return not input or #input == 0\r\nend\r\n\r\nfunction getBox(input, force)\r\n  local maxLength, lineCount = EXPAND_INTERVAL, 1\r\n  local lineLength = 0\r\n  for i = 1, #input do\r\n    local c = input:sub(i,i)\r\n    if c == '\\n' then\r\n      lineCount = lineCount + 1\r\n      if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n      lineLength = 0\r\n    else\r\n      lineLength = lineLength + 1\r\n    end\r\n  end\r\n  if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n\r\n  newWidth = data.size * maxLength * 0.9\r\n  newHeight = data.size * lineCount + 23\r\n\r\n  if force or boxWidth ~= newWidth or boxHeight ~= newHeight then\r\n    boxWidth, boxHeight = newWidth, newHeight\r\n    return {width = boxWidth, height = boxHeight}\r\n  end\r\n  return nil\r\nend\r\n\r\ntemp_lift = nil\r\nfunction onPickUp(player_color)\r\n  if data.autolift then\r\n    local player = Player[player_color]\r\n    temp_lift = player.lift_height\r\n    player.lift_height = 0\r\n  end\r\nend\r\n\r\nfunction onDrop(player_color)\r\n  if data.autolift and temp_lift then\r\n    Player[player_color].lift_height = temp_lift\r\n  end\r\nend\r\n\r\n-- Should be called every time data is modified, allows info to be saved on copy/paste\r\nfunction updateState()\r\n  self.script_state = JSON.encode(data)\r\nend\r\n\r\nfunction onSave()\r\n  self.script_state = JSON.encode(data)\r\n  return self.script_state\r\nend",
              "LuaScriptState": "{\"autolift\":false,\"autolock\":false,\"box_transparency\":1,\"color\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1},\"enter_to_finish\":false,\"hover_height\":0.05,\"interactable\":true,\"size\":250,\"text\":\"2) Placer chaque époque\"}",
              "XmlUI": ""
            },
            {
              "GUID": "c72403",
              "Name": "Custom_Model_Bag",
              "Transform": {
                "posX": -25.9999924,
                "posY": 1.83999932,
                "posZ": 24.0000076,
                "rotX": -6.48417063E-06,
                "rotY": 180.001251,
                "rotZ": -6.32766842E-07,
                "scaleX": 0.7,
                "scaleY": 0.7,
                "scaleZ": 0.7
              },
              "Nickname": "Passé",
              "Description": "",
              "GMNotes": "",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": true,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": true,
              "Tooltip": true,
              "GridProjection": false,
              "HideWhenFaceDown": false,
              "Hands": false,
              "MaterialIndex": -1,
              "MeshIndex": -1,
              "CustomMesh": {
                "MeshURL": "https://pastebin.com/raw/ALrYhQGb",
                "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/5077277234366553874/6AD0ADBA7941ACCDAB1C18E898E706CAB8B5331F/",
                "NormalURL": "",
                "ColliderURL": "",
                "Convex": true,
                "MaterialIndex": 3,
                "TypeIndex": 6,
                "CustomShader": {
                  "SpecularColor": {
                    "r": 1.0,
                    "g": 1.0,
                    "b": 1.0
                  },
                  "SpecularIntensity": 0.0,
                  "SpecularSharpness": 2.0,
                  "FresnelStrength": 0.0
                },
                "CastShadows": true
              },
              "Bag": {
                "Order": 0
              },
              "LuaScript": "-- Utility memory bag by Directsun\r\n-- Version 2.7.0\r\n-- Fork of Memory Bag 2.0 by MrStump\r\n--\r\n-- Want to contribute? Create an issue or fork the code on GitHub and submit a pull request:\r\n-- https://github.com/sunflowermans/TTS-UtilityMemoryBag\r\n\r\n\r\nfunction updateSave()\r\n    local data_to_save = {[\"ml\"]=memoryList}\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n        -- memoryList[guid].rot.x = movedRotation.x\r\n        -- memoryList[guid].rot.y = movedRotation.y\r\n        -- memoryList[guid].rot.z = movedRotation.z\r\n    end\r\n\r\n    --theList[obj.getGUID()] = {\r\n    --    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n    --    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n    --    lock=obj.getLock()\r\n    --}\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n\r\n--Beginning Setup\r\n\r\n\r\n--Make setup button\r\nfunction createSetupButton()\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", {0.75, 0.75, 1})\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\n    -- return getAllObjects()\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1 * 1/self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor +2\r\n            objPos.z = objPos.z * globalScaleFactor\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = {0.75,0.25,0.25,0.6}\r\n            local colorMove = {0,0,1,0.6}\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function=funcName, function_owner=self,\r\n                position=objPos, rotation=rot, height=1000, width=1000,\r\n                color=color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n--Creates submit and cancel buttons\r\nfunction createSetupActionButtons(move)\r\n    self.createButton({\r\n       label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n       position={-1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n       font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    self.createButton({\r\n      label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n      position={-1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n      font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    if move == false then\r\n      self.createButton({\r\n          label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n          position={1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n          font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\r\n        })\r\n\r\n        self.createButton({\r\n            label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n            position={-1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n            font_size=250, color={0,0,0}, font_color={1,1,1}\r\n        })\r\n\r\n        if fresh == false then\r\n            self.createButton({\r\n                label=\"Mise à Jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                position={1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=180, color={0,0,0}, font_color={0.75,0.75,1}\r\n            })\r\n            self.createButton({\r\n                label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                position={1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\r\n            })\r\n        end\r\n    end\r\n\r\n    self.createButton({\r\n        label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n        position={0,0.3,-2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n\r\n--During Setup\r\n\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = {0,0,1,0.6}\r\n    local color = {0,1,0,0.6}\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({index=previousIndex, color=colorMove})\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({index=index, color=color})\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n            lock=obj.getLock(),\r\n            tint=obj.getColorTint()\r\n        }\r\n        obj.highlightOn({0,1,0})\r\n    else\r\n        color = {0.75,0.25,0.25,0.6}\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({index=index, color=color})\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({index=index, color={0,1,0,0.6}})\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n                    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n                    lock=obj.getLock(),\r\n                    tint=obj.getColorTint()\r\n                }\r\n                obj.highlightOn({0,1,0})\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = {0.75,0.25,0.25,0.6}\r\n                self.editButton({index=index, color=color})\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", {1,1,1})\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", {1, 0.25, 0.25})\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", {0.75, 0.75, 1})\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", {0.75, 0.25, 0.25})\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k,v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", {0.25, 0.75, 0.25})\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", {1.0, 0.25, 0.25})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Removed\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", {0.75, 0.75, 1})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\n\r\n--After Setup\r\n\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={0,0.3,2.8}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={2,0.3,0}, rotation={0,90,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---  \r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    local bagObjList = self.getObjects()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid=guid, position=entry.pos, rotation=entry.rot, smooth=false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n\r\n--Utility functions\r\n\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x-p1.x)\r\n    deltaPos.y = (p2.y-p1.y) + yOffset\r\n    deltaPos.z = (p2.z-p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10^(dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample:\r\n{'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'}\r\n--]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend",
              "LuaScriptState": "{\"ml\":{\"06edc7\":{\"lock\":false,\"pos\":{\"x\":5.49999856948853,\"y\":1.51135206222534,\"z\":26.0000038146973},\"rot\":{\"x\":0.0108915101736784,\"y\":179.999389648438,\"z\":0.00494815688580275},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"0aeab2\":{\"lock\":false,\"pos\":{\"x\":-7,\"y\":1.5078,\"z\":20.5},\"rot\":{\"x\":0.0042,\"y\":224.995,\"z\":0.0112},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"1c7fa1\":{\"lock\":false,\"pos\":{\"x\":-1.00000059604645,\"y\":1.51124799251556,\"z\":22.5000038146973},\"rot\":{\"x\":0.0108920345082879,\"y\":179.994934082031,\"z\":0.00494729494675994},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"220649\":{\"lock\":false,\"pos\":{\"x\":-10,\"y\":1.5083,\"z\":22},\"rot\":{\"x\":0.0109,\"y\":179.9996,\"z\":0.005},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"2f42e1\":{\"lock\":false,\"pos\":{\"x\":3,\"y\":1.5076,\"z\":24},\"rot\":{\"x\":359.9903,\"y\":300.0201,\"z\":0.007},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"3c6cd6\":{\"lock\":false,\"pos\":{\"x\":-5.5,\"y\":1.5071,\"z\":17.5},\"rot\":{\"x\":-0.0049,\"y\":269.9948,\"z\":0.0109},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"400164\":{\"lock\":false,\"pos\":{\"x\":-4,\"y\":1.5075,\"z\":20.5},\"rot\":{\"x\":0.0112,\"y\":135.0029,\"z\":-0.0042},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"5354b7\":{\"lock\":false,\"pos\":{\"x\":-4,\"y\":1.5081,\"z\":23.5},\"rot\":{\"x\":0.0042,\"y\":224.9952,\"z\":0.0112},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"66f933\":{\"lock\":false,\"pos\":{\"x\":-10.5000019073486,\"y\":1.51273381710052,\"z\":26.0000171661377},\"rot\":{\"x\":0.0108915157616138,\"y\":179.999801635742,\"z\":0.00494813732802868},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"72f879\":{\"lock\":false,\"pos\":{\"x\":12.0000019073486,\"y\":1.51079070568085,\"z\":26.0000114440918},\"rot\":{\"x\":0.0108908489346504,\"y\":180.008224487305,\"z\":0.0049498425796628},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"7558e3\":{\"lock\":false,\"pos\":{\"x\":-5.5,\"y\":1.5088,\"z\":26.5},\"rot\":{\"x\":-0.0049,\"y\":269.9951,\"z\":0.0109},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"8eb5a4\":{\"lock\":false,\"pos\":{\"x\":-10.0000944137573,\"y\":1.51107490062714,\"z\":17.5000019073486},\"rot\":{\"x\":0.0108912037685514,\"y\":180.003921508789,\"z\":0.00494898483157158},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"8fefda\":{\"lock\":false,\"pos\":{\"x\":12.0000028610229,\"y\":1.50546813011169,\"z\":-1.99999821186066},\"rot\":{\"x\":0.0108916144818068,\"y\":179.998825073242,\"z\":0.00494803907349706},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"ad3e8b\":{\"lock\":false,\"pos\":{\"x\":-7,\"y\":1.5084,\"z\":23.5},\"rot\":{\"x\":0.0112,\"y\":135.0026,\"z\":-0.0042},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"d6fa6a\":{\"lock\":false,\"pos\":{\"x\":-13.0179862976074,\"y\":1.51325464248657,\"z\":27.0560684204102},\"rot\":{\"x\":0.0125913433730602,\"y\":179.238952636719,\"z\":0.00799231790006161},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"d7b93b\":{\"lock\":false,\"pos\":{\"x\":-5.5,\"y\":1.5089,\"z\":22},\"rot\":{\"x\":359.9891,\"y\":0.005,\"z\":-0.005},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}},\"d83899\":{\"lock\":false,\"pos\":{\"x\":-1,\"y\":1.5075,\"z\":22},\"rot\":{\"x\":0.0109,\"y\":179.9951,\"z\":0.005},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"f2c013\":{\"lock\":false,\"pos\":{\"x\":-2.00000143051147,\"y\":1.49968004226685,\"z\":27.5000038146973},\"rot\":{\"x\":359.989105224609,\"y\":0.00547973206266761,\"z\":-0.00494934059679508},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}}}}",
              "XmlUI": "",
              "ContainedObjects": [
                {
                  "GUID": "06edc7",
                  "Name": "Card",
                  "Transform": {
                    "posX": 5.49999857,
                    "posY": 1.51135206,
                    "posZ": 26.0000038,
                    "rotX": 0.0108915735,
                    "rotY": 179.99939,
                    "rotZ": 0.004948105,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "",
                  "Description": "",
                  "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87010\",\n  \"locationBack\": {\n    \"connections\": \"Hourglass|Heart|Tindalos\",\n    \"icons\": \"Triangle|Portal\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Hourglass|Heart|Tindalos\",\n    \"icons\": \"Triangle|Portal\"\n  },\n  \"traits\": \"Arkham. Portal. Past.\",\n  \"type\": \"Location\"\n}",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 0.713235259,
                    "g": 0.713235259,
                    "b": 0.713235259
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": true,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": true,
                  "Tooltip": true,
                  "GridProjection": false,
                  "HideWhenFaceDown": true,
                  "Hands": true,
                  "CardID": 1104913,
                  "SidewaysCard": false,
                  "CustomDeck": {
                    "11049": {
                      "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                      "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                      "NumWidth": 10,
                      "NumHeight": 7,
                      "BackIsHidden": true,
                      "UniqueBack": true,
                      "Type": 0
                    }
                  },
                  "LuaScript": "",
                  "LuaScriptState": "",
                  "XmlUI": ""
                },
                {
                  "GUID": "1c7fa1",
                  "Name": "Card",
                  "Transform": {
                    "posX": -1.00000072,
                    "posY": 1.511248,
                    "posZ": 22.5000038,
                    "rotX": 0.0108919181,
                    "rotY": 179.994934,
                    "rotZ": 0.00494723255,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "",
                  "Description": "",
                  "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87008\",\n  \"locationBack\": {\n    \"connections\": \"Star|Triangle|Tindalos\",\n    \"icons\": \"Hourglass|Portal\",\n    \"uses\": {\n      \"countPerInvestigator\": 3,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    },\n    \"victory\": 1\n  },\n  \"locationFront\": {\n    \"connections\": \"Star|Triangle|Tindalos\",\n    \"icons\": \"Hourglass|Portal\"\n  },\n  \"traits\": \"Arkham. Portal. Past.\",\n  \"type\": \"Location\"\n}",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 0.713235259,
                    "g": 0.713235259,
                    "b": 0.713235259
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": true,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": true,
                  "Tooltip": true,
                  "GridProjection": false,
                  "HideWhenFaceDown": true,
                  "Hands": true,
                  "CardID": 1104911,
                  "SidewaysCard": false,
                  "CustomDeck": {
                    "11049": {
                      "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                      "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                      "NumWidth": 10,
                      "NumHeight": 7,
                      "BackIsHidden": true,
                      "UniqueBack": true,
                      "Type": 0
                    }
                  },
                  "LuaScript": "",
                  "LuaScriptState": "",
                  "XmlUI": ""
                },
                {
                  "GUID": "66f933",
                  "Name": "Card",
                  "Transform": {
                    "posX": -10.500001,
                    "posY": 1.51273382,
                    "posZ": 26.0000172,
                    "rotX": 0.0108914506,
                    "rotY": 179.999771,
                    "rotZ": 0.0049482747,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "",
                  "Description": "",
                  "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87009\",\n  \"locationBack\": {\n    \"connections\": \"Star|Triangle|Tindalos\",\n    \"icons\": \"Hourglass|Portal\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Star|Triangle|Tindalos\",\n    \"icons\": \"Hourglass|Portal\"\n  },\n  \"traits\": \"Arkham. Portal. Past.\",\n  \"type\": \"Location\"\n}",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 0.713235259,
                    "g": 0.713235259,
                    "b": 0.713235259
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": true,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": true,
                  "Tooltip": true,
                  "GridProjection": false,
                  "HideWhenFaceDown": true,
                  "Hands": true,
                  "CardID": 1104912,
                  "SidewaysCard": false,
                  "CustomDeck": {
                    "11049": {
                      "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                      "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                      "NumWidth": 10,
                      "NumHeight": 7,
                      "BackIsHidden": true,
                      "UniqueBack": true,
                      "Type": 0
                    }
                  },
                  "LuaScript": "",
                  "LuaScriptState": "",
                  "XmlUI": ""
                },
                {
                  "GUID": "72f879",
                  "Name": "Card",
                  "Transform": {
                    "posX": 12.0000019,
                    "posY": 1.51079071,
                    "posZ": 26.0000114,
                    "rotX": 0.0108908005,
                    "rotY": 180.008224,
                    "rotZ": 0.004949783,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "",
                  "Description": "",
                  "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87011\",\n  \"locationBack\": {\n    \"connections\": \"Triangle\",\n    \"icons\": \"Heart\",\n    \"uses\": {\n      \"countPerInvestigator\": 2,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Triangle\",\n    \"icons\": \"Heart\"\n  },\n  \"traits\": \"Arkham. Past.\",\n  \"type\": \"Location\"\n}",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 0.713235259,
                    "g": 0.713235259,
                    "b": 0.713235259
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": true,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": true,
                  "Tooltip": true,
                  "GridProjection": false,
                  "HideWhenFaceDown": true,
                  "Hands": true,
                  "CardID": 1104915,
                  "SidewaysCard": false,
                  "CustomDeck": {
                    "11049": {
                      "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                      "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                      "NumWidth": 10,
                      "NumHeight": 7,
                      "BackIsHidden": true,
                      "UniqueBack": true,
                      "Type": 0
                    }
                  },
                  "LuaScript": "",
                  "LuaScriptState": "",
                  "XmlUI": ""
                },
                {
                  "GUID": "8eb5a4",
                  "Name": "Card",
                  "Transform": {
                    "posX": -10.0000944,
                    "posY": 1.5110749,
                    "posZ": 17.5000019,
                    "rotX": 0.01089117,
                    "rotY": 180.003937,
                    "rotZ": 0.00494909426,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "",
                  "Description": "",
                  "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87007\",\n  \"locationBack\": {\n    \"connections\": \"Hourglass|Tindalos\",\n    \"icons\": \"Star|Portal\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Hourglass|Tindalos\",\n    \"icons\": \"Star|Portal\"\n  },\n  \"traits\": \"Arkham. Portal. Past.\",\n  \"type\": \"Location\"\n}",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 0.713235259,
                    "g": 0.713235259,
                    "b": 0.713235259
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": true,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": true,
                  "Tooltip": true,
                  "GridProjection": false,
                  "HideWhenFaceDown": true,
                  "Hands": true,
                  "CardID": 1104910,
                  "SidewaysCard": false,
                  "CustomDeck": {
                    "11049": {
                      "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                      "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                      "NumWidth": 10,
                      "NumHeight": 7,
                      "BackIsHidden": true,
                      "UniqueBack": true,
                      "Type": 0
                    }
                  },
                  "LuaScript": "",
                  "LuaScriptState": "",
                  "XmlUI": ""
                },
                {
                  "GUID": "8fefda",
                  "Name": "Card",
                  "Transform": {
                    "posX": 12.0000029,
                    "posY": 1.50546813,
                    "posZ": -1.99999821,
                    "rotX": 0.0108916024,
                    "rotY": 179.998825,
                    "rotZ": 0.0049481173,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "",
                  "Description": "",
                  "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87006\",\n  \"type\": \"Story\",\n  \"victory\": 0\n}",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 0.713235259,
                    "g": 0.713235259,
                    "b": 0.713235259
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": true,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": true,
                  "Tooltip": true,
                  "GridProjection": false,
                  "HideWhenFaceDown": true,
                  "Hands": true,
                  "CardID": 1104901,
                  "SidewaysCard": false,
                  "CustomDeck": {
                    "11049": {
                      "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                      "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                      "NumWidth": 10,
                      "NumHeight": 7,
                      "BackIsHidden": true,
                      "UniqueBack": true,
                      "Type": 0
                    }
                  },
                  "LuaScript": "",
                  "LuaScriptState": "",
                  "XmlUI": ""
                },
                {
                  "GUID": "d6fa6a",
                  "Name": "Card",
                  "Transform": {
                    "posX": -13.0179834,
                    "posY": 1.51328886,
                    "posZ": 27.0560684,
                    "rotX": 0.0145532461,
                    "rotY": 179.238922,
                    "rotZ": 0.00703818258,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "",
                  "Description": "",
                  "GMNotes": "{\n  \"class\": \"Neutral\",\n  \"cycle\": \"Standalone\",\n  \"health\": 1,\n  \"id\": \"87023\",\n  \"sanity\": 2,\n  \"traits\": \"Scientist. Ally. Present.\",\n  \"type\": \"Asset\"\n}",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 0.713235259,
                    "g": 0.713235259,
                    "b": 0.713235259
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": true,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": true,
                  "Tooltip": true,
                  "GridProjection": false,
                  "HideWhenFaceDown": true,
                  "Hands": true,
                  "CardID": 1110702,
                  "SidewaysCard": false,
                  "CustomDeck": {
                    "11107": {
                      "FaceURL": "https://i.imgur.com/FhiblpC.jpg",
                      "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931552806915249927/583EE2570FC1A094D59B991E97AB542CA94BEBC9/",
                      "NumWidth": 10,
                      "NumHeight": 7,
                      "BackIsHidden": true,
                      "UniqueBack": false,
                      "Type": 0
                    }
                  },
                  "LuaScript": "",
                  "LuaScriptState": "",
                  "XmlUI": ""
                },
                {
                  "GUID": "f2c013",
                  "Name": "Custom_Model",
                  "Transform": {
                    "posX": -2.00000143,
                    "posY": 1.49968,
                    "posZ": 27.5000038,
                    "rotX": 359.9891,
                    "rotY": 0.00549316173,
                    "rotZ": -0.00494904071,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "Text Tool",
                  "Description": "",
                  "GMNotes": "",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 0.0,
                    "g": 0.0,
                    "b": 0.0,
                    "a": 0.0
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": false,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": false,
                  "Tooltip": false,
                  "GridProjection": false,
                  "HideWhenFaceDown": false,
                  "Hands": false,
                  "CustomMesh": {
                    "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/1478820768302617365/27883B7913E0E69143C3AA03493B7E7C4E8C29C0/",
                    "DiffuseURL": "",
                    "NormalURL": "",
                    "ColliderURL": "",
                    "Convex": true,
                    "MaterialIndex": 1,
                    "TypeIndex": 0,
                    "CastShadows": true
                  },
                  "LuaScript": "-- Code for bag to identify text tool objects\r\nmovableTextTool_cowgoesmoo33 = true\r\n\r\n-- Number of characters before the text box width expands.\r\nEXPAND_INTERVAL = 20\r\n\r\n-- This table controls what is passed between save/load\r\ndata = {}\r\n\r\nfunction onLoad(saved_data)\r\n  if saved_data ~= '' then\r\n    data = JSON.decode(saved_data)\r\n    if data.text ~= '' then\r\n      self.interactable = data.interactable\r\n      staticMode()\r\n      return\r\n    end\r\n  else\r\n    data = {size=200, color=Color(0,0,0), text='', interactable=true,\r\n        enter_to_finish=false, autolock=false, autolift=false,\r\n        hover_height=0.05, box_transparency=1}\r\n  end\r\n\r\n  inputMode()\r\nend\r\n\r\n-- True if in the middle of delay after pressing Enter (with enter_to_finish on)\r\nfinishing = false\r\nfunction input_func(obj, color, input, stillEditing)\r\n  local params = getBox(input)\r\n  if params then\r\n    params.value = input\r\n    self.editInput(params)\r\n  end\r\n\r\n  if not stillEditing then\r\n    data.text = input\r\n    updateState()\r\n    if input ~= '' then staticMode(color) end\r\n  elseif data.enter_to_finish then\r\n    -- If enter is pressed: remove last newline and force finish\r\n    if not finishing and input:sub(-1) == '\\n' then\r\n      finishing = true\r\n      -- Delay to avoid user's Enter keypress being detected (opens chat box)\r\n      Wait.frames(function()\r\n        input = input:sub(1, -2)\r\n        data.text = input\r\n        updateState()\r\n        if input ~= '' then staticMode(color) else inputMode() end\r\n        finishing = false\r\n      end, 10)\r\n    end\r\n  end\r\nend\r\n\r\n-- When the inpupt box appears and lets the player type in it.\r\nfunction inputMode()\r\n  self.clearContextMenu()\r\n  self.clearInputs()\r\n  self.clearButtons()\r\n\r\n  local size = getBox(data.text, true)\r\n\r\n  self.createInput({\r\n    input_function = \"input_func\",\r\n    function_owner = self,\r\n    label          = \"Type Here\",\r\n    alignment      = 3,\r\n    position       = {x=0, y=data.hover_height, z=0},\r\n    rotation       = {0, 180, 0},\r\n    width          = size.width,\r\n    height         = size.height,\r\n    color          = getBackground(data.color),\r\n    font_color     = data.color,\r\n    font_size      = data.size,\r\n    value          = data.text,\r\n  })\r\n\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\nend\r\n\r\n-- When the input box disappears and displays the text.\r\nfunction staticMode(player)\r\n  self.clearContextMenu()\r\n  if data.autolock then\r\n    self.locked = true\r\n  end\r\n  if self.getInputs() and #self.getInputs() ~= 0 then\r\n    self.removeInput(0)\r\n  end\r\n\r\n  -- Clear from selecting player\r\n  if player then\r\n    self.removeFromPlayerSelection(player)\r\n  end\r\n\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  self.createButton({\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=self,\r\n    position={0,data.hover_height,0}, rotation={0,180,0}, height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  })\r\n\r\n  self.addContextMenuItem('Edit Text', function(color)\r\n    self.removeFromPlayerSelection(color)\r\n    inputMode()\r\n  end)\r\n  self.addContextMenuItem('Clear', function(color)\r\n    applyMultiple(color, 'clear', _, true)\r\n  end)\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\n  self.addContextMenuItem('Permanently Attach', attemptAttach)\r\n  self.addContextMenuItem('Permalock', function(color)\r\n    applyMultiple(color, 'permalock', _, true)\r\n  end)\r\nend\r\n\r\nfunction changeSize(params)\r\n  local delta = params[1]\r\n  local newSize = data.size + delta\r\n  if newSize > 800  or newSize < 50 then\r\n    return\r\n  end\r\n  data.size = newSize\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_size=data.size})\r\n  else\r\n    local size = getBox(data.text, true)\r\n    self.editInput({width=size.width, height=size.height, font_size=data.size})\r\n  end\r\nend\r\n\r\nfunction setColor(params)\r\n  if params and params[1] then\r\n    data.color = params[1]\r\n  else\r\n    data.color = self.getColorTint():setAt('a', 1) -- Take on color of object tint\r\n  end\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_color=data.color})\r\n  else\r\n    self.editInput({font_color=data.color, color=getBackground(data.color)})\r\n  end\r\nend\r\n\r\nfunction getBackground(color) --determines whether to use black or white depending on luminance\r\n  local r,g,b = Color(color):get()\r\n\r\n  local lum = 0.2126*r + 0.7152*g + 0.0722*b\r\n  if lum > 0.75 then\r\n    return {0.2,0.2,0.2, data.box_transparency}\r\n  else\r\n    return {1,1,1, data.box_transparency}\r\n  end\r\nend\r\n\r\nfunction clear()\r\n  data.text = ''\r\n  updateState()\r\n  inputMode()\r\nend\r\n\r\nfunction permalock()\r\n  self.interactable = false\r\n  data.interactable = false\r\n  updateState()\r\nend\r\n\r\nlocal target_script = [[\r\nfunction onLoad(script_state)\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    for _,entry in ipairs(state) do\r\n      self.createButton(entry)\r\n    end\r\n    self.addContextMenuItem('Clear All Text', function(color)\r\n      self.clearContextMenu()\r\n      self.clearButtons()\r\n      self.script_state = ''\r\n      self.script_code = ''\r\n    end)\r\n  end\r\nend\r\n]]\r\n\r\nfunction attemptAttach(player_color)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  local attachee\r\n  local attachers = {}\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if obj ~= self then\r\n        table.insert(attachers, obj)\r\n      end\r\n    else\r\n      if attachee then\r\n        broadcastToColor(\"More than one target selected.\", player_color)\r\n        return\r\n      else\r\n        attachee = obj\r\n      end\r\n    end\r\n  end\r\n  if attachee then\r\n    local code = attachee.script_code\r\n    if code and code ~= '' and code ~= target_script then\r\n      broadcastToColor(\"Warning: script on card has been overriden. Rewind time to undo.\", player_color)\r\n    end\r\n    for i,attacher in ipairs(attachers) do\r\n      attacher.call('attach', {target = attachee})\r\n    end\r\n    attach({target = attachee})\r\n    local type, flip = attachee.type, attachee.getRotation().z\r\n    if (type == 'Card' or type == 'Deck') and flip > 175 and flip < 185 then\r\n      broadcastToColor(\"Warning: text will not display if card or deck is facing down.\", player_color)\r\n    end\r\n  else\r\n    broadcastToColor(\"You must have a target object in your selection (using click-and-drag or Ctrl+Click) to use this option.\", player_color)\r\n  end\r\nend\r\n\r\nfunction attach(params)\r\n  local target = params.target\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  local textRotation = self.getRotation():sub(target.getRotation())\r\n    :add(Vector(180, 0, 180))\r\n\r\n  local textPosition = target.positionToLocal(\r\n    self.getPosition():add(Vector(0, data.hover_height, 0))\r\n  )\r\n  textPosition.x = -textPosition.x\r\n\r\n  local textScale = {}\r\n  textScale.x = self.getScale().x / target.getScale().x\r\n  textScale.y = self.getScale().x / target.getScale().y\r\n  textScale.z = self.getScale().x / target.getScale().z\r\n\r\n  local details = {\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=nil,\r\n    position=textPosition,\r\n    rotation=textRotation,\r\n    scale=textScale,\r\n    height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  }\r\n\r\n  target.createButton(details)\r\n\r\n  local script_state = target.script_state\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    table.insert(state, details)\r\n    target.script_state = JSON.encode(state)\r\n  else\r\n    target.script_state = JSON.encode({[1]=details})\r\n  end\r\n\r\n  target.script_code = target_script\r\n\r\n  self.destruct()\r\nend\r\n\r\nfunction applyMultiple(player_color, func_string, params, static_only)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if not static_only or obj.call('isStatic') then\r\n        obj.call(func_string, params)\r\n      end\r\n    end\r\n  end\r\nend\r\n\r\nfunction isStatic()\r\n  local input = self.getInputs()\r\n  return not input or #input == 0\r\nend\r\n\r\nfunction getBox(input, force)\r\n  local maxLength, lineCount = EXPAND_INTERVAL, 1\r\n  local lineLength = 0\r\n  for i = 1, #input do\r\n    local c = input:sub(i,i)\r\n    if c == '\\n' then\r\n      lineCount = lineCount + 1\r\n      if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n      lineLength = 0\r\n    else\r\n      lineLength = lineLength + 1\r\n    end\r\n  end\r\n  if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n\r\n  newWidth = data.size * maxLength * 0.9\r\n  newHeight = data.size * lineCount + 23\r\n\r\n  if force or boxWidth ~= newWidth or boxHeight ~= newHeight then\r\n    boxWidth, boxHeight = newWidth, newHeight\r\n    return {width = boxWidth, height = boxHeight}\r\n  end\r\n  return nil\r\nend\r\n\r\ntemp_lift = nil\r\nfunction onPickUp(player_color)\r\n  if data.autolift then\r\n    local player = Player[player_color]\r\n    temp_lift = player.lift_height\r\n    player.lift_height = 0\r\n  end\r\nend\r\n\r\nfunction onDrop(player_color)\r\n  if data.autolift and temp_lift then\r\n    Player[player_color].lift_height = temp_lift\r\n  end\r\nend\r\n\r\n-- Should be called every time data is modified, allows info to be saved on copy/paste\r\nfunction updateState()\r\n  self.script_state = JSON.encode(data)\r\nend\r\n\r\nfunction onSave()\r\n  self.script_state = JSON.encode(data)\r\n  return self.script_state\r\nend",
                  "LuaScriptState": "{\"autolift\":false,\"autolock\":false,\"box_transparency\":1,\"color\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1},\"enter_to_finish\":false,\"hover_height\":0.05,\"interactable\":true,\"size\":350,\"text\":\"Passé\"}",
                  "XmlUI": ""
                }
              ]
            },
            {
              "GUID": "cade6c",
              "Name": "Card",
              "Transform": {
                "posX": 5.49999952,
                "posY": 1.50888085,
                "posZ": 13.000001,
                "rotX": 0.01089172,
                "rotY": 179.9983,
                "rotZ": 0.00494803255,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "Description": "",
              "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87005a\",\n  \"locationBack\": {\n    \"connections\": \"Portal\",\n    \"icons\": \"Tindalos\"\n  },\n  \"locationFront\": {\n    \"connections\": \"Portal\",\n    \"icons\": \"Tindalos\"\n  },\n  \"traits\": \"Past. Present. Future.\",\n  \"type\": \"Location\"\n}",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 0.713235259,
                "g": 0.713235259,
                "b": 0.713235259
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": true,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": true,
              "Tooltip": true,
              "GridProjection": false,
              "HideWhenFaceDown": true,
              "Hands": true,
              "CardID": 1105114,
              "SidewaysCard": false,
              "CustomDeck": {
                "11051": {
                  "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                  "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                  "NumWidth": 10,
                  "NumHeight": 7,
                  "BackIsHidden": true,
                  "UniqueBack": true,
                  "Type": 0
                }
              },
              "LuaScript": "",
              "LuaScriptState": "",
              "XmlUI": ""
            },
            {
              "GUID": "f3db90",
              "Name": "Custom_Model_Bag",
              "Transform": {
                "posX": -22.99999,
                "posY": 1.83999932,
                "posZ": 24.0000114,
                "rotX": -7.62853733E-06,
                "rotY": 179.989731,
                "rotZ": -8.41185566E-10,
                "scaleX": 0.7,
                "scaleY": 0.7,
                "scaleZ": 0.7
              },
              "Nickname": "Présent",
              "Description": "",
              "GMNotes": "",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": true,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": true,
              "Tooltip": true,
              "GridProjection": false,
              "HideWhenFaceDown": false,
              "Hands": false,
              "MaterialIndex": -1,
              "MeshIndex": -1,
              "CustomMesh": {
                "MeshURL": "https://pastebin.com/raw/ALrYhQGb",
                "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/5077277234366553874/6AD0ADBA7941ACCDAB1C18E898E706CAB8B5331F/",
                "NormalURL": "",
                "ColliderURL": "",
                "Convex": true,
                "MaterialIndex": 3,
                "TypeIndex": 6,
                "CustomShader": {
                  "SpecularColor": {
                    "r": 1.0,
                    "g": 1.0,
                    "b": 1.0
                  },
                  "SpecularIntensity": 0.0,
                  "SpecularSharpness": 2.0,
                  "FresnelStrength": 0.0
                },
                "CastShadows": true
              },
              "Bag": {
                "Order": 0
              },
              "LuaScript": "-- Utility memory bag by Directsun\r\n-- Version 2.7.0\r\n-- Fork of Memory Bag 2.0 by MrStump\r\n--\r\n-- Want to contribute? Create an issue or fork the code on GitHub and submit a pull request:\r\n-- https://github.com/sunflowermans/TTS-UtilityMemoryBag\r\n\r\n\r\nfunction updateSave()\r\n    local data_to_save = {[\"ml\"]=memoryList}\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n        -- memoryList[guid].rot.x = movedRotation.x\r\n        -- memoryList[guid].rot.y = movedRotation.y\r\n        -- memoryList[guid].rot.z = movedRotation.z\r\n    end\r\n\r\n    --theList[obj.getGUID()] = {\r\n    --    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n    --    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n    --    lock=obj.getLock()\r\n    --}\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n\r\n--Beginning Setup\r\n\r\n\r\n--Make setup button\r\nfunction createSetupButton()\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", {0.75, 0.75, 1})\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\n    -- return getAllObjects()\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1 * 1/self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor +2\r\n            objPos.z = objPos.z * globalScaleFactor\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = {0.75,0.25,0.25,0.6}\r\n            local colorMove = {0,0,1,0.6}\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function=funcName, function_owner=self,\r\n                position=objPos, rotation=rot, height=1000, width=1000,\r\n                color=color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n--Creates submit and cancel buttons\r\nfunction createSetupActionButtons(move)\r\n    self.createButton({\r\n       label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n       position={-1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n       font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    self.createButton({\r\n      label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n      position={-1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n      font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    if move == false then\r\n      self.createButton({\r\n          label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n          position={1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n          font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\r\n        })\r\n\r\n        self.createButton({\r\n            label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n            position={-1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n            font_size=250, color={0,0,0}, font_color={1,1,1}\r\n        })\r\n\r\n        if fresh == false then\r\n            self.createButton({\r\n                label=\"Mise à Jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                position={1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=180, color={0,0,0}, font_color={0.75,0.75,1}\r\n            })\r\n            self.createButton({\r\n                label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                position={1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\r\n            })\r\n        end\r\n    end\r\n\r\n    self.createButton({\r\n        label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n        position={0,0.3,-2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n\r\n--During Setup\r\n\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = {0,0,1,0.6}\r\n    local color = {0,1,0,0.6}\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({index=previousIndex, color=colorMove})\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({index=index, color=color})\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n            lock=obj.getLock(),\r\n            tint=obj.getColorTint()\r\n        }\r\n        obj.highlightOn({0,1,0})\r\n    else\r\n        color = {0.75,0.25,0.25,0.6}\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({index=index, color=color})\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({index=index, color={0,1,0,0.6}})\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n                    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n                    lock=obj.getLock(),\r\n                    tint=obj.getColorTint()\r\n                }\r\n                obj.highlightOn({0,1,0})\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = {0.75,0.25,0.25,0.6}\r\n                self.editButton({index=index, color=color})\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", {1,1,1})\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", {1, 0.25, 0.25})\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", {0.75, 0.75, 1})\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", {0.75, 0.25, 0.25})\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k,v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", {0.25, 0.75, 0.25})\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", {1.0, 0.25, 0.25})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Removed\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", {0.75, 0.75, 1})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\n\r\n--After Setup\r\n\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={0,0.3,2.8}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={2,0.3,0}, rotation={0,90,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---  \r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    local bagObjList = self.getObjects()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid=guid, position=entry.pos, rotation=entry.rot, smooth=false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n\r\n--Utility functions\r\n\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x-p1.x)\r\n    deltaPos.y = (p2.y-p1.y) + yOffset\r\n    deltaPos.z = (p2.z-p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10^(dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample:\r\n{'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'}\r\n--]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend",
              "LuaScriptState": "{\"ml\":{\"195e4a\":{\"lock\":false,\"pos\":{\"x\":12,\"y\":1.5047,\"z\":13},\"rot\":{\"x\":0.0109,\"y\":179.9996,\"z\":0.005},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"204732\":{\"lock\":false,\"pos\":{\"x\":15,\"y\":1.5042,\"z\":11.5},\"rot\":{\"x\":0.0042,\"y\":224.995,\"z\":0.0112},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"21bfdd\":{\"lock\":false,\"pos\":{\"x\":11.9999990463257,\"y\":1.50746405124664,\"z\":8.50000190734863},\"rot\":{\"x\":0.0108916582539678,\"y\":179.998519897461,\"z\":0.00494788447394967},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"3d0be8\":{\"lock\":false,\"pos\":{\"x\":21,\"y\":1.50668680667877,\"z\":8.50000095367432},\"rot\":{\"x\":0.0108917523175478,\"y\":179.998046875,\"z\":0.00494791148230433},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"43f53e\":{\"lock\":false,\"pos\":{\"x\":16.5,\"y\":1.5052,\"z\":17.5},\"rot\":{\"x\":-0.0049,\"y\":269.9951,\"z\":0.0109},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"46ef5f\":{\"lock\":false,\"pos\":{\"x\":11.9999990463257,\"y\":1.50917494297028,\"z\":17.5000019073486},\"rot\":{\"x\":0.0108915008604527,\"y\":180.000106811523,\"z\":0.00494835153222084},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"4f9c28\":{\"lock\":false,\"pos\":{\"x\":18,\"y\":1.5039,\"z\":11.5},\"rot\":{\"x\":0.0112,\"y\":135.0029,\"z\":-0.0042},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"6be9fb\":{\"lock\":false,\"pos\":{\"x\":18,\"y\":1.5045,\"z\":14.5},\"rot\":{\"x\":0.0042,\"y\":224.995,\"z\":0.0112},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"70a1d6\":{\"lock\":false,\"pos\":{\"x\":21,\"y\":1.50839757919312,\"z\":17.5000019073486},\"rot\":{\"x\":0.0108919087797403,\"y\":179.99560546875,\"z\":0.00494741927832365},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"88507a\":{\"lock\":false,\"pos\":{\"x\":20.9999980926514,\"y\":1.51001346111298,\"z\":26.0000038146973},\"rot\":{\"x\":0.0108914021402597,\"y\":180.000274658203,\"z\":0.00494817132130265},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"9f298f\":{\"lock\":false,\"pos\":{\"x\":11.9999895095825,\"y\":1.50726616382599,\"z\":4.99995374679565},\"rot\":{\"x\":0.023111728951335,\"y\":179.977569580078,\"z\":0.0125852432101965},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"a7b6bf\":{\"lock\":false,\"pos\":{\"x\":21,\"y\":1.5039,\"z\":13},\"rot\":{\"x\":0.0109,\"y\":179.995,\"z\":0.0049},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"b931de\":{\"lock\":false,\"pos\":{\"x\":16.5,\"y\":1.5053,\"z\":13},\"rot\":{\"x\":359.9891,\"y\":0.0051,\"z\":-0.0049},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}},\"bad694\":{\"lock\":false,\"pos\":{\"x\":16.5,\"y\":1.49637150764465,\"z\":18.5000019073486},\"rot\":{\"x\":359.989105224609,\"y\":-0.000923676590900868,\"z\":-0.0049480046145618},\"tint\":{\"a\":0,\"b\":0,\"g\":0,\"r\":0}},\"be55dc\":{\"lock\":false,\"pos\":{\"x\":16.5,\"y\":1.5035,\"z\":8.5},\"rot\":{\"x\":-0.0049,\"y\":269.9948,\"z\":0.0109},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"d38e7c\":{\"lock\":false,\"pos\":{\"x\":15,\"y\":1.5047,\"z\":14.5},\"rot\":{\"x\":0.0112,\"y\":135.0027,\"z\":-0.0042},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"d3f185\":{\"lock\":false,\"pos\":{\"x\":21,\"y\":1.5056,\"z\":22},\"rot\":{\"x\":359.9891,\"y\":359.9918,\"z\":-0.005},\"tint\":{\"a\":1,\"b\":0.604529500007629,\"g\":0.604529500007629,\"r\":0.604529500007629}},\"d42bcb\":{\"lock\":false,\"pos\":{\"x\":14.9999990463257,\"y\":1.50520896911621,\"z\":-2.00011515617371},\"rot\":{\"x\":0.0108910808339715,\"y\":180.00439453125,\"z\":0.00494903093203902},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}}}}",
              "XmlUI": "",
              "ContainedObjects": [
                {
                  "GUID": "21bfdd",
                  "Name": "Card",
                  "Transform": {
                    "posX": 11.999999,
                    "posY": 1.507464,
                    "posZ": 8.500002,
                    "rotX": 0.0108916825,
                    "rotY": 179.99852,
                    "rotZ": 0.00494803535,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "",
                  "Description": "",
                  "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87016\",\n  \"locationBack\": {\n    \"connections\": \"Clover|Tindalos\",\n    \"icons\": \"SlantedEquals|Portal\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Clover|Tindalos\",\n    \"icons\": \"SlantedEquals|Portal\"\n  },\n  \"traits\": \"Arkham. Portal. Present.\",\n  \"type\": \"Location\"\n}",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 0.713235259,
                    "g": 0.713235259,
                    "b": 0.713235259
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": true,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": true,
                  "Tooltip": true,
                  "GridProjection": false,
                  "HideWhenFaceDown": true,
                  "Hands": true,
                  "CardID": 1104916,
                  "SidewaysCard": false,
                  "CustomDeck": {
                    "11049": {
                      "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                      "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                      "NumWidth": 10,
                      "NumHeight": 7,
                      "BackIsHidden": true,
                      "UniqueBack": true,
                      "Type": 0
                    }
                  },
                  "LuaScript": "",
                  "LuaScriptState": "",
                  "XmlUI": ""
                },
                {
                  "GUID": "3d0be8",
                  "Name": "Card",
                  "Transform": {
                    "posX": 21.0,
                    "posY": 1.50668681,
                    "posZ": 8.500001,
                    "rotX": 0.0108916415,
                    "rotY": 179.998047,
                    "rotZ": 0.004947883,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "",
                  "Description": "",
                  "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87018\",\n  \"locationBack\": {\n    \"connections\": \"SlantedEquals|Circle|Tindalos\",\n    \"icons\": \"Clover|Portal\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"SlantedEquals|Circle|Tindalos\",\n    \"icons\": \"Clover|Portal\"\n  },\n  \"traits\": \"Arkham. Portal. Present.\",\n  \"type\": \"Location\"\n}",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 0.713235259,
                    "g": 0.713235259,
                    "b": 0.713235259
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": true,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": true,
                  "Tooltip": true,
                  "GridProjection": false,
                  "HideWhenFaceDown": true,
                  "Hands": true,
                  "CardID": 1104918,
                  "SidewaysCard": false,
                  "CustomDeck": {
                    "11049": {
                      "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                      "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                      "NumWidth": 10,
                      "NumHeight": 7,
                      "BackIsHidden": true,
                      "UniqueBack": true,
                      "Type": 0
                    }
                  },
                  "LuaScript": "",
                  "LuaScriptState": "",
                  "XmlUI": ""
                },
                {
                  "GUID": "46ef5f",
                  "Name": "Card",
                  "Transform": {
                    "posX": 11.999999,
                    "posY": 1.509175,
                    "posZ": 17.5000019,
                    "rotX": 0.01089147,
                    "rotY": 180.000092,
                    "rotZ": 0.00494821928,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "",
                  "Description": "",
                  "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87017\",\n  \"locationBack\": {\n    \"connections\": \"SlantedEquals|Circle|Tindalos\",\n    \"icons\": \"Clover|Portal\",\n    \"uses\": {\n      \"countPerInvestigator\": 3,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    },\n    \"victory\": 1\n  },\n  \"locationFront\": {\n    \"connections\": \"SlantedEquals|Circle|Tindalos\",\n    \"icons\": \"Clover|Portal\"\n  },\n  \"traits\": \"Arkham. Portal. Present.\",\n  \"type\": \"Location\",\n  \"victory\": 1\n}",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 0.713235259,
                    "g": 0.713235259,
                    "b": 0.713235259
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": true,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": true,
                  "Tooltip": true,
                  "GridProjection": false,
                  "HideWhenFaceDown": true,
                  "Hands": true,
                  "CardID": 1104917,
                  "SidewaysCard": false,
                  "CustomDeck": {
                    "11049": {
                      "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                      "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                      "NumWidth": 10,
                      "NumHeight": 7,
                      "BackIsHidden": true,
                      "UniqueBack": true,
                      "Type": 0
                    }
                  },
                  "LuaScript": "",
                  "LuaScriptState": "",
                  "XmlUI": ""
                },
                {
                  "GUID": "70a1d6",
                  "Name": "Card",
                  "Transform": {
                    "posX": 21.0,
                    "posY": 1.50839758,
                    "posZ": 17.5000019,
                    "rotX": 0.0108918473,
                    "rotY": 179.99559,
                    "rotZ": 0.004947451,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "",
                  "Description": "",
                  "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87019\",\n  \"locationBack\": {\n    \"connections\": \"Clover|Crescent|Tindalos\",\n    \"icons\": \"Circle|Portal\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Clover|Crescent|Tindalos\",\n    \"icons\": \"Circle|Portal\"\n  },\n  \"traits\": \"Arkham. Portal. Present.\",\n  \"type\": \"Location\"\n}",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 0.713235259,
                    "g": 0.713235259,
                    "b": 0.713235259
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": true,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": true,
                  "Tooltip": true,
                  "GridProjection": false,
                  "HideWhenFaceDown": true,
                  "Hands": true,
                  "CardID": 1104919,
                  "SidewaysCard": false,
                  "CustomDeck": {
                    "11049": {
                      "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                      "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                      "NumWidth": 10,
                      "NumHeight": 7,
                      "BackIsHidden": true,
                      "UniqueBack": true,
                      "Type": 0
                    }
                  },
                  "LuaScript": "",
                  "LuaScriptState": "",
                  "XmlUI": ""
                },
                {
                  "GUID": "88507a",
                  "Name": "Card",
                  "Transform": {
                    "posX": 20.9999981,
                    "posY": 1.51001346,
                    "posZ": 26.0000038,
                    "rotX": 0.0108915474,
                    "rotY": 180.000259,
                    "rotZ": 0.004948244,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "",
                  "Description": "",
                  "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87020\",\n  \"locationBack\": {\n    \"connections\": \"Circle\",\n    \"icons\": \"Crescent\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Circle\",\n    \"icons\": \"Crescent\"\n  },\n  \"traits\": \"Arkham. Present.\",\n  \"type\": \"Location\"\n}",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 0.713235259,
                    "g": 0.713235259,
                    "b": 0.713235259
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": true,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": true,
                  "Tooltip": true,
                  "GridProjection": false,
                  "HideWhenFaceDown": true,
                  "Hands": true,
                  "CardID": 1104920,
                  "SidewaysCard": false,
                  "CustomDeck": {
                    "11049": {
                      "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                      "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                      "NumWidth": 10,
                      "NumHeight": 7,
                      "BackIsHidden": true,
                      "UniqueBack": true,
                      "Type": 0
                    }
                  },
                  "LuaScript": "",
                  "LuaScriptState": "",
                  "XmlUI": ""
                },
                {
                  "GUID": "9f298f",
                  "Name": "Card",
                  "Transform": {
                    "posX": 11.9999456,
                    "posY": 1.5076195,
                    "posZ": 5.000014,
                    "rotX": 0.002980932,
                    "rotY": 179.97934,
                    "rotZ": 0.06065447,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "",
                  "Description": "",
                  "GMNotes": "{\n  \"class\": \"Neutral\",\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"87014\",\n  \"sanity\": 1,\n  \"traits\": \"Scientist. Ally. Past.\",\n  \"type\": \"Asset\"\n}",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 0.713235259,
                    "g": 0.713235259,
                    "b": 0.713235259
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": true,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": true,
                  "Tooltip": true,
                  "GridProjection": false,
                  "HideWhenFaceDown": true,
                  "Hands": true,
                  "CardID": 1110700,
                  "SidewaysCard": false,
                  "CustomDeck": {
                    "11107": {
                      "FaceURL": "https://i.imgur.com/FhiblpC.jpg",
                      "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931552806915249927/583EE2570FC1A094D59B991E97AB542CA94BEBC9/",
                      "NumWidth": 10,
                      "NumHeight": 7,
                      "BackIsHidden": true,
                      "UniqueBack": false,
                      "Type": 0
                    }
                  },
                  "LuaScript": "",
                  "LuaScriptState": "",
                  "XmlUI": ""
                },
                {
                  "GUID": "bad694",
                  "Name": "Custom_Model",
                  "Transform": {
                    "posX": 16.5,
                    "posY": 1.49637151,
                    "posZ": 18.5000019,
                    "rotX": 359.9891,
                    "rotY": -0.0008569225,
                    "rotZ": -0.00494808424,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "Text Tool",
                  "Description": "",
                  "GMNotes": "",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 0.0,
                    "g": 0.0,
                    "b": 0.0,
                    "a": 0.0
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": false,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": false,
                  "Tooltip": false,
                  "GridProjection": false,
                  "HideWhenFaceDown": false,
                  "Hands": false,
                  "CustomMesh": {
                    "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/1478820768302617365/27883B7913E0E69143C3AA03493B7E7C4E8C29C0/",
                    "DiffuseURL": "",
                    "NormalURL": "",
                    "ColliderURL": "",
                    "Convex": true,
                    "MaterialIndex": 1,
                    "TypeIndex": 0,
                    "CastShadows": true
                  },
                  "LuaScript": "-- Code for bag to identify text tool objects\r\nmovableTextTool_cowgoesmoo33 = true\r\n\r\n-- Number of characters before the text box width expands.\r\nEXPAND_INTERVAL = 20\r\n\r\n-- This table controls what is passed between save/load\r\ndata = {}\r\n\r\nfunction onLoad(saved_data)\r\n  if saved_data ~= '' then\r\n    data = JSON.decode(saved_data)\r\n    if data.text ~= '' then\r\n      self.interactable = data.interactable\r\n      staticMode()\r\n      return\r\n    end\r\n  else\r\n    data = {size=200, color=Color(0,0,0), text='', interactable=true,\r\n        enter_to_finish=false, autolock=false, autolift=false,\r\n        hover_height=0.05, box_transparency=1}\r\n  end\r\n\r\n  inputMode()\r\nend\r\n\r\n-- True if in the middle of delay after pressing Enter (with enter_to_finish on)\r\nfinishing = false\r\nfunction input_func(obj, color, input, stillEditing)\r\n  local params = getBox(input)\r\n  if params then\r\n    params.value = input\r\n    self.editInput(params)\r\n  end\r\n\r\n  if not stillEditing then\r\n    data.text = input\r\n    updateState()\r\n    if input ~= '' then staticMode(color) end\r\n  elseif data.enter_to_finish then\r\n    -- If enter is pressed: remove last newline and force finish\r\n    if not finishing and input:sub(-1) == '\\n' then\r\n      finishing = true\r\n      -- Delay to avoid user's Enter keypress being detected (opens chat box)\r\n      Wait.frames(function()\r\n        input = input:sub(1, -2)\r\n        data.text = input\r\n        updateState()\r\n        if input ~= '' then staticMode(color) else inputMode() end\r\n        finishing = false\r\n      end, 10)\r\n    end\r\n  end\r\nend\r\n\r\n-- When the inpupt box appears and lets the player type in it.\r\nfunction inputMode()\r\n  self.clearContextMenu()\r\n  self.clearInputs()\r\n  self.clearButtons()\r\n\r\n  local size = getBox(data.text, true)\r\n\r\n  self.createInput({\r\n    input_function = \"input_func\",\r\n    function_owner = self,\r\n    label          = \"Type Here\",\r\n    alignment      = 3,\r\n    position       = {x=0, y=data.hover_height, z=0},\r\n    rotation       = {0, 180, 0},\r\n    width          = size.width,\r\n    height         = size.height,\r\n    color          = getBackground(data.color),\r\n    font_color     = data.color,\r\n    font_size      = data.size,\r\n    value          = data.text,\r\n  })\r\n\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\nend\r\n\r\n-- When the input box disappears and displays the text.\r\nfunction staticMode(player)\r\n  self.clearContextMenu()\r\n  if data.autolock then\r\n    self.locked = true\r\n  end\r\n  if self.getInputs() and #self.getInputs() ~= 0 then\r\n    self.removeInput(0)\r\n  end\r\n\r\n  -- Clear from selecting player\r\n  if player then\r\n    self.removeFromPlayerSelection(player)\r\n  end\r\n\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  self.createButton({\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=self,\r\n    position={0,data.hover_height,0}, rotation={0,180,0}, height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  })\r\n\r\n  self.addContextMenuItem('Edit Text', function(color)\r\n    self.removeFromPlayerSelection(color)\r\n    inputMode()\r\n  end)\r\n  self.addContextMenuItem('Clear', function(color)\r\n    applyMultiple(color, 'clear', _, true)\r\n  end)\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\n  self.addContextMenuItem('Permanently Attach', attemptAttach)\r\n  self.addContextMenuItem('Permalock', function(color)\r\n    applyMultiple(color, 'permalock', _, true)\r\n  end)\r\nend\r\n\r\nfunction changeSize(params)\r\n  local delta = params[1]\r\n  local newSize = data.size + delta\r\n  if newSize > 800  or newSize < 50 then\r\n    return\r\n  end\r\n  data.size = newSize\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_size=data.size})\r\n  else\r\n    local size = getBox(data.text, true)\r\n    self.editInput({width=size.width, height=size.height, font_size=data.size})\r\n  end\r\nend\r\n\r\nfunction setColor(params)\r\n  if params and params[1] then\r\n    data.color = params[1]\r\n  else\r\n    data.color = self.getColorTint():setAt('a', 1) -- Take on color of object tint\r\n  end\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_color=data.color})\r\n  else\r\n    self.editInput({font_color=data.color, color=getBackground(data.color)})\r\n  end\r\nend\r\n\r\nfunction getBackground(color) --determines whether to use black or white depending on luminance\r\n  local r,g,b = Color(color):get()\r\n\r\n  local lum = 0.2126*r + 0.7152*g + 0.0722*b\r\n  if lum > 0.75 then\r\n    return {0.2,0.2,0.2, data.box_transparency}\r\n  else\r\n    return {1,1,1, data.box_transparency}\r\n  end\r\nend\r\n\r\nfunction clear()\r\n  data.text = ''\r\n  updateState()\r\n  inputMode()\r\nend\r\n\r\nfunction permalock()\r\n  self.interactable = false\r\n  data.interactable = false\r\n  updateState()\r\nend\r\n\r\nlocal target_script = [[\r\nfunction onLoad(script_state)\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    for _,entry in ipairs(state) do\r\n      self.createButton(entry)\r\n    end\r\n    self.addContextMenuItem('Clear All Text', function(color)\r\n      self.clearContextMenu()\r\n      self.clearButtons()\r\n      self.script_state = ''\r\n      self.script_code = ''\r\n    end)\r\n  end\r\nend\r\n]]\r\n\r\nfunction attemptAttach(player_color)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  local attachee\r\n  local attachers = {}\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if obj ~= self then\r\n        table.insert(attachers, obj)\r\n      end\r\n    else\r\n      if attachee then\r\n        broadcastToColor(\"More than one target selected.\", player_color)\r\n        return\r\n      else\r\n        attachee = obj\r\n      end\r\n    end\r\n  end\r\n  if attachee then\r\n    local code = attachee.script_code\r\n    if code and code ~= '' and code ~= target_script then\r\n      broadcastToColor(\"Warning: script on card has been overriden. Rewind time to undo.\", player_color)\r\n    end\r\n    for i,attacher in ipairs(attachers) do\r\n      attacher.call('attach', {target = attachee})\r\n    end\r\n    attach({target = attachee})\r\n    local type, flip = attachee.type, attachee.getRotation().z\r\n    if (type == 'Card' or type == 'Deck') and flip > 175 and flip < 185 then\r\n      broadcastToColor(\"Warning: text will not display if card or deck is facing down.\", player_color)\r\n    end\r\n  else\r\n    broadcastToColor(\"You must have a target object in your selection (using click-and-drag or Ctrl+Click) to use this option.\", player_color)\r\n  end\r\nend\r\n\r\nfunction attach(params)\r\n  local target = params.target\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  local textRotation = self.getRotation():sub(target.getRotation())\r\n    :add(Vector(180, 0, 180))\r\n\r\n  local textPosition = target.positionToLocal(\r\n    self.getPosition():add(Vector(0, data.hover_height, 0))\r\n  )\r\n  textPosition.x = -textPosition.x\r\n\r\n  local textScale = {}\r\n  textScale.x = self.getScale().x / target.getScale().x\r\n  textScale.y = self.getScale().x / target.getScale().y\r\n  textScale.z = self.getScale().x / target.getScale().z\r\n\r\n  local details = {\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=nil,\r\n    position=textPosition,\r\n    rotation=textRotation,\r\n    scale=textScale,\r\n    height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  }\r\n\r\n  target.createButton(details)\r\n\r\n  local script_state = target.script_state\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    table.insert(state, details)\r\n    target.script_state = JSON.encode(state)\r\n  else\r\n    target.script_state = JSON.encode({[1]=details})\r\n  end\r\n\r\n  target.script_code = target_script\r\n\r\n  self.destruct()\r\nend\r\n\r\nfunction applyMultiple(player_color, func_string, params, static_only)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if not static_only or obj.call('isStatic') then\r\n        obj.call(func_string, params)\r\n      end\r\n    end\r\n  end\r\nend\r\n\r\nfunction isStatic()\r\n  local input = self.getInputs()\r\n  return not input or #input == 0\r\nend\r\n\r\nfunction getBox(input, force)\r\n  local maxLength, lineCount = EXPAND_INTERVAL, 1\r\n  local lineLength = 0\r\n  for i = 1, #input do\r\n    local c = input:sub(i,i)\r\n    if c == '\\n' then\r\n      lineCount = lineCount + 1\r\n      if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n      lineLength = 0\r\n    else\r\n      lineLength = lineLength + 1\r\n    end\r\n  end\r\n  if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n\r\n  newWidth = data.size * maxLength * 0.9\r\n  newHeight = data.size * lineCount + 23\r\n\r\n  if force or boxWidth ~= newWidth or boxHeight ~= newHeight then\r\n    boxWidth, boxHeight = newWidth, newHeight\r\n    return {width = boxWidth, height = boxHeight}\r\n  end\r\n  return nil\r\nend\r\n\r\ntemp_lift = nil\r\nfunction onPickUp(player_color)\r\n  if data.autolift then\r\n    local player = Player[player_color]\r\n    temp_lift = player.lift_height\r\n    player.lift_height = 0\r\n  end\r\nend\r\n\r\nfunction onDrop(player_color)\r\n  if data.autolift and temp_lift then\r\n    Player[player_color].lift_height = temp_lift\r\n  end\r\nend\r\n\r\n-- Should be called every time data is modified, allows info to be saved on copy/paste\r\nfunction updateState()\r\n  self.script_state = JSON.encode(data)\r\nend\r\n\r\nfunction onSave()\r\n  self.script_state = JSON.encode(data)\r\n  return self.script_state\r\nend",
                  "LuaScriptState": "{\"autolift\":false,\"autolock\":false,\"box_transparency\":1,\"color\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1},\"enter_to_finish\":false,\"hover_height\":0.05,\"interactable\":true,\"size\":350,\"text\":\"Présent\"}",
                  "XmlUI": ""
                },
                {
                  "GUID": "d42bcb",
                  "Name": "Card",
                  "Transform": {
                    "posX": 14.999999,
                    "posY": 1.505209,
                    "posZ": -2.000116,
                    "rotX": 0.010891079,
                    "rotY": 180.004364,
                    "rotZ": 0.0049490747,
                    "scaleX": 1.0,
                    "scaleY": 1.0,
                    "scaleZ": 1.0
                  },
                  "Nickname": "",
                  "Description": "",
                  "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87015\",\n  \"type\": \"Story\",\n  \"victory\": 0\n}",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 0.713235259,
                    "g": 0.713235259,
                    "b": 0.713235259
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": true,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": true,
                  "Tooltip": true,
                  "GridProjection": false,
                  "HideWhenFaceDown": true,
                  "Hands": true,
                  "CardID": 1104909,
                  "SidewaysCard": false,
                  "CustomDeck": {
                    "11049": {
                      "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                      "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                      "NumWidth": 10,
                      "NumHeight": 7,
                      "BackIsHidden": true,
                      "UniqueBack": true,
                      "Type": 0
                    }
                  },
                  "LuaScript": "",
                  "LuaScriptState": "",
                  "XmlUI": ""
                }
              ]
            },
            {
              "GUID": "f9e05e",
              "Name": "Custom_Model_Bag",
              "Transform": {
                "posX": -29.0,
                "posY": 1.7700001,
                "posZ": 17.0,
                "rotX": -5.40903056E-06,
                "rotY": 179.999466,
                "rotZ": 3.11711943E-07,
                "scaleX": 1.0,
                "scaleY": 0.562042058,
                "scaleZ": 1.0
              },
              "Nickname": "Machinations",
              "Description": "",
              "GMNotes": "",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": true,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": true,
              "Tooltip": true,
              "GridProjection": false,
              "HideWhenFaceDown": false,
              "Hands": false,
              "MaterialIndex": -1,
              "MeshIndex": -1,
              "CustomMesh": {
                "MeshURL": "https://raw.githubusercontent.com/RobMayer/TTSLibrary/master/advboxes/tuckbox_h_MSH.obj",
                "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/1983303656990210870/D2994AC54A968C74968E19B4F03195BC3664AEE5/",
                "NormalURL": "",
                "ColliderURL": "",
                "Convex": true,
                "MaterialIndex": 3,
                "TypeIndex": 6,
                "CustomShader": {
                  "SpecularColor": {
                    "r": 1.0,
                    "g": 1.0,
                    "b": 1.0
                  },
                  "SpecularIntensity": 0.0,
                  "SpecularSharpness": 2.0,
                  "FresnelStrength": 0.0
                },
                "CastShadows": true
              },
              "Bag": {
                "Order": 2
              },
              "LuaScript": "",
              "LuaScriptState": "",
              "XmlUI": "",
              "ContainedObjects": [
                {
                  "GUID": "0c0189",
                  "Name": "Custom_Model_Bag",
                  "Transform": {
                    "posX": -28.5,
                    "posY": 2.41592741,
                    "posZ": 17.0,
                    "rotX": -7.980598E-05,
                    "rotY": 179.979736,
                    "rotZ": -0.000112921014,
                    "scaleX": 0.7,
                    "scaleY": 0.7,
                    "scaleZ": 0.7
                  },
                  "Nickname": "Une Âpre Rivalité",
                  "Description": "Machination",
                  "GMNotes": "",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 1.0,
                    "g": 1.0,
                    "b": 1.0
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": true,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": true,
                  "Tooltip": true,
                  "GridProjection": false,
                  "HideWhenFaceDown": false,
                  "Hands": false,
                  "MaterialIndex": -1,
                  "MeshIndex": -1,
                  "CustomMesh": {
                    "MeshURL": "https://pastebin.com/raw/ALrYhQGb",
                    "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/5077277234366558480/31140655872853ACBC44735F25B0EE7E19C72536/",
                    "NormalURL": "",
                    "ColliderURL": "",
                    "Convex": true,
                    "MaterialIndex": 3,
                    "TypeIndex": 6,
                    "CustomShader": {
                      "SpecularColor": {
                        "r": 1.0,
                        "g": 1.0,
                        "b": 1.0
                      },
                      "SpecularIntensity": 0.0,
                      "SpecularSharpness": 2.0,
                      "FresnelStrength": 0.0
                    },
                    "CastShadows": true
                  },
                  "Bag": {
                    "Order": 0
                  },
                  "LuaScript": "-- Utility memory bag by Directsun\r\n-- Version 2.7.0\r\n-- Fork of Memory Bag 2.0 by MrStump\r\n--\r\n-- Want to contribute? Create an issue or fork the code on GitHub and submit a pull request:\r\n-- https://github.com/sunflowermans/TTS-UtilityMemoryBag\r\n\r\n\r\nfunction updateSave()\r\n    local data_to_save = {[\"ml\"]=memoryList}\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n        -- memoryList[guid].rot.x = movedRotation.x\r\n        -- memoryList[guid].rot.y = movedRotation.y\r\n        -- memoryList[guid].rot.z = movedRotation.z\r\n    end\r\n\r\n    --theList[obj.getGUID()] = {\r\n    --    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n    --    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n    --    lock=obj.getLock()\r\n    --}\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n\r\n--Beginning Setup\r\n\r\n\r\n--Make setup button\r\nfunction createSetupButton()\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", {0.75, 0.75, 1})\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\n    -- return getAllObjects()\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1 * 1/self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor +2\r\n            objPos.z = objPos.z * globalScaleFactor\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = {0.75,0.25,0.25,0.6}\r\n            local colorMove = {0,0,1,0.6}\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function=funcName, function_owner=self,\r\n                position=objPos, rotation=rot, height=1000, width=1000,\r\n                color=color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n--Creates submit and cancel buttons\r\nfunction createSetupActionButtons(move)\r\n    self.createButton({\r\n       label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n       position={-1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n       font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    self.createButton({\r\n      label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n      position={-1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n      font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    if move == false then\r\n      self.createButton({\r\n          label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n          position={1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n          font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\r\n        })\r\n\r\n        self.createButton({\r\n            label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n            position={-1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n            font_size=250, color={0,0,0}, font_color={1,1,1}\r\n        })\r\n\r\n        if fresh == false then\r\n            self.createButton({\r\n                label=\"Mise à Jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                position={1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=180, color={0,0,0}, font_color={0.75,0.75,1}\r\n            })\r\n            self.createButton({\r\n                label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                position={1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\r\n            })\r\n        end\r\n    end\r\n\r\n    self.createButton({\r\n        label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n        position={0,0.3,-2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n\r\n--During Setup\r\n\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = {0,0,1,0.6}\r\n    local color = {0,1,0,0.6}\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({index=previousIndex, color=colorMove})\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({index=index, color=color})\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n            lock=obj.getLock(),\r\n            tint=obj.getColorTint()\r\n        }\r\n        obj.highlightOn({0,1,0})\r\n    else\r\n        color = {0.75,0.25,0.25,0.6}\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({index=index, color=color})\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({index=index, color={0,1,0,0.6}})\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n                    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n                    lock=obj.getLock(),\r\n                    tint=obj.getColorTint()\r\n                }\r\n                obj.highlightOn({0,1,0})\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = {0.75,0.25,0.25,0.6}\r\n                self.editButton({index=index, color=color})\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", {1,1,1})\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", {1, 0.25, 0.25})\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", {0.75, 0.75, 1})\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", {0.75, 0.25, 0.25})\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k,v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", {0.25, 0.75, 0.25})\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", {1.0, 0.25, 0.25})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Removed\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", {0.75, 0.75, 1})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\n\r\n--After Setup\r\n\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={0,0.3,2.8}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={2,0.3,0}, rotation={0,90,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---  \r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    local bagObjList = self.getObjects()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid=guid, position=entry.pos, rotation=entry.rot, smooth=false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n\r\n--Utility functions\r\n\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x-p1.x)\r\n    deltaPos.y = (p2.y-p1.y) + yOffset\r\n    deltaPos.z = (p2.z-p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10^(dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample:\r\n{'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'}\r\n--]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend",
                  "LuaScriptState": "{\"ml\":{\"0013aa\":{\"lock\":false,\"pos\":{\"x\":-34.5,\"y\":1.7789,\"z\":3},\"rot\":{\"x\":0,\"y\":179.9788,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"2582e6\":{\"lock\":false,\"pos\":{\"x\":-12.5,\"y\":1.5213,\"z\":17.5},\"rot\":{\"x\":0.0109,\"y\":180.0123,\"z\":0.005},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"392434\":{\"lock\":false,\"pos\":{\"x\":-32,\"y\":1.7789,\"z\":6.5},\"rot\":{\"x\":0,\"y\":180.0022,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"45fcde\":{\"lock\":false,\"pos\":{\"x\":-34.5,\"y\":1.779,\"z\":10},\"rot\":{\"x\":-0.0001,\"y\":179.9815,\"z\":0.0032},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"6fb810\":{\"lock\":false,\"pos\":{\"x\":-32,\"y\":1.7789,\"z\":3},\"rot\":{\"x\":0,\"y\":179.9834,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"70c3c5\":{\"lock\":false,\"pos\":{\"x\":-19.5,\"y\":1.7789,\"z\":6},\"rot\":{\"x\":0,\"y\":180.0002,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"98d7a0\":{\"lock\":false,\"pos\":{\"x\":-34.5,\"y\":1.7789,\"z\":6.5},\"rot\":{\"x\":0,\"y\":179.9753,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e7eb14\":{\"lock\":false,\"pos\":{\"x\":35,\"y\":1.5561,\"z\":-8.5001},\"rot\":{\"x\":0.0924,\"y\":180.0009,\"z\":-0.0001},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}}}}",
                  "XmlUI": "",
                  "ContainedObjects": [
                    {
                      "GUID": "0013aa",
                      "Name": "Card",
                      "Transform": {
                        "posX": -34.5000076,
                        "posY": 1.77890623,
                        "posZ": 2.999994,
                        "rotX": -5.03522733E-06,
                        "rotY": 179.9789,
                        "rotZ": 4.032931E-08,
                        "scaleX": 1.0,
                        "scaleY": 1.0,
                        "scaleZ": 1.0
                      },
                      "Nickname": "",
                      "Description": "",
                      "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"87021\",\n  \"sanity\": 2,\n  \"traits\": \"Scientist. Ally. Present.\",\n  \"type\": \"Asset\"\n}",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 0.713235259,
                        "g": 0.713235259,
                        "b": 0.713235259
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": true,
                      "GridProjection": false,
                      "HideWhenFaceDown": true,
                      "Hands": true,
                      "CardID": 1110638,
                      "SidewaysCard": false,
                      "CustomDeck": {
                        "11106": {
                          "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                          "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                          "NumWidth": 10,
                          "NumHeight": 7,
                          "BackIsHidden": true,
                          "UniqueBack": false,
                          "Type": 0
                        }
                      },
                      "LuaScript": "",
                      "LuaScriptState": "",
                      "XmlUI": ""
                    },
                    {
                      "GUID": "2582e6",
                      "Name": "Card",
                      "Transform": {
                        "posX": -12.5000019,
                        "posY": 1.52129042,
                        "posZ": 17.5,
                        "rotX": 0.0108904168,
                        "rotY": 180.0123,
                        "rotZ": 0.00495064445,
                        "scaleX": 1.0,
                        "scaleY": 1.0,
                        "scaleZ": 1.0
                      },
                      "Nickname": "",
                      "Description": "",
                      "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"87013\",\n  \"sanity\": 2,\n  \"traits\": \"Scientist. Ally. Past.\",\n  \"type\": \"Asset\"\n}",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 0.713235259,
                        "g": 0.713235259,
                        "b": 0.713235259
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": true,
                      "GridProjection": false,
                      "HideWhenFaceDown": true,
                      "Hands": true,
                      "CardID": 1110643,
                      "SidewaysCard": false,
                      "CustomDeck": {
                        "11106": {
                          "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                          "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                          "NumWidth": 10,
                          "NumHeight": 7,
                          "BackIsHidden": true,
                          "UniqueBack": false,
                          "Type": 0
                        }
                      },
                      "LuaScript": "",
                      "LuaScriptState": "",
                      "XmlUI": ""
                    },
                    {
                      "GUID": "392434",
                      "Name": "Card",
                      "Transform": {
                        "posX": -32.0000038,
                        "posY": 1.778906,
                        "posZ": 6.499996,
                        "rotX": -4.97789961E-06,
                        "rotY": 180.002213,
                        "rotZ": -1.07611715E-08,
                        "scaleX": 1.0,
                        "scaleY": 1.0,
                        "scaleZ": 1.0
                      },
                      "Nickname": "",
                      "Description": "",
                      "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"87022\",\n  \"sanity\": 2,\n  \"traits\": \"Scientist. Ally. Present.\",\n  \"type\": \"Asset\"\n}",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 0.713235259,
                        "g": 0.713235259,
                        "b": 0.713235259
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": true,
                      "GridProjection": false,
                      "HideWhenFaceDown": true,
                      "Hands": true,
                      "CardID": 1110641,
                      "SidewaysCard": false,
                      "CustomDeck": {
                        "11106": {
                          "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                          "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                          "NumWidth": 10,
                          "NumHeight": 7,
                          "BackIsHidden": true,
                          "UniqueBack": false,
                          "Type": 0
                        }
                      },
                      "LuaScript": "",
                      "LuaScriptState": "",
                      "XmlUI": ""
                    },
                    {
                      "GUID": "45fcde",
                      "Name": "Card",
                      "Transform": {
                        "posX": -34.5000076,
                        "posY": 1.77882957,
                        "posZ": 9.999995,
                        "rotX": 0.000779528462,
                        "rotY": 179.981491,
                        "rotZ": -0.005320617,
                        "scaleX": 1.0,
                        "scaleY": 1.0,
                        "scaleZ": 1.0
                      },
                      "Nickname": "",
                      "Description": "",
                      "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"87012\",\n  \"sanity\": 2,\n  \"traits\": \"Scientist. Ally. Past.\",\n  \"type\": \"Asset\"\n}",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 0.713235259,
                        "g": 0.713235259,
                        "b": 0.713235259
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": true,
                      "GridProjection": false,
                      "HideWhenFaceDown": true,
                      "Hands": true,
                      "CardID": 1110642,
                      "SidewaysCard": false,
                      "CustomDeck": {
                        "11106": {
                          "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                          "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                          "NumWidth": 10,
                          "NumHeight": 7,
                          "BackIsHidden": true,
                          "UniqueBack": false,
                          "Type": 0
                        }
                      },
                      "LuaScript": "",
                      "LuaScriptState": "",
                      "XmlUI": ""
                    },
                    {
                      "GUID": "6fb810",
                      "Name": "Card",
                      "Transform": {
                        "posX": -32.0000038,
                        "posY": 1.77890623,
                        "posZ": 2.99999523,
                        "rotX": -4.96544726E-06,
                        "rotY": 179.983383,
                        "rotZ": -1.10588132E-07,
                        "scaleX": 1.0,
                        "scaleY": 1.0,
                        "scaleZ": 1.0
                      },
                      "Nickname": "",
                      "Description": "",
                      "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 1,\n  \"id\": \"87031\",\n  \"sanity\": 2,\n  \"traits\": \"Scientist. Ally. Future.\",\n  \"type\": \"Asset\"\n}",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 0.713235259,
                        "g": 0.713235259,
                        "b": 0.713235259
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": true,
                      "GridProjection": false,
                      "HideWhenFaceDown": true,
                      "Hands": true,
                      "CardID": 1110639,
                      "SidewaysCard": false,
                      "CustomDeck": {
                        "11106": {
                          "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                          "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                          "NumWidth": 10,
                          "NumHeight": 7,
                          "BackIsHidden": true,
                          "UniqueBack": false,
                          "Type": 0
                        }
                      },
                      "LuaScript": "",
                      "LuaScriptState": "",
                      "XmlUI": ""
                    },
                    {
                      "GUID": "70c3c5",
                      "Name": "Card",
                      "Transform": {
                        "posX": -19.5,
                        "posY": 1.778906,
                        "posZ": 6.00000048,
                        "rotX": -5.07190634E-06,
                        "rotY": 180.000214,
                        "rotZ": 1.7596248E-08,
                        "scaleX": 1.0,
                        "scaleY": 1.0,
                        "scaleZ": 1.0
                      },
                      "Nickname": "",
                      "Description": "",
                      "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"87036a\",\n  \"sanity\": 2,\n  \"traits\": \"Scientist. Ally.\",\n  \"type\": \"Asset\"\n}",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 0.713235259,
                        "g": 0.713235259,
                        "b": 0.713235259
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": true,
                      "GridProjection": false,
                      "HideWhenFaceDown": true,
                      "Hands": true,
                      "CardID": 1105126,
                      "SidewaysCard": false,
                      "CustomDeck": {
                        "11051": {
                          "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                          "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                          "NumWidth": 10,
                          "NumHeight": 7,
                          "BackIsHidden": true,
                          "UniqueBack": true,
                          "Type": 0
                        }
                      },
                      "LuaScript": "",
                      "LuaScriptState": "",
                      "XmlUI": ""
                    },
                    {
                      "GUID": "98d7a0",
                      "Name": "Card",
                      "Transform": {
                        "posX": -34.5000076,
                        "posY": 1.778906,
                        "posZ": 6.499994,
                        "rotX": -4.871313E-06,
                        "rotY": 179.975235,
                        "rotZ": 3.5704673E-08,
                        "scaleX": 1.0,
                        "scaleY": 1.0,
                        "scaleZ": 1.0
                      },
                      "Nickname": "",
                      "Description": "",
                      "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"87021\",\n  \"sanity\": 2,\n  \"traits\": \"Scientist. Ally. Present.\",\n  \"type\": \"Asset\"\n}",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 0.713235259,
                        "g": 0.713235259,
                        "b": 0.713235259
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": true,
                      "GridProjection": false,
                      "HideWhenFaceDown": true,
                      "Hands": true,
                      "CardID": 1110640,
                      "SidewaysCard": false,
                      "CustomDeck": {
                        "11106": {
                          "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                          "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                          "NumWidth": 10,
                          "NumHeight": 7,
                          "BackIsHidden": true,
                          "UniqueBack": false,
                          "Type": 0
                        }
                      },
                      "LuaScript": "",
                      "LuaScriptState": "",
                      "XmlUI": ""
                    },
                    {
                      "GUID": "e7eb14",
                      "Name": "Card",
                      "Transform": {
                        "posX": 35.0,
                        "posY": 1.55607271,
                        "posZ": -8.5001,
                        "rotX": 0.09232557,
                        "rotY": 180.000885,
                        "rotZ": -1.783932E-05,
                        "scaleX": 1.0,
                        "scaleY": 1.0,
                        "scaleZ": 1.0
                      },
                      "Nickname": "Une Âpre Rivalité",
                      "Description": "Machination",
                      "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87033\",\n  \"type\": \"Story\",\n  \"victory\": 1\n}",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 0.713235259,
                        "g": 0.713235259,
                        "b": 0.713235259
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": true,
                      "GridProjection": false,
                      "HideWhenFaceDown": true,
                      "Hands": true,
                      "CardID": 1104907,
                      "SidewaysCard": false,
                      "CustomDeck": {
                        "11049": {
                          "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                          "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                          "NumWidth": 10,
                          "NumHeight": 7,
                          "BackIsHidden": true,
                          "UniqueBack": true,
                          "Type": 0
                        }
                      },
                      "LuaScript": "",
                      "LuaScriptState": "",
                      "XmlUI": ""
                    }
                  ]
                },
                {
                  "GUID": "7f5aa5",
                  "Name": "Custom_Model_Bag",
                  "Transform": {
                    "posX": -29.0,
                    "posY": 2.42062354,
                    "posZ": 17.5,
                    "rotX": -3.43590327E-05,
                    "rotY": 179.9825,
                    "rotZ": -0.00021364665,
                    "scaleX": 0.7,
                    "scaleY": 0.7,
                    "scaleZ": 0.7
                  },
                  "Nickname": "Rédemption d'un Ancien Collègue",
                  "Description": "Machination",
                  "GMNotes": "",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 1.0,
                    "g": 1.0,
                    "b": 1.0
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": true,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": true,
                  "Tooltip": true,
                  "GridProjection": false,
                  "HideWhenFaceDown": false,
                  "Hands": false,
                  "MaterialIndex": -1,
                  "MeshIndex": -1,
                  "CustomMesh": {
                    "MeshURL": "https://pastebin.com/raw/ALrYhQGb",
                    "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/5077277234366558480/31140655872853ACBC44735F25B0EE7E19C72536/",
                    "NormalURL": "",
                    "ColliderURL": "",
                    "Convex": true,
                    "MaterialIndex": 3,
                    "TypeIndex": 6,
                    "CustomShader": {
                      "SpecularColor": {
                        "r": 1.0,
                        "g": 1.0,
                        "b": 1.0
                      },
                      "SpecularIntensity": 0.0,
                      "SpecularSharpness": 2.0,
                      "FresnelStrength": 0.0
                    },
                    "CastShadows": true
                  },
                  "Bag": {
                    "Order": 0
                  },
                  "LuaScript": "-- Utility memory bag by Directsun\r\n-- Version 2.7.0\r\n-- Fork of Memory Bag 2.0 by MrStump\r\n--\r\n-- Want to contribute? Create an issue or fork the code on GitHub and submit a pull request:\r\n-- https://github.com/sunflowermans/TTS-UtilityMemoryBag\r\n\r\n\r\nfunction updateSave()\r\n    local data_to_save = {[\"ml\"]=memoryList}\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n        -- memoryList[guid].rot.x = movedRotation.x\r\n        -- memoryList[guid].rot.y = movedRotation.y\r\n        -- memoryList[guid].rot.z = movedRotation.z\r\n    end\r\n\r\n    --theList[obj.getGUID()] = {\r\n    --    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n    --    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n    --    lock=obj.getLock()\r\n    --}\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n\r\n--Beginning Setup\r\n\r\n\r\n--Make setup button\r\nfunction createSetupButton()\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", {0.75, 0.75, 1})\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\n    -- return getAllObjects()\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1 * 1/self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor +2\r\n            objPos.z = objPos.z * globalScaleFactor\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = {0.75,0.25,0.25,0.6}\r\n            local colorMove = {0,0,1,0.6}\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function=funcName, function_owner=self,\r\n                position=objPos, rotation=rot, height=1000, width=1000,\r\n                color=color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n--Creates submit and cancel buttons\r\nfunction createSetupActionButtons(move)\r\n    self.createButton({\r\n       label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n       position={-1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n       font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    self.createButton({\r\n      label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n      position={-1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n      font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    if move == false then\r\n      self.createButton({\r\n          label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n          position={1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n          font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\r\n        })\r\n\r\n        self.createButton({\r\n            label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n            position={-1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n            font_size=250, color={0,0,0}, font_color={1,1,1}\r\n        })\r\n\r\n        if fresh == false then\r\n            self.createButton({\r\n                label=\"Mise à Jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                position={1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=180, color={0,0,0}, font_color={0.75,0.75,1}\r\n            })\r\n            self.createButton({\r\n                label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                position={1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\r\n            })\r\n        end\r\n    end\r\n\r\n    self.createButton({\r\n        label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n        position={0,0.3,-2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n\r\n--During Setup\r\n\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = {0,0,1,0.6}\r\n    local color = {0,1,0,0.6}\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({index=previousIndex, color=colorMove})\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({index=index, color=color})\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n            lock=obj.getLock(),\r\n            tint=obj.getColorTint()\r\n        }\r\n        obj.highlightOn({0,1,0})\r\n    else\r\n        color = {0.75,0.25,0.25,0.6}\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({index=index, color=color})\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({index=index, color={0,1,0,0.6}})\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n                    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n                    lock=obj.getLock(),\r\n                    tint=obj.getColorTint()\r\n                }\r\n                obj.highlightOn({0,1,0})\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = {0.75,0.25,0.25,0.6}\r\n                self.editButton({index=index, color=color})\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", {1,1,1})\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", {1, 0.25, 0.25})\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", {0.75, 0.75, 1})\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", {0.75, 0.25, 0.25})\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k,v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", {0.25, 0.75, 0.25})\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", {1.0, 0.25, 0.25})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Removed\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", {0.75, 0.75, 1})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\n\r\n--After Setup\r\n\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={0,0.3,2.8}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={2,0.3,0}, rotation={0,90,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---  \r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    local bagObjList = self.getObjects()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid=guid, position=entry.pos, rotation=entry.rot, smooth=false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n\r\n--Utility functions\r\n\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x-p1.x)\r\n    deltaPos.y = (p2.y-p1.y) + yOffset\r\n    deltaPos.z = (p2.z-p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10^(dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample:\r\n{'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'}\r\n--]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend",
                  "LuaScriptState": "{\"ml\":{\"0c337d\":{\"lock\":false,\"pos\":{\"x\":-32,\"y\":1.7799,\"z\":10},\"rot\":{\"x\":0.0366,\"y\":180.005,\"z\":0.0002},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"1c93ce\":{\"lock\":false,\"pos\":{\"x\":-32,\"y\":1.7789,\"z\":6.5},\"rot\":{\"x\":0,\"y\":180.0025,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"2be9f1\":{\"lock\":false,\"pos\":{\"x\":-32,\"y\":1.7789,\"z\":3},\"rot\":{\"x\":0,\"y\":179.9798,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"43c540\":{\"lock\":false,\"pos\":{\"x\":-34.5,\"y\":1.7789,\"z\":6.5},\"rot\":{\"x\":0,\"y\":179.9771,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"454d7f\":{\"lock\":false,\"pos\":{\"x\":-34.5,\"y\":1.7789,\"z\":3},\"rot\":{\"x\":0,\"y\":179.9734,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"54b058\":{\"lock\":false,\"pos\":{\"x\":6.9999,\"y\":1.5211,\"z\":25.5},\"rot\":{\"x\":0.0109,\"y\":179.9806,\"z\":0.0049},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"54dad7\":{\"lock\":false,\"pos\":{\"x\":23.5,\"y\":1.5182,\"z\":17.5},\"rot\":{\"x\":0.0109,\"y\":180.0002,\"z\":0.0049},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"906c4a\":{\"lock\":false,\"pos\":{\"x\":35,\"y\":1.5561,\"z\":-8.5001},\"rot\":{\"x\":0.0911,\"y\":180.0035,\"z\":0.001},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}}}}",
                  "XmlUI": "",
                  "ContainedObjects": [
                    {
                      "GUID": "0c337d",
                      "Name": "Card",
                      "Transform": {
                        "posX": -32.0000038,
                        "posY": 1.77894127,
                        "posZ": 10.0000038,
                        "rotX": -0.000308588642,
                        "rotY": 180.005051,
                        "rotZ": 0.00239239354,
                        "scaleX": 1.0,
                        "scaleY": 1.0,
                        "scaleZ": 1.0
                      },
                      "Nickname": "",
                      "Description": "",
                      "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"87013\",\n  \"sanity\": 2,\n  \"traits\": \"Scientist. Ally. Past.\",\n  \"type\": \"Asset\"\n}",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 0.713235259,
                        "g": 0.713235259,
                        "b": 0.713235259
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": true,
                      "GridProjection": false,
                      "HideWhenFaceDown": true,
                      "Hands": true,
                      "CardID": 1110643,
                      "SidewaysCard": false,
                      "CustomDeck": {
                        "11106": {
                          "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                          "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                          "NumWidth": 10,
                          "NumHeight": 7,
                          "BackIsHidden": true,
                          "UniqueBack": false,
                          "Type": 0
                        }
                      },
                      "LuaScript": "",
                      "LuaScriptState": "",
                      "XmlUI": ""
                    },
                    {
                      "GUID": "1c93ce",
                      "Name": "Card",
                      "Transform": {
                        "posX": -32.0000076,
                        "posY": 1.778906,
                        "posZ": 6.49999571,
                        "rotX": -4.92187473E-06,
                        "rotY": 180.002563,
                        "rotZ": -1.52100185E-07,
                        "scaleX": 1.0,
                        "scaleY": 1.0,
                        "scaleZ": 1.0
                      },
                      "Nickname": "",
                      "Description": "",
                      "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"87022\",\n  \"sanity\": 2,\n  \"traits\": \"Scientist. Ally. Present.\",\n  \"type\": \"Asset\"\n}",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 0.713235259,
                        "g": 0.713235259,
                        "b": 0.713235259
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": true,
                      "GridProjection": false,
                      "HideWhenFaceDown": true,
                      "Hands": true,
                      "CardID": 1110641,
                      "SidewaysCard": false,
                      "CustomDeck": {
                        "11106": {
                          "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                          "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                          "NumWidth": 10,
                          "NumHeight": 7,
                          "BackIsHidden": true,
                          "UniqueBack": false,
                          "Type": 0
                        }
                      },
                      "LuaScript": "",
                      "LuaScriptState": "",
                      "XmlUI": ""
                    },
                    {
                      "GUID": "2be9f1",
                      "Name": "Card",
                      "Transform": {
                        "posX": -32.0000076,
                        "posY": 1.77890623,
                        "posZ": 2.99999428,
                        "rotX": -5.00413535E-06,
                        "rotY": 179.979843,
                        "rotZ": -1.33888975E-07,
                        "scaleX": 1.0,
                        "scaleY": 1.0,
                        "scaleZ": 1.0
                      },
                      "Nickname": "",
                      "Description": "",
                      "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 1,\n  \"id\": \"87031\",\n  \"sanity\": 2,\n  \"traits\": \"Scientist. Ally. Future.\",\n  \"type\": \"Asset\"\n}",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 0.713235259,
                        "g": 0.713235259,
                        "b": 0.713235259
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": true,
                      "GridProjection": false,
                      "HideWhenFaceDown": true,
                      "Hands": true,
                      "CardID": 1110639,
                      "SidewaysCard": false,
                      "CustomDeck": {
                        "11106": {
                          "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                          "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                          "NumWidth": 10,
                          "NumHeight": 7,
                          "BackIsHidden": true,
                          "UniqueBack": false,
                          "Type": 0
                        }
                      },
                      "LuaScript": "",
                      "LuaScriptState": "",
                      "XmlUI": ""
                    },
                    {
                      "GUID": "43c540",
                      "Name": "Card",
                      "Transform": {
                        "posX": -34.5000038,
                        "posY": 1.778906,
                        "posZ": 6.49999571,
                        "rotX": -5.03360343E-06,
                        "rotY": 179.977112,
                        "rotZ": 1.55315483E-09,
                        "scaleX": 1.0,
                        "scaleY": 1.0,
                        "scaleZ": 1.0
                      },
                      "Nickname": "",
                      "Description": "",
                      "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"87021\",\n  \"sanity\": 2,\n  \"traits\": \"Scientist. Ally. Present.\",\n  \"type\": \"Asset\"\n}",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 0.713235259,
                        "g": 0.713235259,
                        "b": 0.713235259
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": true,
                      "GridProjection": false,
                      "HideWhenFaceDown": true,
                      "Hands": true,
                      "CardID": 1110640,
                      "SidewaysCard": false,
                      "CustomDeck": {
                        "11106": {
                          "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                          "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                          "NumWidth": 10,
                          "NumHeight": 7,
                          "BackIsHidden": true,
                          "UniqueBack": false,
                          "Type": 0
                        }
                      },
                      "LuaScript": "",
                      "LuaScriptState": "",
                      "XmlUI": ""
                    },
                    {
                      "GUID": "454d7f",
                      "Name": "Card",
                      "Transform": {
                        "posX": -34.5000038,
                        "posY": 1.77890623,
                        "posZ": 2.99999452,
                        "rotX": -4.92215941E-06,
                        "rotY": 179.9734,
                        "rotZ": -1.798263E-07,
                        "scaleX": 1.0,
                        "scaleY": 1.0,
                        "scaleZ": 1.0
                      },
                      "Nickname": "",
                      "Description": "",
                      "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"87021\",\n  \"sanity\": 2,\n  \"traits\": \"Scientist. Ally. Present.\",\n  \"type\": \"Asset\"\n}",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 0.713235259,
                        "g": 0.713235259,
                        "b": 0.713235259
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": true,
                      "GridProjection": false,
                      "HideWhenFaceDown": true,
                      "Hands": true,
                      "CardID": 1110638,
                      "SidewaysCard": false,
                      "CustomDeck": {
                        "11106": {
                          "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                          "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                          "NumWidth": 10,
                          "NumHeight": 7,
                          "BackIsHidden": true,
                          "UniqueBack": false,
                          "Type": 0
                        }
                      },
                      "LuaScript": "",
                      "LuaScriptState": "",
                      "XmlUI": ""
                    },
                    {
                      "GUID": "54b058",
                      "Name": "Card",
                      "Transform": {
                        "posX": 6.9999,
                        "posY": 1.5211271,
                        "posZ": 25.5000019,
                        "rotX": 0.0108932322,
                        "rotY": 179.980576,
                        "rotZ": 0.00494453777,
                        "scaleX": 1.0,
                        "scaleY": 1.0,
                        "scaleZ": 1.0
                      },
                      "Nickname": "",
                      "Description": "",
                      "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"87012\",\n  \"sanity\": 2,\n  \"traits\": \"Scientist. Ally. Past.\",\n  \"type\": \"Asset\"\n}",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 0.713235259,
                        "g": 0.713235259,
                        "b": 0.713235259
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": true,
                      "GridProjection": false,
                      "HideWhenFaceDown": true,
                      "Hands": true,
                      "CardID": 1110642,
                      "SidewaysCard": false,
                      "CustomDeck": {
                        "11106": {
                          "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                          "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                          "NumWidth": 10,
                          "NumHeight": 7,
                          "BackIsHidden": true,
                          "UniqueBack": false,
                          "Type": 0
                        }
                      },
                      "LuaScript": "",
                      "LuaScriptState": "",
                      "XmlUI": ""
                    },
                    {
                      "GUID": "54dad7",
                      "Name": "Card",
                      "Transform": {
                        "posX": 23.5,
                        "posY": 1.51818144,
                        "posZ": 17.5,
                        "rotX": 0.0108914385,
                        "rotY": 180.000168,
                        "rotZ": 0.004948352,
                        "scaleX": 1.0,
                        "scaleY": 1.0,
                        "scaleZ": 1.0
                      },
                      "Nickname": "",
                      "Description": "",
                      "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"87036a\",\n  \"sanity\": 2,\n  \"traits\": \"Scientist. Ally.\",\n  \"type\": \"Asset\"\n}",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 0.713235259,
                        "g": 0.713235259,
                        "b": 0.713235259
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": true,
                      "GridProjection": false,
                      "HideWhenFaceDown": true,
                      "Hands": true,
                      "CardID": 1105126,
                      "SidewaysCard": false,
                      "CustomDeck": {
                        "11051": {
                          "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                          "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                          "NumWidth": 10,
                          "NumHeight": 7,
                          "BackIsHidden": true,
                          "UniqueBack": true,
                          "Type": 0
                        }
                      },
                      "LuaScript": "",
                      "LuaScriptState": "",
                      "XmlUI": ""
                    },
                    {
                      "GUID": "906c4a",
                      "Name": "Card",
                      "Transform": {
                        "posX": 35.0,
                        "posY": 1.55607271,
                        "posZ": -8.5001,
                        "rotX": 0.09232554,
                        "rotY": 180.0035,
                        "rotZ": -1.726742E-05,
                        "scaleX": 1.0,
                        "scaleY": 1.0,
                        "scaleZ": 1.0
                      },
                      "Nickname": "Rédemption d'un Ancien Collègue",
                      "Description": "Machination",
                      "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87034\",\n  \"traits\": \"Machination.\",\n  \"type\": \"Story\",\n  \"victory\": 1\n}",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 0.713235259,
                        "g": 0.713235259,
                        "b": 0.713235259
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": true,
                      "GridProjection": false,
                      "HideWhenFaceDown": true,
                      "Hands": true,
                      "CardID": 1104906,
                      "SidewaysCard": false,
                      "CustomDeck": {
                        "11049": {
                          "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                          "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                          "NumWidth": 10,
                          "NumHeight": 7,
                          "BackIsHidden": true,
                          "UniqueBack": true,
                          "Type": 0
                        }
                      },
                      "LuaScript": "",
                      "LuaScriptState": "",
                      "XmlUI": ""
                    }
                  ]
                },
                {
                  "GUID": "c68b2a",
                  "Name": "Custom_Model_Bag",
                  "Transform": {
                    "posX": -28.5,
                    "posY": 2.42062235,
                    "posZ": 17.5,
                    "rotX": -0.000219270893,
                    "rotY": 179.982132,
                    "rotZ": -0.000106656989,
                    "scaleX": 0.7,
                    "scaleY": 0.7,
                    "scaleZ": 0.7
                  },
                  "Nickname": "Une Alliance Improbable",
                  "Description": "Machination",
                  "GMNotes": "",
                  "AltLookAngle": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                  },
                  "ColorDiffuse": {
                    "r": 1.0,
                    "g": 1.0,
                    "b": 1.0
                  },
                  "LayoutGroupSortIndex": 0,
                  "Value": 0,
                  "Locked": false,
                  "Grid": true,
                  "Snap": true,
                  "IgnoreFoW": false,
                  "MeasureMovement": false,
                  "DragSelectable": true,
                  "Autoraise": true,
                  "Sticky": true,
                  "Tooltip": true,
                  "GridProjection": false,
                  "HideWhenFaceDown": false,
                  "Hands": false,
                  "MaterialIndex": -1,
                  "MeshIndex": -1,
                  "CustomMesh": {
                    "MeshURL": "https://pastebin.com/raw/ALrYhQGb",
                    "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/5077277234366558480/31140655872853ACBC44735F25B0EE7E19C72536/",
                    "NormalURL": "",
                    "ColliderURL": "",
                    "Convex": true,
                    "MaterialIndex": 3,
                    "TypeIndex": 6,
                    "CustomShader": {
                      "SpecularColor": {
                        "r": 1.0,
                        "g": 1.0,
                        "b": 1.0
                      },
                      "SpecularIntensity": 0.0,
                      "SpecularSharpness": 2.0,
                      "FresnelStrength": 0.0
                    },
                    "CastShadows": true
                  },
                  "Bag": {
                    "Order": 0
                  },
                  "LuaScript": "-- Utility memory bag by Directsun\r\n-- Version 2.7.0\r\n-- Fork of Memory Bag 2.0 by MrStump\r\n--\r\n-- Want to contribute? Create an issue or fork the code on GitHub and submit a pull request:\r\n-- https://github.com/sunflowermans/TTS-UtilityMemoryBag\r\n\r\n\r\nfunction updateSave()\r\n    local data_to_save = {[\"ml\"]=memoryList}\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction combineMemoryFromBagsWithin()\r\n    local bagObjList = self.getObjects()\r\n    for _, bagObj in ipairs(bagObjList) do\r\n        local data = bagObj.lua_script_state\r\n        if data ~= nil then\r\n            local j = JSON.decode(data)\r\n            if j ~= nil and j.ml ~= nil then\r\n                for guid, entry in pairs(j.ml) do\r\n                    memoryList[guid] = entry\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction updateMemoryWithMoves()\r\n    memoryList = memoryListBackup\r\n    --get the first transposed object's coordinates\r\n    local obj = getObjectFromGUID(moveGuid)\r\n\r\n    -- p1 is where needs to go, p2 is where it was\r\n    local refObjPos = memoryList[moveGuid].pos\r\n    local deltaPos = findOffsetDistance(obj.getPosition(), refObjPos, nil)\r\n    local movedRotation = obj.getRotation()\r\n    for guid, entry in pairs(memoryList) do\r\n        memoryList[guid].pos.x = entry.pos.x - deltaPos.x\r\n        memoryList[guid].pos.y = entry.pos.y - deltaPos.y\r\n        memoryList[guid].pos.z = entry.pos.z - deltaPos.z\r\n        -- memoryList[guid].rot.x = movedRotation.x\r\n        -- memoryList[guid].rot.y = movedRotation.y\r\n        -- memoryList[guid].rot.z = movedRotation.z\r\n    end\r\n\r\n    --theList[obj.getGUID()] = {\r\n    --    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n    --    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n    --    lock=obj.getLock()\r\n    --}\r\n    moveList = {}\r\nend\r\n\r\nfunction onload(saved_data)\r\n\r\n    fresh = true\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        --Set up information off of loaded_data\r\n        memoryList = loaded_data.ml\r\n    else\r\n        --Set up information for if there is no saved saved data\r\n        memoryList = {}\r\n\r\n    end\r\n\r\n    moveList = {}\r\n    moveGuid = nil\r\n\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        fresh = false\r\n        createMemoryActionButtons()\r\n    end\r\nend\r\n\r\n\r\n--Beginning Setup\r\n\r\n\r\n--Make setup button\r\nfunction createSetupButton()\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n--Triggered by Transpose button\r\nfunction buttonClick_transpose()\r\n    moveGuid = nil\r\n    broadcastToAll(\"Select one object and move it- all objects will move relative to the new location\", {0.75, 0.75, 1})\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(true)\r\n    createSetupActionButtons(true)\r\nend\r\n\r\n--Triggered by setup button,\r\nfunction buttonClick_setup()\r\n    memoryListBackup = duplicateTable(memoryList)\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createButtonsOnAllObjects(false)\r\n    createSetupActionButtons(false)\r\nend\r\n\r\nfunction getAllObjectsInMemory()\r\n    local objTable = {}\r\n    local curObj = {}\r\n\r\n    for guid in pairs(memoryListBackup) do\r\n        curObj = getObjectFromGUID(guid)\r\n        table.insert(objTable, curObj)\r\n    end\r\n\r\n    return objTable\r\n    -- return getAllObjects()\r\nend\r\n\r\n--Creates selection buttons on objects\r\nfunction createButtonsOnAllObjects(move)\r\n    buttonIndexMap = {}\r\n    local howManyButtons = 0\r\n\r\n    local objsToHaveButtons = {}\r\n    if move == true then\r\n        objsToHaveButtons = getAllObjectsInMemory()\r\n    else\r\n        objsToHaveButtons = getAllObjects()\r\n    end\r\n\r\n    for _, obj in ipairs(objsToHaveButtons) do\r\n        if obj ~= self then\r\n            --On a normal bag, the button positions aren't the same size as the bag.\r\n            globalScaleFactor = 1 * 1/self.getScale().x\r\n            --Super sweet math to set button positions\r\n            local selfPos = self.getPosition()\r\n            local objPos = obj.getPosition()\r\n            local deltaPos = findOffsetDistance(selfPos, objPos, obj)\r\n            local objPos = rotateLocalCoordinates(deltaPos, self)\r\n            objPos.x = -objPos.x * globalScaleFactor\r\n            objPos.y = objPos.y * globalScaleFactor +2\r\n            objPos.z = objPos.z * globalScaleFactor\r\n            --Workaround for custom PDFs\r\n            if obj.Book then\r\n                objPos.y = objPos.y + 0.5\r\n            end\r\n            --Offset rotation of bag\r\n            local rot = self.getRotation()\r\n            rot.y = -rot.y + 180\r\n            --Create function\r\n            local funcName = \"selectButton_\" .. howManyButtons\r\n            local func = function() buttonClick_selection(obj, move) end\r\n            local color = {0.75,0.25,0.25,0.6}\r\n            local colorMove = {0,0,1,0.6}\r\n            if move == true then\r\n                color = colorMove\r\n            end\r\n            self.setVar(funcName, func)\r\n            self.createButton({\r\n                click_function=funcName, function_owner=self,\r\n                position=objPos, rotation=rot, height=1000, width=1000,\r\n                color=color,\r\n            })\r\n            buttonIndexMap[obj.getGUID()] = howManyButtons\r\n            howManyButtons = howManyButtons + 1\r\n        end\r\n    end\r\nend\r\n\r\n--Creates submit and cancel buttons\r\nfunction createSetupActionButtons(move)\r\n    self.createButton({\r\n       label=\"Annuler\", click_function=\"buttonClick_cancel\", function_owner=self,\r\n       position={-1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n       font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    self.createButton({\r\n      label=\"Valider\", click_function=\"buttonClick_submit\", function_owner=self,\r\n      position={-1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n      font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n\r\n    if move == false then\r\n      self.createButton({\r\n          label=\"Ajouter\", click_function=\"buttonClick_add\", function_owner=self,\r\n          position={1.15,0.3,2.1}, rotation={0,0,0}, height=350, width=1100,\r\n          font_size=250, color={0,0,0}, font_color={0.25,1,0.25}\r\n        })\r\n\r\n        self.createButton({\r\n            label=\"Sélection\", click_function=\"editDragSelection\", function_owner=self,\r\n            position={-1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n            font_size=250, color={0,0,0}, font_color={1,1,1}\r\n        })\r\n\r\n        if fresh == false then\r\n            self.createButton({\r\n                label=\"Mise à Jour\", click_function=\"buttonClick_setNew\", function_owner=self,\r\n                position={1.15,0.3,3.5}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=180, color={0,0,0}, font_color={0.75,0.75,1}\r\n            })\r\n            self.createButton({\r\n                label=\"Retirer\", click_function=\"buttonClick_remove\", function_owner=self,\r\n                position={1.15,0.3,2.8}, rotation={0,0,0}, height=350, width=1100,\r\n                font_size=250, color={0,0,0}, font_color={1,0.25,0.25}\r\n            })\r\n        end\r\n    end\r\n\r\n    self.createButton({\r\n        label=\"Reset\", click_function=\"buttonClick_reset\", function_owner=self,\r\n        position={0,0.3,-2}, rotation={0,0,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\nend\r\n\r\n\r\n--During Setup\r\n\r\n\r\n--Checks or unchecks buttons\r\nfunction buttonClick_selection(obj, move)\r\n    local index = buttonIndexMap[obj.getGUID()]\r\n    local colorMove = {0,0,1,0.6}\r\n    local color = {0,1,0,0.6}\r\n\r\n    previousGuid = selectedGuid\r\n    selectedGuid = obj.getGUID()\r\n\r\n    theList = memoryList\r\n    if move == true then\r\n        theList = moveList\r\n        if previousGuid ~= nil and previousGuid ~= selectedGuid then\r\n            local prevObj = getObjectFromGUID(previousGuid)\r\n            prevObj.highlightOff()\r\n            self.editButton({index=previousIndex, color=colorMove})\r\n            theList[previousGuid] = nil\r\n        end\r\n        previousIndex = index\r\n    end\r\n\r\n    if theList[selectedGuid] == nil then\r\n        self.editButton({index=index, color=color})\r\n        --Adding pos/rot to memory table\r\n        local pos, rot = obj.getPosition(), obj.getRotation()\r\n        --I need to add it like this or it won't save due to indexing issue\r\n        theList[obj.getGUID()] = {\r\n            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n            lock=obj.getLock(),\r\n            tint=obj.getColorTint()\r\n        }\r\n        obj.highlightOn({0,1,0})\r\n    else\r\n        color = {0.75,0.25,0.25,0.6}\r\n        if move == true then\r\n            color = colorMove\r\n        end\r\n        self.editButton({index=index, color=color})\r\n        theList[obj.getGUID()] = nil\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\nfunction editDragSelection(bagObj, player, remove)\r\n    local selectedObjs = Player[player].getSelectedObjects()\r\n    if not remove then\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            --Ignore if already in the memory list, or does not have a button\r\n            if index and not memoryList[obj.getGUID()] then\r\n                self.editButton({index=index, color={0,1,0,0.6}})\r\n                --Adding pos/rot to memory table\r\n                local pos, rot = obj.getPosition(), obj.getRotation()\r\n                --I need to add it like this or it won't save due to indexing issue\r\n                memoryList[obj.getGUID()] = {\r\n                    pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},\r\n                    rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},\r\n                    lock=obj.getLock(),\r\n                    tint=obj.getColorTint()\r\n                }\r\n                obj.highlightOn({0,1,0})\r\n            end\r\n        end\r\n    else\r\n        for _, obj in ipairs(selectedObjs) do\r\n            local index = buttonIndexMap[obj.getGUID()]\r\n            if index and memoryList[obj.getGUID()] then\r\n                color = {0.75,0.25,0.25,0.6}\r\n                self.editButton({index=index, color=color})\r\n                memoryList[obj.getGUID()] = nil\r\n                obj.highlightOff()\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--Cancels selection process\r\nfunction buttonClick_cancel()\r\n    memoryList = memoryListBackup\r\n    moveList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    if next(memoryList) == nil then\r\n        createSetupButton()\r\n    else\r\n        createMemoryActionButtons()\r\n    end\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Sélection annulée\", {1,1,1})\r\n    moveGuid = nil\r\nend\r\n\r\n--Saves selections\r\nfunction buttonClick_submit()\r\n    fresh = false\r\n    if next(moveList) ~= nil then\r\n        for guid in pairs(moveList) do\r\n            moveGuid = guid\r\n        end\r\n        if memoryListBackup[moveGuid] == nil then\r\n            broadcastToAll(\"Item selected for moving is not already in memory\", {1, 0.25, 0.25})\r\n        else\r\n            broadcastToAll(\"Moving all items in memory relative to new objects position!\", {0.75, 0.75, 1})\r\n            self.clearButtons()\r\n            self.clearInputs()\r\n            createMemoryActionButtons()\r\n            local count = 0\r\n            for guid in pairs(moveList) do\r\n                moveGuid = guid\r\n                count = count + 1\r\n                local obj = getObjectFromGUID(guid)\r\n                if obj ~= nil then obj.highlightOff() end\r\n            end\r\n            updateMemoryWithMoves()\r\n            updateSave()\r\n            buttonClick_place()\r\n        end\r\n    elseif next(memoryList) == nil and moveGuid == nil then\r\n        memoryList = memoryListBackup\r\n        broadcastToAll(\"No selections made.\", {0.75, 0.25, 0.25})\r\n    end\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\n    moveGuid = nil\r\nend\r\n\r\nfunction combineTables(first_table, second_table)\r\n    for k,v in pairs(second_table) do first_table[k] = v end\r\nend\r\n\r\nfunction buttonClick_add()\r\n    fresh = false\r\n    combineTables(memoryList, memoryListBackup)\r\n    broadcastToAll(\"Adding internal bags and selections to existing memory\", {0.25, 0.75, 0.25})\r\n    combineMemoryFromBagsWithin()\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_remove()\r\n    broadcastToAll(\"Removing Selected Entries From Memory\", {1.0, 0.25, 0.25})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for guid in pairs(memoryList) do\r\n        count = count + 1\r\n        memoryListBackup[guid] = nil\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then obj.highlightOff() end\r\n    end\r\n    broadcastToAll(count..\" Objects Removed\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\nfunction buttonClick_setNew()\r\n    broadcastToAll(\"Setting new position relative to items in memory\", {0.75, 0.75, 1})\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createMemoryActionButtons()\r\n    local count = 0\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        guid = obj.guid\r\n        if memoryListBackup[guid] ~= nil then\r\n            count = count + 1\r\n            memoryListBackup[guid].pos = obj.getPosition()\r\n            memoryListBackup[guid].rot = obj.getRotation()\r\n            memoryListBackup[guid].lock = obj.getLock()\r\n            memoryListBackup[guid].tint = obj.getColorTint()\r\n        end\r\n    end\r\n    broadcastToAll(count..\" Objects Saved\", {1,1,1})\r\n    memoryList = memoryListBackup\r\n    updateSave()\r\nend\r\n\r\n--Resets bag to starting status\r\nfunction buttonClick_reset()\r\n    fresh = true\r\n    memoryList = {}\r\n    self.clearButtons()\r\n    self.clearInputs()\r\n    createSetupButton()\r\n    removeAllHighlights()\r\n    broadcastToAll(\"Tool Reset\", {1,1,1})\r\n    updateSave()\r\nend\r\n\r\n\r\n--After Setup\r\n\r\n\r\n--Creates recall and place buttons\r\nfunction createMemoryActionButtons()\r\n    self.createButton({\r\n        label=\"Placer\", click_function=\"buttonClick_place\", function_owner=self,\r\n        position={0,0.3,2}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Ranger\", click_function=\"buttonClick_recall\", function_owner=self,\r\n        position={0,0.3,2.8}, rotation={0,0,0}, height=350, width=1000,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    self.createButton({\r\n        label=\"Config\", click_function=\"buttonClick_setup\", function_owner=self,\r\n        position={2,0.3,0}, rotation={0,90,0}, height=350, width=800,\r\n        font_size=250, color={0,0,0}, font_color={1,1,1}\r\n    })\r\n    ---    self.createButton({\r\n    ---      label=\"Bouger\", click_function=\"buttonClick_transpose\", function_owner=self,\r\n    ---      position={-2,0.3,0.8}, rotation={0,270,0}, height=350, width=800,\r\n    ---      font_size=250, color={0,0,0}, font_color={0.75,0.75,1}\r\n    ---  \r\nend\r\n\r\n--Sends objects from bag/table to their saved position/rotation\r\nfunction buttonClick_place()\r\n    local bagObjList = self.getObjects()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        --If obj is out on the table, move it to the saved pos/rot\r\n        if obj ~= nil then\r\n            obj.setPositionSmooth(entry.pos)\r\n            obj.setRotationSmooth(entry.rot)\r\n            obj.setLock(entry.lock)\r\n            obj.setColorTint(entry.tint)\r\n        else\r\n            --If obj is inside of the bag\r\n            for _, bagObj in ipairs(bagObjList) do\r\n                if bagObj.guid == guid then\r\n                    local item = self.takeObject({\r\n                        guid=guid, position=entry.pos, rotation=entry.rot, smooth=false\r\n                    })\r\n                    item.setLock(entry.lock)\r\n                    item.setColorTint(entry.tint)\r\n                    break\r\n                end\r\n            end\r\n        end\r\n    end\r\n    broadcastToAll(\"Objets placés\", {1,1,1})\r\nend\r\n\r\n--Recalls objects to bag from table\r\nfunction buttonClick_recall()\r\n    for guid, entry in pairs(memoryList) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if obj ~= nil then self.putObject(obj) end\r\n    end\r\n    broadcastToAll(\"Objets rangés\", {1,1,1})\r\nend\r\n\r\n\r\n--Utility functions\r\n\r\n\r\n--Find delta (difference) between 2 x/y/z coordinates\r\nfunction findOffsetDistance(p1, p2, obj)\r\n    local yOffset = 0\r\n    if obj ~= nil then\r\n        local bounds = obj.getBounds()\r\n        yOffset = (bounds.size.y - bounds.offset.y)\r\n    end\r\n    local deltaPos = {}\r\n    deltaPos.x = (p2.x-p1.x)\r\n    deltaPos.y = (p2.y-p1.y) + yOffset\r\n    deltaPos.z = (p2.z-p1.z)\r\n    return deltaPos\r\nend\r\n\r\n--Used to rotate a set of coordinates by an angle\r\nfunction rotateLocalCoordinates(desiredPos, obj)\r\n    local objPos, objRot = obj.getPosition(), obj.getRotation()\r\n    local angle = math.rad(objRot.y)\r\n    local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)\r\n    local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)\r\n    --return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\nfunction rotateMyCoordinates(desiredPos, obj)\r\n    local angle = math.rad(obj.getRotation().y)\r\n    local x = desiredPos.x * math.sin(angle)\r\n    local z = desiredPos.z * math.cos(angle)\r\n    return {x=x, y=desiredPos.y, z=z}\r\nend\r\n\r\n--Coroutine delay, in seconds\r\nfunction wait(time)\r\n    local start = os.time()\r\n    repeat coroutine.yield(0) until os.time() > start + time\r\nend\r\n\r\n--Duplicates a table (needed to prevent it making reference to the same objects)\r\nfunction duplicateTable(oldTable)\r\n    local newTable = {}\r\n    for k, v in pairs(oldTable) do\r\n        newTable[k] = v\r\n    end\r\n    return newTable\r\nend\r\n\r\n--Moves scripted highlight from all objects\r\nfunction removeAllHighlights()\r\n    for _, obj in ipairs(getAllObjects()) do\r\n        obj.highlightOff()\r\n    end\r\nend\r\n\r\n--Round number (num) to the Nth decimal (dec)\r\nfunction round(num, dec)\r\n    local mult = 10^(dec or 0)\r\n    return math.floor(num * mult + 0.5) / mult\r\nend\r\n\r\n\r\n--[[\r\nThis object provides access to a variable stored on the \"Global script\".\r\nThe variable holds the GUIDs for every Utility Memory Bag in the scene.\r\nExample:\r\n{'805ebd', '35cc21', 'fc8886', 'f50264', '5f5f63'}\r\n--]]\r\nAllMemoryBagsInScene = {\r\n    NAME_OF_GLOBAL_VARIABLE = \"_UtilityMemoryBag_AllMemoryBagsInScene\"\r\n}\r\n\r\nfunction AllMemoryBagsInScene:add(guid)\r\n    local guids = Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\n    table.insert(guids, guid)\r\n    Global.setTable(self.NAME_OF_GLOBAL_VARIABLE, guids)\r\nend\r\n\r\nfunction AllMemoryBagsInScene:getGuidList()\r\n    return Global.getTable(self.NAME_OF_GLOBAL_VARIABLE) or {}\r\nend",
                  "LuaScriptState": "{\"ml\":{\"107b72\":{\"lock\":false,\"pos\":{\"x\":35,\"y\":1.5561,\"z\":-8.5001},\"rot\":{\"x\":0.0911,\"y\":180.0037,\"z\":0.001},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"3af1ae\":{\"lock\":false,\"pos\":{\"x\":-32,\"y\":1.7789,\"z\":6.5},\"rot\":{\"x\":0,\"y\":179.9808,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"506c91\":{\"lock\":false,\"pos\":{\"x\":-34.5,\"y\":1.7789,\"z\":6.5},\"rot\":{\"x\":0,\"y\":179.9772,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"60640c\":{\"lock\":false,\"pos\":{\"x\":-32,\"y\":1.7789,\"z\":3},\"rot\":{\"x\":0,\"y\":180.0021,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"7582c3\":{\"lock\":false,\"pos\":{\"x\":-12.5,\"y\":1.523,\"z\":26.5},\"rot\":{\"x\":0.0109,\"y\":180.0062,\"z\":0.0049},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"9e10fb\":{\"lock\":false,\"pos\":{\"x\":-34.5,\"y\":1.7789,\"z\":3},\"rot\":{\"x\":0,\"y\":179.9733,\"z\":0},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"b3a4dc\":{\"lock\":false,\"pos\":{\"x\":9.5,\"y\":1.5202,\"z\":22},\"rot\":{\"x\":0.0109,\"y\":179.9946,\"z\":0.0049},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e7f2ee\":{\"lock\":false,\"pos\":{\"x\":-12.5,\"y\":1.5213,\"z\":17.5},\"rot\":{\"x\":0.0111,\"y\":179.9999,\"z\":180.0061},\"tint\":{\"a\":1,\"b\":0.713235259056091,\"g\":0.713235259056091,\"r\":0.713235259056091}},\"e86ec6\":{\"lock\":false,\"pos\":{\"x\":-12.5001,\"y\":1.5848,\"z\":17.5002},\"rot\":{\"x\":0.0113,\"y\":179.9996,\"z\":0.0063},\"tint\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1}}}}",
                  "XmlUI": "",
                  "ContainedObjects": [
                    {
                      "GUID": "107b72",
                      "Name": "Card",
                      "Transform": {
                        "posX": 35.0,
                        "posY": 1.55360472,
                        "posZ": -8.500074,
                        "rotX": 9.47911047E-08,
                        "rotY": 180.003616,
                        "rotZ": 4.916516E-06,
                        "scaleX": 1.0,
                        "scaleY": 1.0,
                        "scaleZ": 1.0
                      },
                      "Nickname": "Une Alliance Improbable",
                      "Description": "Machination",
                      "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87035\",\n  \"traits\": \"Machination.\",\n  \"type\": \"Story\",\n  \"victory\": 1\n}",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 0.713235259,
                        "g": 0.713235259,
                        "b": 0.713235259
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": true,
                      "GridProjection": false,
                      "HideWhenFaceDown": true,
                      "Hands": true,
                      "CardID": 1104905,
                      "SidewaysCard": false,
                      "CustomDeck": {
                        "11049": {
                          "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                          "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                          "NumWidth": 10,
                          "NumHeight": 7,
                          "BackIsHidden": true,
                          "UniqueBack": true,
                          "Type": 0
                        }
                      },
                      "LuaScript": "",
                      "LuaScriptState": "",
                      "XmlUI": ""
                    },
                    {
                      "GUID": "3af1ae",
                      "Name": "Card",
                      "Transform": {
                        "posX": -32.0000076,
                        "posY": 1.78360581,
                        "posZ": 6.49999571,
                        "rotX": -4.82848827E-06,
                        "rotY": 179.98085,
                        "rotZ": 2.77514847E-08,
                        "scaleX": 1.0,
                        "scaleY": 1.0,
                        "scaleZ": 1.0
                      },
                      "Nickname": "",
                      "Description": "",
                      "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 1,\n  \"id\": \"87031\",\n  \"sanity\": 2,\n  \"traits\": \"Scientist. Ally. Future.\",\n  \"type\": \"Asset\"\n}",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 0.713235259,
                        "g": 0.713235259,
                        "b": 0.713235259
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": true,
                      "GridProjection": false,
                      "HideWhenFaceDown": true,
                      "Hands": true,
                      "CardID": 1110639,
                      "SidewaysCard": false,
                      "CustomDeck": {
                        "11106": {
                          "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                          "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                          "NumWidth": 10,
                          "NumHeight": 7,
                          "BackIsHidden": true,
                          "UniqueBack": false,
                          "Type": 0
                        }
                      },
                      "LuaScript": "",
                      "LuaScriptState": "",
                      "XmlUI": ""
                    },
                    {
                      "GUID": "506c91",
                      "Name": "Card",
                      "Transform": {
                        "posX": -34.5000038,
                        "posY": 1.78360581,
                        "posZ": 6.49999571,
                        "rotX": -5.08993571E-06,
                        "rotY": 179.977142,
                        "rotZ": -7.864283E-08,
                        "scaleX": 1.0,
                        "scaleY": 1.0,
                        "scaleZ": 1.0
                      },
                      "Nickname": "",
                      "Description": "",
                      "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"87021\",\n  \"sanity\": 2,\n  \"traits\": \"Scientist. Ally. Present.\",\n  \"type\": \"Asset\"\n}",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 0.713235259,
                        "g": 0.713235259,
                        "b": 0.713235259
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": true,
                      "GridProjection": false,
                      "HideWhenFaceDown": true,
                      "Hands": true,
                      "CardID": 1110640,
                      "SidewaysCard": false,
                      "CustomDeck": {
                        "11106": {
                          "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                          "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                          "NumWidth": 10,
                          "NumHeight": 7,
                          "BackIsHidden": true,
                          "UniqueBack": false,
                          "Type": 0
                        }
                      },
                      "LuaScript": "",
                      "LuaScriptState": "",
                      "XmlUI": ""
                    },
                    {
                      "GUID": "60640c",
                      "Name": "Card",
                      "Transform": {
                        "posX": -32.0000076,
                        "posY": 1.783606,
                        "posZ": 2.99999475,
                        "rotX": -5.074661E-06,
                        "rotY": 180.002121,
                        "rotZ": -7.486264E-08,
                        "scaleX": 1.0,
                        "scaleY": 1.0,
                        "scaleZ": 1.0
                      },
                      "Nickname": "",
                      "Description": "",
                      "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"87022\",\n  \"sanity\": 2,\n  \"traits\": \"Scientist. Ally. Present.\",\n  \"type\": \"Asset\"\n}",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 0.713235259,
                        "g": 0.713235259,
                        "b": 0.713235259
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": true,
                      "GridProjection": false,
                      "HideWhenFaceDown": true,
                      "Hands": true,
                      "CardID": 1110641,
                      "SidewaysCard": false,
                      "CustomDeck": {
                        "11106": {
                          "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                          "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                          "NumWidth": 10,
                          "NumHeight": 7,
                          "BackIsHidden": true,
                          "UniqueBack": false,
                          "Type": 0
                        }
                      },
                      "LuaScript": "",
                      "LuaScriptState": "",
                      "XmlUI": ""
                    },
                    {
                      "GUID": "7582c3",
                      "Name": "Card",
                      "Transform": {
                        "posX": -12.5000019,
                        "posY": 1.51318932,
                        "posZ": 26.5,
                        "rotX": 0.0155095356,
                        "rotY": 180.006256,
                        "rotZ": 0.008471959,
                        "scaleX": 1.0,
                        "scaleY": 1.0,
                        "scaleZ": 1.0
                      },
                      "Nickname": "",
                      "Description": "",
                      "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"87013\",\n  \"sanity\": 2,\n  \"traits\": \"Scientist. Ally. Past.\",\n  \"type\": \"Asset\"\n}",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 0.713235259,
                        "g": 0.713235259,
                        "b": 0.713235259
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": true,
                      "GridProjection": false,
                      "HideWhenFaceDown": true,
                      "Hands": true,
                      "CardID": 1110643,
                      "SidewaysCard": false,
                      "CustomDeck": {
                        "11106": {
                          "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                          "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                          "NumWidth": 10,
                          "NumHeight": 7,
                          "BackIsHidden": true,
                          "UniqueBack": false,
                          "Type": 0
                        }
                      },
                      "LuaScript": "",
                      "LuaScriptState": "",
                      "XmlUI": ""
                    },
                    {
                      "GUID": "9e10fb",
                      "Name": "Card",
                      "Transform": {
                        "posX": -34.5000076,
                        "posY": 1.783606,
                        "posZ": 2.99999332,
                        "rotX": -4.952992E-06,
                        "rotY": 179.973251,
                        "rotZ": -1.479095E-07,
                        "scaleX": 1.0,
                        "scaleY": 1.0,
                        "scaleZ": 1.0
                      },
                      "Nickname": "",
                      "Description": "",
                      "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"87021\",\n  \"sanity\": 2,\n  \"traits\": \"Scientist. Ally. Present.\",\n  \"type\": \"Asset\"\n}",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 0.713235259,
                        "g": 0.713235259,
                        "b": 0.713235259
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": true,
                      "GridProjection": false,
                      "HideWhenFaceDown": true,
                      "Hands": true,
                      "CardID": 1110638,
                      "SidewaysCard": false,
                      "CustomDeck": {
                        "11106": {
                          "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                          "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                          "NumWidth": 10,
                          "NumHeight": 7,
                          "BackIsHidden": true,
                          "UniqueBack": false,
                          "Type": 0
                        }
                      },
                      "LuaScript": "",
                      "LuaScriptState": "",
                      "XmlUI": ""
                    },
                    {
                      "GUID": "b3a4dc",
                      "Name": "Card",
                      "Transform": {
                        "posX": 9.500004,
                        "posY": 1.5105139,
                        "posZ": 21.99999,
                        "rotX": 0.008373059,
                        "rotY": 179.994537,
                        "rotZ": 0.02330881,
                        "scaleX": 1.0,
                        "scaleY": 1.0,
                        "scaleZ": 1.0
                      },
                      "Nickname": "",
                      "Description": "",
                      "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"87012\",\n  \"sanity\": 2,\n  \"traits\": \"Scientist. Ally. Past.\",\n  \"type\": \"Asset\"\n}",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 0.713235259,
                        "g": 0.713235259,
                        "b": 0.713235259
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": true,
                      "GridProjection": false,
                      "HideWhenFaceDown": true,
                      "Hands": true,
                      "CardID": 1110642,
                      "SidewaysCard": false,
                      "CustomDeck": {
                        "11106": {
                          "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                          "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                          "NumWidth": 10,
                          "NumHeight": 7,
                          "BackIsHidden": true,
                          "UniqueBack": false,
                          "Type": 0
                        }
                      },
                      "LuaScript": "",
                      "LuaScriptState": "",
                      "XmlUI": ""
                    },
                    {
                      "GUID": "e7f2ee",
                      "Name": "Card",
                      "Transform": {
                        "posX": -12.5000019,
                        "posY": 1.51127923,
                        "posZ": 17.5000019,
                        "rotX": 0.0110111628,
                        "rotY": 179.999878,
                        "rotZ": 180.005737,
                        "scaleX": 1.0,
                        "scaleY": 1.0,
                        "scaleZ": 1.0
                      },
                      "Nickname": "",
                      "Description": "",
                      "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"87036a\",\n  \"sanity\": 2,\n  \"traits\": \"Scientist. Ally.\",\n  \"type\": \"Asset\"\n}",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 0.713235259,
                        "g": 0.713235259,
                        "b": 0.713235259
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": true,
                      "GridProjection": false,
                      "HideWhenFaceDown": true,
                      "Hands": true,
                      "CardID": 1105126,
                      "SidewaysCard": false,
                      "CustomDeck": {
                        "11051": {
                          "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                          "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                          "NumWidth": 10,
                          "NumHeight": 7,
                          "BackIsHidden": true,
                          "UniqueBack": true,
                          "Type": 0
                        }
                      },
                      "LuaScript": "",
                      "LuaScriptState": "",
                      "XmlUI": ""
                    },
                    {
                      "GUID": "e86ec6",
                      "Name": "Custom_Token",
                      "Transform": {
                        "posX": -12.5001011,
                        "posY": 1.57485723,
                        "posZ": 17.5002022,
                        "rotX": 0.0112592755,
                        "rotY": 179.999619,
                        "rotZ": 0.00693944748,
                        "scaleX": 0.3,
                        "scaleY": 1.0,
                        "scaleZ": 0.3
                      },
                      "Nickname": "Resources",
                      "Description": "Left click - Increase\nRight click - Decrease",
                      "GMNotes": "",
                      "AltLookAngle": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                      },
                      "ColorDiffuse": {
                        "r": 1.0,
                        "g": 1.0,
                        "b": 1.0
                      },
                      "LayoutGroupSortIndex": 0,
                      "Value": 0,
                      "Locked": false,
                      "Grid": true,
                      "Snap": true,
                      "IgnoreFoW": false,
                      "MeasureMovement": false,
                      "DragSelectable": true,
                      "Autoraise": true,
                      "Sticky": true,
                      "Tooltip": false,
                      "GridProjection": false,
                      "HideWhenFaceDown": false,
                      "Hands": false,
                      "CustomImage": {
                        "ImageURL": "https://steamusercontent-a.akamaihd.net/ugc/784129913444610342/7903BA89870C1656A003FD69C79BFA99BD1AAC24/",
                        "ImageSecondaryURL": "",
                        "ImageScalar": 1.0,
                        "WidthScale": 0.0,
                        "CustomToken": {
                          "Thickness": 0.1,
                          "MergeDistancePixels": 5.0,
                          "StandUp": false,
                          "Stackable": false
                        }
                      },
                      "LuaScript": "MIN_VALUE = -99\r\nMAX_VALUE = 999\r\n\r\nfunction onload(saved_data)\r\n    light_mode = true\r\n    val = 0\r\n\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        light_mode = loaded_data[1]\r\n        val = loaded_data[2]\r\n    end\r\n\r\n    createAll()\r\nend\r\n\r\nfunction updateSave()\r\n    local data_to_save = {light_mode, val}\r\n    saved_data = JSON.encode(data_to_save)\r\n    self.script_state = saved_data\r\nend\r\n\r\nfunction createAll()\r\n    s_color = {0,0,0,100}\r\n\n    if light_mode then\r\n        f_color = {1,1,1,100}\r\n    else\r\n        f_color = {0,0,0,100}\r\n    end\r\n\r\n\r\n\r\n    self.createButton({\r\n      label=tostring(val),\r\n      click_function=\"add_subtract\",\r\n      function_owner=self,\r\n      position={0,0.05,0.1},\r\n      height=600,\r\n      width=1000,\r\n      alignment = 3,\r\n      scale={x=1.5, y=1.5, z=1.5},\r\n      font_size=600,\r\n      font_color=f_color,\r\n      color={1,1,1,0}\r\n      })\r\n\r\n\r\n\r\n\r\n    if light_mode then\r\n        lightButtonText = \"[ Set dark ]\"\r\n    else\r\n        lightButtonText = \"[ Set light ]\"\r\n    end\r\n \r\nend\r\n\r\nfunction removeAll()\r\n    self.removeInput(0)\r\n    self.removeInput(1)\r\n    self.removeButton(0)\r\n    self.removeButton(1)\r\n    self.removeButton(2)\r\nend\r\n\r\nfunction reloadAll()\r\n    removeAll()\r\n    createAll()\r\n\r\n    updateSave()\r\nend\r\n\r\nfunction swap_fcolor(_obj, _color, alt_click)\r\n    light_mode = not light_mode\r\n    reloadAll()\r\nend\r\n\r\nfunction swap_align(_obj, _color, alt_click)\r\n    center_mode = not center_mode\r\n    reloadAll()\r\nend\r\n\r\nfunction editName(_obj, _string, value) \r\n    self.setName(value)\r\n    setTooltips()\r\nend\r\n\r\nfunction add_subtract(_obj, _color, alt_click)\r\n    mod = alt_click and -1 or 1\r\n    new_value = math.min(math.max(val + mod, MIN_VALUE), MAX_VALUE)\r\n    if val ~= new_value then\r\n        val = new_value\r\n      updateVal()\r\n        updateSave()\r\n    end\r\nend\r\n\r\nfunction updateVal()\r\n\r\n    self.editButton({\r\n        index = 0,\r\n        label = tostring(val),\r\n\r\n        })\r\nend\r\n\r\nfunction reset_val()\r\n    val = 0\r\n    updateVal()\r\n    updateSave()\r\nend\r\n\r\nfunction setTooltips()\r\n    self.editInput({\r\n        index = 0,\r\n        value = self.getName(),\r\n        tooltip = ttText\r\n        })\r\n    self.editButton({\r\n        index = 0,\r\n        value = tostring(val),\r\n        tooltip = ttText\r\n        })\r\nend\r\n\r\nfunction null()\r\nend\r\n\r\nfunction keepSample(_obj, _string, value) \r\n    reloadAll()\r\nend",
                      "LuaScriptState": "[true,0]",
                      "XmlUI": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "GUID": "794871",
          "Name": "Custom_Model",
          "Transform": {
            "posX": 35.001,
            "posY": 1.54099977,
            "posZ": -10.9994,
            "rotX": -9.345146E-08,
            "rotY": 359.9913,
            "rotZ": -5.26842268E-06,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Text Tool",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.0,
            "g": 0.0,
            "b": 0.0,
            "a": 0.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": false,
          "Tooltip": false,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/1478820768302617365/27883B7913E0E69143C3AA03493B7E7C4E8C29C0/",
            "DiffuseURL": "",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 1,
            "TypeIndex": 0,
            "CastShadows": true
          },
          "LuaScript": "-- Code for bag to identify text tool objects\r\nmovableTextTool_cowgoesmoo33 = true\r\n\r\n-- Number of characters before the text box width expands.\r\nEXPAND_INTERVAL = 20\r\n\r\n-- This table controls what is passed between save/load\r\ndata = {}\r\n\r\nfunction onLoad(saved_data)\r\n  if saved_data ~= '' then\r\n    data = JSON.decode(saved_data)\r\n    if data.text ~= '' then\r\n      self.interactable = data.interactable\r\n      staticMode()\r\n      return\r\n    end\r\n  else\r\n    data = {size=200, color=Color(0,0,0), text='', interactable=true,\r\n        enter_to_finish=false, autolock=false, autolift=false,\r\n        hover_height=0.05, box_transparency=1}\r\n  end\r\n\r\n  inputMode()\r\nend\r\n\r\n-- True if in the middle of delay after pressing Enter (with enter_to_finish on)\r\nfinishing = false\r\nfunction input_func(obj, color, input, stillEditing)\r\n  local params = getBox(input)\r\n  if params then\r\n    params.value = input\r\n    self.editInput(params)\r\n  end\r\n\r\n  if not stillEditing then\r\n    data.text = input\r\n    updateState()\r\n    if input ~= '' then staticMode(color) end\r\n  elseif data.enter_to_finish then\r\n    -- If enter is pressed: remove last newline and force finish\r\n    if not finishing and input:sub(-1) == '\\n' then\r\n      finishing = true\r\n      -- Delay to avoid user's Enter keypress being detected (opens chat box)\r\n      Wait.frames(function()\r\n        input = input:sub(1, -2)\r\n        data.text = input\r\n        updateState()\r\n        if input ~= '' then staticMode(color) else inputMode() end\r\n        finishing = false\r\n      end, 10)\r\n    end\r\n  end\r\nend\r\n\r\n-- When the inpupt box appears and lets the player type in it.\r\nfunction inputMode()\r\n  self.clearContextMenu()\r\n  self.clearInputs()\r\n  self.clearButtons()\r\n\r\n  local size = getBox(data.text, true)\r\n\r\n  self.createInput({\r\n    input_function = \"input_func\",\r\n    function_owner = self,\r\n    label          = \"Type Here\",\r\n    alignment      = 3,\r\n    position       = {x=0, y=data.hover_height, z=0},\r\n    rotation       = {0, 180, 0},\r\n    width          = size.width,\r\n    height         = size.height,\r\n    color          = getBackground(data.color),\r\n    font_color     = data.color,\r\n    font_size      = data.size,\r\n    value          = data.text,\r\n  })\r\n\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\nend\r\n\r\n-- When the input box disappears and displays the text.\r\nfunction staticMode(player)\r\n  self.clearContextMenu()\r\n  if data.autolock then\r\n    self.locked = true\r\n  end\r\n  if self.getInputs() and #self.getInputs() ~= 0 then\r\n    self.removeInput(0)\r\n  end\r\n\r\n  -- Clear from selecting player\r\n  if player then\r\n    self.removeFromPlayerSelection(player)\r\n  end\r\n\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  self.createButton({\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=self,\r\n    position={0,data.hover_height,0}, rotation={0,180,0}, height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  })\r\n\r\n  self.addContextMenuItem('Edit Text', function(color)\r\n    self.removeFromPlayerSelection(color)\r\n    inputMode()\r\n  end)\r\n  self.addContextMenuItem('Clear', function(color)\r\n    applyMultiple(color, 'clear', _, true)\r\n  end)\r\n  self.addContextMenuItem('Color: Object Tint', function(color)\r\n    applyMultiple(color, 'setColor')\r\n  end)\r\n  self.addContextMenuItem('Color: Player', function(color)\r\n    applyMultiple(color, 'setColor', {Color.fromString(color)})\r\n  end)\r\n  self.addContextMenuItem('Color: Black', function(color)\r\n    applyMultiple(color, 'setColor', {Color(0,0,0)})\r\n  end)\r\n  self.addContextMenuItem('Color: White', function(color)\r\n    applyMultiple(color, 'setColor', {Color(1,1,1)})\r\n  end)\r\n  self.addContextMenuItem('Size: Increase', function(color)\r\n    applyMultiple(color, 'changeSize', {50})\r\n  end, true)\r\n  self.addContextMenuItem('Size: Decrease', function(color)\r\n    applyMultiple(color, 'changeSize', {-50})\r\n  end, true)\r\n  self.addContextMenuItem('Permanently Attach', attemptAttach)\r\n  self.addContextMenuItem('Permalock', function(color)\r\n    applyMultiple(color, 'permalock', _, true)\r\n  end)\r\nend\r\n\r\nfunction changeSize(params)\r\n  local delta = params[1]\r\n  local newSize = data.size + delta\r\n  if newSize > 800  or newSize < 50 then\r\n    return\r\n  end\r\n  data.size = newSize\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_size=data.size})\r\n  else\r\n    local size = getBox(data.text, true)\r\n    self.editInput({width=size.width, height=size.height, font_size=data.size})\r\n  end\r\nend\r\n\r\nfunction setColor(params)\r\n  if params and params[1] then\r\n    data.color = params[1]\r\n  else\r\n    data.color = self.getColorTint():setAt('a', 1) -- Take on color of object tint\r\n  end\r\n  updateState()\r\n  if self.getButtons() and #self.getButtons() ~= 0 then\r\n    self.editButton({font_color=data.color})\r\n  else\r\n    self.editInput({font_color=data.color, color=getBackground(data.color)})\r\n  end\r\nend\r\n\r\nfunction getBackground(color) --determines whether to use black or white depending on luminance\r\n  local r,g,b = Color(color):get()\r\n\r\n  local lum = 0.2126*r + 0.7152*g + 0.0722*b\r\n  if lum > 0.75 then\r\n    return {0.2,0.2,0.2, data.box_transparency}\r\n  else\r\n    return {1,1,1, data.box_transparency}\r\n  end\r\nend\r\n\r\nfunction clear()\r\n  data.text = ''\r\n  updateState()\r\n  inputMode()\r\nend\r\n\r\nfunction permalock()\r\n  self.interactable = false\r\n  data.interactable = false\r\n  updateState()\r\nend\r\n\r\nlocal target_script = [[\r\nfunction onLoad(script_state)\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    for _,entry in ipairs(state) do\r\n      self.createButton(entry)\r\n    end\r\n    self.addContextMenuItem('Clear All Text', function(color)\r\n      self.clearContextMenu()\r\n      self.clearButtons()\r\n      self.script_state = ''\r\n      self.script_code = ''\r\n    end)\r\n  end\r\nend\r\n]]\r\n\r\nfunction attemptAttach(player_color)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  local attachee\r\n  local attachers = {}\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if obj ~= self then\r\n        table.insert(attachers, obj)\r\n      end\r\n    else\r\n      if attachee then\r\n        broadcastToColor(\"More than one target selected.\", player_color)\r\n        return\r\n      else\r\n        attachee = obj\r\n      end\r\n    end\r\n  end\r\n  if attachee then\r\n    local code = attachee.script_code\r\n    if code and code ~= '' and code ~= target_script then\r\n      broadcastToColor(\"Warning: script on card has been overriden. Rewind time to undo.\", player_color)\r\n    end\r\n    for i,attacher in ipairs(attachers) do\r\n      attacher.call('attach', {target = attachee})\r\n    end\r\n    attach({target = attachee})\r\n    local type, flip = attachee.type, attachee.getRotation().z\r\n    if (type == 'Card' or type == 'Deck') and flip > 175 and flip < 185 then\r\n      broadcastToColor(\"Warning: text will not display if card or deck is facing down.\", player_color)\r\n    end\r\n  else\r\n    broadcastToColor(\"You must have a target object in your selection (using click-and-drag or Ctrl+Click) to use this option.\", player_color)\r\n  end\r\nend\r\n\r\nfunction attach(params)\r\n  local target = params.target\r\n  local displayText = data.text\r\n  if data.enter_to_finish then\r\n    displayText = displayText:gsub('%[n%]', '\\n')\r\n  end\r\n\r\n  local textRotation = self.getRotation():sub(target.getRotation())\r\n    :add(Vector(180, 0, 180))\r\n\r\n  local textPosition = target.positionToLocal(\r\n    self.getPosition():add(Vector(0, data.hover_height, 0))\r\n  )\r\n  textPosition.x = -textPosition.x\r\n\r\n  local textScale = {}\r\n  textScale.x = self.getScale().x / target.getScale().x\r\n  textScale.y = self.getScale().x / target.getScale().y\r\n  textScale.z = self.getScale().x / target.getScale().z\r\n\r\n  local details = {\r\n    label=displayText,\r\n    click_function=\"none\",\r\n    function_owner=nil,\r\n    position=textPosition,\r\n    rotation=textRotation,\r\n    scale=textScale,\r\n    height=0, width=0,\r\n    font_color=data.color, font_size=data.size\r\n  }\r\n\r\n  target.createButton(details)\r\n\r\n  local script_state = target.script_state\r\n  if script_state and script_state ~= '' then\r\n    local state = JSON.decode(script_state)\r\n    table.insert(state, details)\r\n    target.script_state = JSON.encode(state)\r\n  else\r\n    target.script_state = JSON.encode({[1]=details})\r\n  end\r\n\r\n  target.script_code = target_script\r\n\r\n  self.destruct()\r\nend\r\n\r\nfunction applyMultiple(player_color, func_string, params, static_only)\r\n  local objs = Player[player_color].getSelectedObjects()\r\n  for _,obj in ipairs(objs) do\r\n    if obj.getVar('movableTextTool_cowgoesmoo33') then\r\n      if not static_only or obj.call('isStatic') then\r\n        obj.call(func_string, params)\r\n      end\r\n    end\r\n  end\r\nend\r\n\r\nfunction isStatic()\r\n  local input = self.getInputs()\r\n  return not input or #input == 0\r\nend\r\n\r\nfunction getBox(input, force)\r\n  local maxLength, lineCount = EXPAND_INTERVAL, 1\r\n  local lineLength = 0\r\n  for i = 1, #input do\r\n    local c = input:sub(i,i)\r\n    if c == '\\n' then\r\n      lineCount = lineCount + 1\r\n      if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n      lineLength = 0\r\n    else\r\n      lineLength = lineLength + 1\r\n    end\r\n  end\r\n  if lineLength > maxLength then maxLength = (math.floor(lineLength / EXPAND_INTERVAL) + 1) * EXPAND_INTERVAL end\r\n\r\n  newWidth = data.size * maxLength * 0.9\r\n  newHeight = data.size * lineCount + 23\r\n\r\n  if force or boxWidth ~= newWidth or boxHeight ~= newHeight then\r\n    boxWidth, boxHeight = newWidth, newHeight\r\n    return {width = boxWidth, height = boxHeight}\r\n  end\r\n  return nil\r\nend\r\n\r\ntemp_lift = nil\r\nfunction onPickUp(player_color)\r\n  if data.autolift then\r\n    local player = Player[player_color]\r\n    temp_lift = player.lift_height\r\n    player.lift_height = 0\r\n  end\r\nend\r\n\r\nfunction onDrop(player_color)\r\n  if data.autolift and temp_lift then\r\n    Player[player_color].lift_height = temp_lift\r\n  end\r\nend\r\n\r\n-- Should be called every time data is modified, allows info to be saved on copy/paste\r\nfunction updateState()\r\n  self.script_state = JSON.encode(data)\r\nend\r\n\r\nfunction onSave()\r\n  self.script_state = JSON.encode(data)\r\n  return self.script_state\r\nend",
          "LuaScriptState": "{\"autolift\":false,\"autolock\":false,\"box_transparency\":1,\"color\":{\"a\":1,\"b\":1,\"g\":1,\"r\":1},\"enter_to_finish\":false,\"hover_height\":0.05,\"interactable\":true,\"size\":250,\"text\":\"Machination\\n\"}",
          "XmlUI": ""
        },
        {
          "GUID": "8330b2",
          "Name": "Card",
          "Transform": {
            "posX": 12.5007935,
            "posY": 1.50466132,
            "posZ": -6.01675,
            "rotX": 0.004944106,
            "rotY": 89.97858,
            "rotZ": 359.9891,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87004\",\n  \"type\": \"Act\"\n}",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 1110830,
          "SidewaysCard": true,
          "CustomDeck": {
            "11108": {
              "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
              "BackURL": "https://i.imgur.com/KD87ez9.jpg",
              "NumWidth": 10,
              "NumHeight": 7,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "b03248",
          "Name": "Card",
          "Transform": {
            "posX": -19.5006657,
            "posY": 1.78360617,
            "posZ": 2.49932981,
            "rotX": -4.93218749E-06,
            "rotY": 180.006561,
            "rotZ": -9.45932E-08,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87029\",\n  \"locationBack\": {\n    \"connections\": \"Diamond\",\n    \"icons\": \"Apostrophe\",\n    \"uses\": {\n      \"countPerInvestigator\": 1,\n      \"token\": \"clue\",\n      \"type\": \"Clue\"\n    }\n  },\n  \"locationFront\": {\n    \"connections\": \"Diamond\",\n    \"icons\": \"Apostrophe\"\n  },\n  \"traits\": \"Arkham. Future.\",\n  \"type\": \"Location\"\n}",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 1104925,
          "SidewaysCard": false,
          "CustomDeck": {
            "11049": {
              "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
              "BackURL": "https://i.imgur.com/KD87ez9.jpg",
              "NumWidth": 10,
              "NumHeight": 7,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "b6b78f",
          "Name": "Custom_Assetbundle",
          "Transform": {
            "posX": 33.0035,
            "posY": 1.54,
            "posZ": -8.1353,
            "rotX": 0.0,
            "rotY": 180.0,
            "rotZ": 180.0,
            "scaleX": 1.668553,
            "scaleY": 0.300014,
            "scaleZ": 1.2268796
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.4429575,
            "g": 0.230957478,
            "b": 0.0899654254
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": true,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "CustomAssetbundle": {
            "AssetbundleURL": "chry.me/tts/3droom/floorpad.unity3d",
            "AssetbundleSecondaryURL": "",
            "MaterialIndex": 3,
            "TypeIndex": 4,
            "LoopingEffectIndex": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "AttachedSnapPoints": [
            {
              "Position": {
                "x": -1.50041318,
                "y": -2.77722279E-07,
                "z": 0.297260165
              },
              "Rotation": {
                "x": 359.9072,
                "y": -0.000519085967,
                "z": 180.001038
              }
            },
            {
              "Position": {
                "x": 1.19654453,
                "y": -3.97018084E-07,
                "z": 0.297326684
              },
              "Rotation": {
                "x": 359.907623,
                "y": 0.000833291153,
                "z": 179.999939
              }
            }
          ]
        },
        {
          "GUID": "da61d5",
          "Name": "Deck",
          "Transform": {
            "posX": 17.501,
            "posY": 1.52118266,
            "posZ": -6.01960325,
            "rotX": 0.004948125,
            "rotY": 90.00043,
            "rotZ": 359.9891,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": false,
          "SidewaysCard": true,
          "DeckIDs": [
            1110829,
            1110828
          ],
          "CustomDeck": {
            "11108": {
              "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
              "BackURL": "https://i.imgur.com/KD87ez9.jpg",
              "NumWidth": 10,
              "NumHeight": 7,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "ContainedObjects": [
            {
              "GUID": "c19088",
              "Name": "Card",
              "Transform": {
                "posX": 17.5010548,
                "posY": 1.60573912,
                "posZ": -6.01915836,
                "rotX": 0.004241789,
                "rotY": 90.00088,
                "rotZ": 359.988434,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "Description": "",
              "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"doomThreshold\": 9,\n  \"id\": \"87003\",\n  \"type\": \"Agenda\"\n}",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 0.713235259,
                "g": 0.713235259,
                "b": 0.713235259
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": true,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": true,
              "Tooltip": true,
              "GridProjection": false,
              "HideWhenFaceDown": true,
              "Hands": true,
              "CardID": 1110829,
              "SidewaysCard": true,
              "CustomDeck": {
                "11108": {
                  "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                  "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                  "NumWidth": 10,
                  "NumHeight": 7,
                  "BackIsHidden": true,
                  "UniqueBack": true,
                  "Type": 0
                }
              },
              "LuaScript": "",
              "LuaScriptState": "",
              "XmlUI": ""
            },
            {
              "GUID": "88b8c4",
              "Name": "Card",
              "Transform": {
                "posX": 17.5010567,
                "posY": 1.60397649,
                "posZ": -6.01916647,
                "rotX": 0.00259662117,
                "rotY": 90.00088,
                "rotZ": 359.988068,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "Description": "",
              "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"doomThreshold\": 9,\n  \"id\": \"87002\",\n  \"type\": \"Agenda\"\n}",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 0.713235259,
                "g": 0.713235259,
                "b": 0.713235259
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": true,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": true,
              "Tooltip": true,
              "GridProjection": false,
              "HideWhenFaceDown": true,
              "Hands": true,
              "CardID": 1110828,
              "SidewaysCard": true,
              "CustomDeck": {
                "11108": {
                  "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
                  "BackURL": "https://i.imgur.com/KD87ez9.jpg",
                  "NumWidth": 10,
                  "NumHeight": 7,
                  "BackIsHidden": true,
                  "UniqueBack": true,
                  "Type": 0
                }
              },
              "LuaScript": "",
              "LuaScriptState": "",
              "XmlUI": ""
            }
          ]
        },
        {
          "GUID": "e1f999",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": -22.0000038,
            "posY": 1.84000123,
            "posZ": 2.49999452,
            "rotX": -5.81993E-06,
            "rotY": 179.9837,
            "rotZ": 2.18552373E-07,
            "scaleX": 0.7,
            "scaleY": 0.7,
            "scaleZ": 0.7
          },
          "Nickname": "Soutiens/faiblesses d'histoire",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "CustomMesh": {
            "MeshURL": "https://pastebin.com/raw/ALrYhQGb",
            "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/5077277234347423622/F89B4508C6E2782780C2B5593FB68379E0FB2DB6/",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "{\"ml\":[]}",
          "XmlUI": "",
          "ContainedObjects": [
            {
              "GUID": "9f298f",
              "Name": "Card",
              "Transform": {
                "posX": -22.5,
                "posY": 1.9374547,
                "posZ": 2.0,
                "rotX": 0.00201733573,
                "rotY": 179.977814,
                "rotZ": -0.00133738772,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "Description": "",
              "GMNotes": "{\n  \"class\": \"Neutral\",\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"87014\",\n  \"sanity\": 1,\n  \"traits\": \"Scientist. Ally. Past.\",\n  \"type\": \"Asset\"\n}",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 0.713235259,
                "g": 0.713235259,
                "b": 0.713235259
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": true,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": true,
              "Tooltip": true,
              "GridProjection": false,
              "HideWhenFaceDown": true,
              "Hands": true,
              "CardID": 1110700,
              "SidewaysCard": false,
              "CustomDeck": {
                "11107": {
                  "FaceURL": "https://i.imgur.com/FhiblpC.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931552806915249927/583EE2570FC1A094D59B991E97AB542CA94BEBC9/",
                  "NumWidth": 10,
                  "NumHeight": 7,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              },
              "LuaScript": "",
              "LuaScriptState": "",
              "XmlUI": ""
            },
            {
              "GUID": "8092b5",
              "Name": "Card",
              "Transform": {
                "posX": -22.0,
                "posY": 1.93748283,
                "posZ": 3.0,
                "rotX": -0.0009845387,
                "rotY": 179.977158,
                "rotZ": 4.517632E-05,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "Description": "",
              "GMNotes": "{\n  \"class\": \"Neutral\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"87032\",\n  \"traits\": \"Item. Science. Tool. Future.\",\n  \"type\": \"Asset\"\n}",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 0.713235259,
                "g": 0.713235259,
                "b": 0.713235259
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": true,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": true,
              "Tooltip": true,
              "GridProjection": false,
              "HideWhenFaceDown": true,
              "Hands": true,
              "CardID": 1110701,
              "SidewaysCard": false,
              "CustomDeck": {
                "11107": {
                  "FaceURL": "https://i.imgur.com/FhiblpC.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931552806915249927/583EE2570FC1A094D59B991E97AB542CA94BEBC9/",
                  "NumWidth": 10,
                  "NumHeight": 7,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              },
              "LuaScript": "",
              "LuaScriptState": "",
              "XmlUI": ""
            },
            {
              "GUID": "d6fa6a",
              "Name": "Card",
              "Transform": {
                "posX": -22.5,
                "posY": 1.93749237,
                "posZ": 2.5,
                "rotX": -3.331885E-06,
                "rotY": 179.974838,
                "rotZ": -0.000111957881,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "Description": "",
              "GMNotes": "{\n  \"class\": \"Neutral\",\n  \"cycle\": \"Standalone\",\n  \"health\": 1,\n  \"id\": \"87023\",\n  \"sanity\": 2,\n  \"traits\": \"Scientist. Ally. Present.\",\n  \"type\": \"Asset\"\n}",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 0.713235259,
                "g": 0.713235259,
                "b": 0.713235259
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": true,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": true,
              "Tooltip": true,
              "GridProjection": false,
              "HideWhenFaceDown": true,
              "Hands": true,
              "CardID": 1110702,
              "SidewaysCard": false,
              "CustomDeck": {
                "11107": {
                  "FaceURL": "https://i.imgur.com/FhiblpC.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931552806915249927/583EE2570FC1A094D59B991E97AB542CA94BEBC9/",
                  "NumWidth": 10,
                  "NumHeight": 7,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              },
              "LuaScript": "",
              "LuaScriptState": "",
              "XmlUI": ""
            }
          ]
        },
        {
          "GUID": "ea6c1e",
          "Name": "Deck",
          "Transform": {
            "posX": 30.5000019,
            "posY": 1.70031583,
            "posZ": -2.99745369,
            "rotX": 359.233521,
            "rotY": 179.9985,
            "rotZ": 180.000961,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": false,
          "SidewaysCard": false,
          "DeckIDs": [
            1110629,
            1110631,
            1110609,
            1110632,
            1110634,
            1110633,
            1110635,
            1110636,
            1110637,
            1110626,
            1110613,
            1110625,
            1110612,
            1110627,
            1110614,
            1110622,
            1110615,
            1110628,
            1110605,
            1110610,
            1110630,
            1110616,
            1110619,
            1110606,
            1110621,
            1110618,
            1110624,
            1110620,
            1110607,
            1110617,
            1110623,
            1110611,
            1110608
          ],
          "CustomDeck": {
            "11106": {
              "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
              "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
              "NumWidth": 10,
              "NumHeight": 7,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "ContainedObjects": [
            {
              "GUID": "223a40",
              "Name": "Card",
              "Transform": {
                "posX": 30.4915,
                "posY": 10.979722,
                "posZ": -2.99660468,
                "rotX": -0.000593652949,
                "rotY": 180.140228,
                "rotZ": 180.001068,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "Description": "",
              "GMNotes": "{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"87054\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 0.713235259,
                "g": 0.713235259,
                "b": 0.713235259
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": true,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": true,
              "Tooltip": true,
              "GridProjection": false,
              "HideWhenFaceDown": true,
              "Hands": true,
              "CardID": 1110629,
              "SidewaysCard": false,
              "CustomDeck": {
                "11106": {
                  "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                  "NumWidth": 10,
                  "NumHeight": 7,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              },
              "LuaScript": "",
              "LuaScriptState": "",
              "XmlUI": ""
            },
            {
              "GUID": "e227a4",
              "Name": "Card",
              "Transform": {
                "posX": 30.4915,
                "posY": 10.7797213,
                "posZ": -2.99660468,
                "rotX": -0.000593652949,
                "rotY": 180.140228,
                "rotZ": 180.001068,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "Description": "",
              "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87055\",\n  \"traits\": \"Hazard.\",\n  \"type\": \"Treachery\"\n}",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 0.713235259,
                "g": 0.713235259,
                "b": 0.713235259
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": true,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": true,
              "Tooltip": true,
              "GridProjection": false,
              "HideWhenFaceDown": true,
              "Hands": true,
              "CardID": 1110631,
              "SidewaysCard": false,
              "CustomDeck": {
                "11106": {
                  "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                  "NumWidth": 10,
                  "NumHeight": 7,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              },
              "LuaScript": "",
              "LuaScriptState": "",
              "XmlUI": ""
            },
            {
              "GUID": "7d7b04",
              "Name": "Card",
              "Transform": {
                "posX": 30.4915,
                "posY": 10.5797215,
                "posZ": -2.99660468,
                "rotX": -0.000593652949,
                "rotY": 180.140228,
                "rotZ": 180.001068,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "Description": "",
              "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"87045\",\n  \"traits\": \"Monster. Extradimensional. Tindalos.\",\n  \"type\": \"Enemy\"\n}",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 0.713235259,
                "g": 0.713235259,
                "b": 0.713235259
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": true,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": true,
              "Tooltip": true,
              "GridProjection": false,
              "HideWhenFaceDown": true,
              "Hands": true,
              "CardID": 1110609,
              "SidewaysCard": false,
              "CustomDeck": {
                "11106": {
                  "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                  "NumWidth": 10,
                  "NumHeight": 7,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              },
              "LuaScript": "",
              "LuaScriptState": "",
              "XmlUI": ""
            },
            {
              "GUID": "3f98e2",
              "Name": "Card",
              "Transform": {
                "posX": 30.4915,
                "posY": 10.3797216,
                "posZ": -2.99660468,
                "rotX": -0.000593652949,
                "rotY": 180.140228,
                "rotZ": 180.001068,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "Description": "",
              "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87055\",\n  \"traits\": \"Hazard.\",\n  \"type\": \"Treachery\"\n}",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 0.713235259,
                "g": 0.713235259,
                "b": 0.713235259
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": true,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": true,
              "Tooltip": true,
              "GridProjection": false,
              "HideWhenFaceDown": true,
              "Hands": true,
              "CardID": 1110632,
              "SidewaysCard": false,
              "CustomDeck": {
                "11106": {
                  "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                  "NumWidth": 10,
                  "NumHeight": 7,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              },
              "LuaScript": "",
              "LuaScriptState": "",
              "XmlUI": ""
            },
            {
              "GUID": "ded59c",
              "Name": "Card",
              "Transform": {
                "posX": 30.4915,
                "posY": 9.842235,
                "posZ": -2.99660444,
                "rotX": -0.0005937142,
                "rotY": 180.140228,
                "rotZ": 180.001068,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "Description": "",
              "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87056\",\n  \"traits\": \"Hazard.\",\n  \"type\": \"Treachery\"\n}",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 0.713235259,
                "g": 0.713235259,
                "b": 0.713235259
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": true,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": true,
              "Tooltip": true,
              "GridProjection": false,
              "HideWhenFaceDown": true,
              "Hands": true,
              "CardID": 1110634,
              "SidewaysCard": false,
              "CustomDeck": {
                "11106": {
                  "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                  "NumWidth": 10,
                  "NumHeight": 7,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              },
              "LuaScript": "",
              "LuaScriptState": "",
              "XmlUI": ""
            },
            {
              "GUID": "a29254",
              "Name": "Card",
              "Transform": {
                "posX": 30.4915,
                "posY": 9.979722,
                "posZ": -2.99660468,
                "rotX": -0.000593652949,
                "rotY": 180.140228,
                "rotZ": 180.001068,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "Description": "",
              "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87056\",\n  \"traits\": \"Hazard.\",\n  \"type\": \"Treachery\"\n}",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 0.713235259,
                "g": 0.713235259,
                "b": 0.713235259
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": true,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": true,
              "Tooltip": true,
              "GridProjection": false,
              "HideWhenFaceDown": true,
              "Hands": true,
              "CardID": 1110633,
              "SidewaysCard": false,
              "CustomDeck": {
                "11106": {
                  "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                  "NumWidth": 10,
                  "NumHeight": 7,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              },
              "LuaScript": "",
              "LuaScriptState": "",
              "XmlUI": ""
            },
            {
              "GUID": "38827b",
              "Name": "Card",
              "Transform": {
                "posX": 30.4915,
                "posY": 9.779721,
                "posZ": -2.99660468,
                "rotX": -0.000593652949,
                "rotY": 180.140228,
                "rotZ": 180.001068,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "Description": "",
              "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87057\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 0.713235259,
                "g": 0.713235259,
                "b": 0.713235259
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": true,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": true,
              "Tooltip": true,
              "GridProjection": false,
              "HideWhenFaceDown": true,
              "Hands": true,
              "CardID": 1110635,
              "SidewaysCard": false,
              "CustomDeck": {
                "11106": {
                  "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                  "NumWidth": 10,
                  "NumHeight": 7,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              },
              "LuaScript": "",
              "LuaScriptState": "",
              "XmlUI": ""
            },
            {
              "GUID": "d31e36",
              "Name": "Card",
              "Transform": {
                "posX": 30.4915,
                "posY": 9.242235,
                "posZ": -2.99660444,
                "rotX": -0.00059366296,
                "rotY": 180.140228,
                "rotZ": 180.001068,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "Description": "",
              "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87057\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 0.713235259,
                "g": 0.713235259,
                "b": 0.713235259
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": true,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": true,
              "Tooltip": true,
              "GridProjection": false,
              "HideWhenFaceDown": true,
              "Hands": true,
              "CardID": 1110636,
              "SidewaysCard": false,
              "CustomDeck": {
                "11106": {
                  "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                  "NumWidth": 10,
                  "NumHeight": 7,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              },
              "LuaScript": "",
              "LuaScriptState": "",
              "XmlUI": ""
            },
            {
              "GUID": "0a089f",
              "Name": "Card",
              "Transform": {
                "posX": 30.4915,
                "posY": 9.379722,
                "posZ": -2.99660468,
                "rotX": -0.000593652949,
                "rotY": 180.140228,
                "rotZ": 180.001068,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "Description": "",
              "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87057\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 0.713235259,
                "g": 0.713235259,
                "b": 0.713235259
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": true,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": true,
              "Tooltip": true,
              "GridProjection": false,
              "HideWhenFaceDown": true,
              "Hands": true,
              "CardID": 1110637,
              "SidewaysCard": false,
              "CustomDeck": {
                "11106": {
                  "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                  "NumWidth": 10,
                  "NumHeight": 7,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              },
              "LuaScript": "",
              "LuaScriptState": "",
              "XmlUI": ""
            },
            {
              "GUID": "eb69f1",
              "Name": "Card",
              "Transform": {
                "posX": 30.4915,
                "posY": 9.179722,
                "posZ": -2.99660468,
                "rotX": -0.000593652949,
                "rotY": 180.140228,
                "rotZ": 180.001068,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "Description": "",
              "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87052\",\n  \"traits\": \"Terror.\",\n  \"type\": \"Treachery\"\n}",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 0.713235259,
                "g": 0.713235259,
                "b": 0.713235259
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": true,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": true,
              "Tooltip": true,
              "GridProjection": false,
              "HideWhenFaceDown": true,
              "Hands": true,
              "CardID": 1110626,
              "SidewaysCard": false,
              "CustomDeck": {
                "11106": {
                  "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                  "NumWidth": 10,
                  "NumHeight": 7,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              },
              "LuaScript": "",
              "LuaScriptState": "",
              "XmlUI": ""
            },
            {
              "GUID": "6cf291",
              "Name": "Card",
              "Transform": {
                "posX": 30.4915,
                "posY": 8.979722,
                "posZ": -2.99660468,
                "rotX": -0.000593652949,
                "rotY": 180.140228,
                "rotZ": 180.001068,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "Description": "",
              "GMNotes": "{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"health\": 3,\n  \"id\": \"87047\",\n  \"traits\": \"Monster. Extradimensional. Tindalos.\",\n  \"type\": \"Enemy\"\n}",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 0.713235259,
                "g": 0.713235259,
                "b": 0.713235259
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": true,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": true,
              "Tooltip": true,
              "GridProjection": false,
              "HideWhenFaceDown": true,
              "Hands": true,
              "CardID": 1110613,
              "SidewaysCard": false,
              "CustomDeck": {
                "11106": {
                  "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                  "NumWidth": 10,
                  "NumHeight": 7,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              },
              "LuaScript": "",
              "LuaScriptState": "",
              "XmlUI": ""
            },
            {
              "GUID": "41af65",
              "Name": "Card",
              "Transform": {
                "posX": 30.4915,
                "posY": 8.779721,
                "posZ": -2.99660468,
                "rotX": -0.000593652949,
                "rotY": 180.140228,
                "rotZ": 180.001068,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "Description": "",
              "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87052\",\n  \"traits\": \"Terror.\",\n  \"type\": \"Treachery\"\n}",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 0.713235259,
                "g": 0.713235259,
                "b": 0.713235259
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": true,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": true,
              "Tooltip": true,
              "GridProjection": false,
              "HideWhenFaceDown": true,
              "Hands": true,
              "CardID": 1110625,
              "SidewaysCard": false,
              "CustomDeck": {
                "11106": {
                  "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                  "NumWidth": 10,
                  "NumHeight": 7,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              },
              "LuaScript": "",
              "LuaScriptState": "",
              "XmlUI": ""
            },
            {
              "GUID": "835bda",
              "Name": "Card",
              "Transform": {
                "posX": 30.4915,
                "posY": 8.579721,
                "posZ": -2.99660468,
                "rotX": -0.000593652949,
                "rotY": 180.140228,
                "rotZ": 180.001068,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "Description": "",
              "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 7,\n  \"id\": \"87046\",\n  \"traits\": \"Monster. Extradimensional. Tindalos. Elite.\",\n  \"type\": \"Enemy\",\n  \"victory\": 1\n}",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 0.713235259,
                "g": 0.713235259,
                "b": 0.713235259
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": true,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": true,
              "Tooltip": true,
              "GridProjection": false,
              "HideWhenFaceDown": true,
              "Hands": true,
              "CardID": 1110612,
              "SidewaysCard": false,
              "CustomDeck": {
                "11106": {
                  "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                  "NumWidth": 10,
                  "NumHeight": 7,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              },
              "LuaScript": "",
              "LuaScriptState": "",
              "XmlUI": ""
            },
            {
              "GUID": "aa0c99",
              "Name": "Card",
              "Transform": {
                "posX": 30.4915,
                "posY": 8.379722,
                "posZ": -2.99660468,
                "rotX": -0.000593652949,
                "rotY": 180.140228,
                "rotZ": 180.001068,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "Description": "",
              "GMNotes": "{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"87053\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 0.713235259,
                "g": 0.713235259,
                "b": 0.713235259
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": true,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": true,
              "Tooltip": true,
              "GridProjection": false,
              "HideWhenFaceDown": true,
              "Hands": true,
              "CardID": 1110627,
              "SidewaysCard": false,
              "CustomDeck": {
                "11106": {
                  "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                  "NumWidth": 10,
                  "NumHeight": 7,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              },
              "LuaScript": "",
              "LuaScriptState": "",
              "XmlUI": ""
            },
            {
              "GUID": "476e2c",
              "Name": "Card",
              "Transform": {
                "posX": 30.4915,
                "posY": 8.179722,
                "posZ": -2.99660468,
                "rotX": -0.000593652949,
                "rotY": 180.140228,
                "rotZ": 180.001068,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "Description": "",
              "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87048\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 0.713235259,
                "g": 0.713235259,
                "b": 0.713235259
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": true,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": true,
              "Tooltip": true,
              "GridProjection": false,
              "HideWhenFaceDown": true,
              "Hands": true,
              "CardID": 1110614,
              "SidewaysCard": false,
              "CustomDeck": {
                "11106": {
                  "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                  "NumWidth": 10,
                  "NumHeight": 7,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              },
              "LuaScript": "",
              "LuaScriptState": "",
              "XmlUI": ""
            },
            {
              "GUID": "3a07f0",
              "Name": "Card",
              "Transform": {
                "posX": 30.4915,
                "posY": 7.979722,
                "posZ": -2.99660468,
                "rotX": -0.000593652949,
                "rotY": 180.140228,
                "rotZ": 180.001068,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "Description": "",
              "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87051\",\n  \"traits\": \"Hazard. Power.\",\n  \"type\": \"Treachery\"\n}",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 0.713235259,
                "g": 0.713235259,
                "b": 0.713235259
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": true,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": true,
              "Tooltip": true,
              "GridProjection": false,
              "HideWhenFaceDown": true,
              "Hands": true,
              "CardID": 1110622,
              "SidewaysCard": false,
              "CustomDeck": {
                "11106": {
                  "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                  "NumWidth": 10,
                  "NumHeight": 7,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              },
              "LuaScript": "",
              "LuaScriptState": "",
              "XmlUI": ""
            },
            {
              "GUID": "a3d427",
              "Name": "Card",
              "Transform": {
                "posX": 30.4915,
                "posY": 7.442235,
                "posZ": -2.99660444,
                "rotX": -0.000593722856,
                "rotY": 180.140228,
                "rotZ": 180.001068,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "Description": "",
              "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87048\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 0.713235259,
                "g": 0.713235259,
                "b": 0.713235259
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": true,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": true,
              "Tooltip": true,
              "GridProjection": false,
              "HideWhenFaceDown": true,
              "Hands": true,
              "CardID": 1110615,
              "SidewaysCard": false,
              "CustomDeck": {
                "11106": {
                  "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                  "NumWidth": 10,
                  "NumHeight": 7,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              },
              "LuaScript": "",
              "LuaScriptState": "",
              "XmlUI": ""
            },
            {
              "GUID": "4bf4d7",
              "Name": "Card",
              "Transform": {
                "posX": 30.4915,
                "posY": 7.579721,
                "posZ": -2.99660468,
                "rotX": -0.000593652949,
                "rotY": 180.140228,
                "rotZ": 180.001068,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "Description": "",
              "GMNotes": "{\n  \"class\": \"Mythos\",\n  \"cycle\": \"Standalone\",\n  \"id\": \"87054\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 0.713235259,
                "g": 0.713235259,
                "b": 0.713235259
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": true,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": true,
              "Tooltip": true,
              "GridProjection": false,
              "HideWhenFaceDown": true,
              "Hands": true,
              "CardID": 1110628,
              "SidewaysCard": false,
              "CustomDeck": {
                "11106": {
                  "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                  "NumWidth": 10,
                  "NumHeight": 7,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              },
              "LuaScript": "",
              "LuaScriptState": "",
              "XmlUI": ""
            },
            {
              "GUID": "01a675",
              "Name": "Card",
              "Transform": {
                "posX": 30.4915,
                "posY": 7.37972164,
                "posZ": -2.99660468,
                "rotX": -0.000593652949,
                "rotY": 180.140228,
                "rotZ": 180.001068,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "Description": "",
              "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 3,\n  \"id\": \"87044\",\n  \"traits\": \"Monster. Extradimensional. Tindalos.\",\n  \"type\": \"Enemy\"\n}",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 0.713235259,
                "g": 0.713235259,
                "b": 0.713235259
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": true,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": true,
              "Tooltip": true,
              "GridProjection": false,
              "HideWhenFaceDown": true,
              "Hands": true,
              "CardID": 1110605,
              "SidewaysCard": false,
              "CustomDeck": {
                "11106": {
                  "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                  "NumWidth": 10,
                  "NumHeight": 7,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              },
              "LuaScript": "",
              "LuaScriptState": "",
              "XmlUI": ""
            },
            {
              "GUID": "a4725d",
              "Name": "Card",
              "Transform": {
                "posX": 30.4915,
                "posY": 5.71215057,
                "posZ": -2.996605,
                "rotX": -0.000593119767,
                "rotY": 180.140228,
                "rotZ": 180.001068,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "Description": "",
              "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"87045\",\n  \"traits\": \"Monster. Extradimensional. Tindalos.\",\n  \"type\": \"Enemy\"\n}",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 0.713235259,
                "g": 0.713235259,
                "b": 0.713235259
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": true,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": true,
              "Tooltip": true,
              "GridProjection": false,
              "HideWhenFaceDown": true,
              "Hands": true,
              "CardID": 1110610,
              "SidewaysCard": false,
              "CustomDeck": {
                "11106": {
                  "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                  "NumWidth": 10,
                  "NumHeight": 7,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              },
              "LuaScript": "",
              "LuaScriptState": "",
              "XmlUI": ""
            },
            {
              "GUID": "38f34a",
              "Name": "Card",
              "Transform": {
                "posX": 30.4915,
                "posY": 7.179722,
                "posZ": -2.99660468,
                "rotX": -0.000593652949,
                "rotY": 180.140228,
                "rotZ": 180.001068,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "Description": "",
              "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87055\",\n  \"traits\": \"Hazard.\",\n  \"type\": \"Treachery\"\n}",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 0.713235259,
                "g": 0.713235259,
                "b": 0.713235259
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": true,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": true,
              "Tooltip": true,
              "GridProjection": false,
              "HideWhenFaceDown": true,
              "Hands": true,
              "CardID": 1110630,
              "SidewaysCard": false,
              "CustomDeck": {
                "11106": {
                  "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                  "NumWidth": 10,
                  "NumHeight": 7,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              },
              "LuaScript": "",
              "LuaScriptState": "",
              "XmlUI": ""
            },
            {
              "GUID": "6526b5",
              "Name": "Card",
              "Transform": {
                "posX": 30.4915,
                "posY": 6.9797225,
                "posZ": -2.99660468,
                "rotX": -0.000593652949,
                "rotY": 180.140228,
                "rotZ": 180.001068,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "Description": "",
              "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87049\",\n  \"traits\": \"Scheme.\",\n  \"type\": \"Treachery\"\n}",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 0.713235259,
                "g": 0.713235259,
                "b": 0.713235259
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": true,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": true,
              "Tooltip": true,
              "GridProjection": false,
              "HideWhenFaceDown": true,
              "Hands": true,
              "CardID": 1110616,
              "SidewaysCard": false,
              "CustomDeck": {
                "11106": {
                  "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                  "NumWidth": 10,
                  "NumHeight": 7,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              },
              "LuaScript": "",
              "LuaScriptState": "",
              "XmlUI": ""
            },
            {
              "GUID": "458856",
              "Name": "Card",
              "Transform": {
                "posX": 30.4915,
                "posY": 6.44223642,
                "posZ": -2.99660444,
                "rotX": -0.000593720644,
                "rotY": 180.140228,
                "rotZ": 180.001068,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "Description": "",
              "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87050\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 0.713235259,
                "g": 0.713235259,
                "b": 0.713235259
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": true,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": true,
              "Tooltip": true,
              "GridProjection": false,
              "HideWhenFaceDown": true,
              "Hands": true,
              "CardID": 1110619,
              "SidewaysCard": false,
              "CustomDeck": {
                "11106": {
                  "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                  "NumWidth": 10,
                  "NumHeight": 7,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              },
              "LuaScript": "",
              "LuaScriptState": "",
              "XmlUI": ""
            },
            {
              "GUID": "4e6e6f",
              "Name": "Card",
              "Transform": {
                "posX": 30.4915,
                "posY": 6.5797224,
                "posZ": -2.99660468,
                "rotX": -0.000593652949,
                "rotY": 180.140228,
                "rotZ": 180.001068,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "Description": "",
              "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 3,\n  \"id\": \"87044\",\n  \"traits\": \"Monster. Extradimensional. Tindalos.\",\n  \"type\": \"Enemy\"\n}",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 0.713235259,
                "g": 0.713235259,
                "b": 0.713235259
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": true,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": true,
              "Tooltip": true,
              "GridProjection": false,
              "HideWhenFaceDown": true,
              "Hands": true,
              "CardID": 1110606,
              "SidewaysCard": false,
              "CustomDeck": {
                "11106": {
                  "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                  "NumWidth": 10,
                  "NumHeight": 7,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              },
              "LuaScript": "",
              "LuaScriptState": "",
              "XmlUI": ""
            },
            {
              "GUID": "0cfb28",
              "Name": "Card",
              "Transform": {
                "posX": 30.4915,
                "posY": 6.3797226,
                "posZ": -2.99660468,
                "rotX": -0.000593652949,
                "rotY": 180.140228,
                "rotZ": 180.001068,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "Description": "",
              "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87050\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 0.713235259,
                "g": 0.713235259,
                "b": 0.713235259
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": true,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": true,
              "Tooltip": true,
              "GridProjection": false,
              "HideWhenFaceDown": true,
              "Hands": true,
              "CardID": 1110621,
              "SidewaysCard": false,
              "CustomDeck": {
                "11106": {
                  "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                  "NumWidth": 10,
                  "NumHeight": 7,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              },
              "LuaScript": "",
              "LuaScriptState": "",
              "XmlUI": ""
            },
            {
              "GUID": "ff559d",
              "Name": "Card",
              "Transform": {
                "posX": 30.4915,
                "posY": 6.17972231,
                "posZ": -2.99660468,
                "rotX": -0.000593652949,
                "rotY": 180.140228,
                "rotZ": 180.001068,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "Description": "",
              "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87049\",\n  \"traits\": \"Scheme.\",\n  \"type\": \"Treachery\"\n}",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 0.713235259,
                "g": 0.713235259,
                "b": 0.713235259
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": true,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": true,
              "Tooltip": true,
              "GridProjection": false,
              "HideWhenFaceDown": true,
              "Hands": true,
              "CardID": 1110618,
              "SidewaysCard": false,
              "CustomDeck": {
                "11106": {
                  "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                  "NumWidth": 10,
                  "NumHeight": 7,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              },
              "LuaScript": "",
              "LuaScriptState": "",
              "XmlUI": ""
            },
            {
              "GUID": "2e306a",
              "Name": "Card",
              "Transform": {
                "posX": 30.4915,
                "posY": 5.9797225,
                "posZ": -2.99660468,
                "rotX": -0.000593652949,
                "rotY": 180.140228,
                "rotZ": 180.001068,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "Description": "",
              "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87052\",\n  \"traits\": \"Terror.\",\n  \"type\": \"Treachery\"\n}",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 0.713235259,
                "g": 0.713235259,
                "b": 0.713235259
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": true,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": true,
              "Tooltip": true,
              "GridProjection": false,
              "HideWhenFaceDown": true,
              "Hands": true,
              "CardID": 1110624,
              "SidewaysCard": false,
              "CustomDeck": {
                "11106": {
                  "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                  "NumWidth": 10,
                  "NumHeight": 7,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              },
              "LuaScript": "",
              "LuaScriptState": "",
              "XmlUI": ""
            },
            {
              "GUID": "f68cd1",
              "Name": "Card",
              "Transform": {
                "posX": 30.4915,
                "posY": 5.77972269,
                "posZ": -2.99660468,
                "rotX": -0.000593652949,
                "rotY": 180.140228,
                "rotZ": 180.001068,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "Description": "",
              "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87050\",\n  \"traits\": \"Hex.\",\n  \"type\": \"Treachery\"\n}",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 0.713235259,
                "g": 0.713235259,
                "b": 0.713235259
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": true,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": true,
              "Tooltip": true,
              "GridProjection": false,
              "HideWhenFaceDown": true,
              "Hands": true,
              "CardID": 1110620,
              "SidewaysCard": false,
              "CustomDeck": {
                "11106": {
                  "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                  "NumWidth": 10,
                  "NumHeight": 7,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              },
              "LuaScript": "",
              "LuaScriptState": "",
              "XmlUI": ""
            },
            {
              "GUID": "4ea2dd",
              "Name": "Card",
              "Transform": {
                "posX": 30.4915,
                "posY": 5.5797224,
                "posZ": -2.99660468,
                "rotX": -0.000593652949,
                "rotY": 180.140228,
                "rotZ": 180.001068,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "Description": "",
              "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 3,\n  \"id\": \"87044\",\n  \"traits\": \"Monster. Extradimensional. Tindalos.\",\n  \"type\": \"Enemy\"\n}",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 0.713235259,
                "g": 0.713235259,
                "b": 0.713235259
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": true,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": true,
              "Tooltip": true,
              "GridProjection": false,
              "HideWhenFaceDown": true,
              "Hands": true,
              "CardID": 1110607,
              "SidewaysCard": false,
              "CustomDeck": {
                "11106": {
                  "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                  "NumWidth": 10,
                  "NumHeight": 7,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              },
              "LuaScript": "",
              "LuaScriptState": "",
              "XmlUI": ""
            },
            {
              "GUID": "3f78df",
              "Name": "Card",
              "Transform": {
                "posX": 30.4915,
                "posY": 5.3797226,
                "posZ": -2.99660468,
                "rotX": -0.000593652949,
                "rotY": 180.140228,
                "rotZ": 180.001068,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "Description": "",
              "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87049\",\n  \"traits\": \"Scheme.\",\n  \"type\": \"Treachery\"\n}",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 0.713235259,
                "g": 0.713235259,
                "b": 0.713235259
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": true,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": true,
              "Tooltip": true,
              "GridProjection": false,
              "HideWhenFaceDown": true,
              "Hands": true,
              "CardID": 1110617,
              "SidewaysCard": false,
              "CustomDeck": {
                "11106": {
                  "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                  "NumWidth": 10,
                  "NumHeight": 7,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              },
              "LuaScript": "",
              "LuaScriptState": "",
              "XmlUI": ""
            },
            {
              "GUID": "2f6d40",
              "Name": "Card",
              "Transform": {
                "posX": 30.4915,
                "posY": 5.17972231,
                "posZ": -2.99660468,
                "rotX": -0.000593652949,
                "rotY": 180.140228,
                "rotZ": 180.001068,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "Description": "",
              "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"id\": \"87051\",\n  \"traits\": \"Hazard. Power.\",\n  \"type\": \"Treachery\"\n}",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 0.713235259,
                "g": 0.713235259,
                "b": 0.713235259
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": true,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": true,
              "Tooltip": true,
              "GridProjection": false,
              "HideWhenFaceDown": true,
              "Hands": true,
              "CardID": 1110623,
              "SidewaysCard": false,
              "CustomDeck": {
                "11106": {
                  "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                  "NumWidth": 10,
                  "NumHeight": 7,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              },
              "LuaScript": "",
              "LuaScriptState": "",
              "XmlUI": ""
            },
            {
              "GUID": "430c25",
              "Name": "Card",
              "Transform": {
                "posX": 30.4915,
                "posY": 4.9797225,
                "posZ": -2.99660468,
                "rotX": -0.000593652949,
                "rotY": 180.140228,
                "rotZ": 180.001068,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "Description": "",
              "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"87045\",\n  \"traits\": \"Monster. Extradimensional. Tindalos.\",\n  \"type\": \"Enemy\"\n}",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 0.713235259,
                "g": 0.713235259,
                "b": 0.713235259
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": true,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": true,
              "Tooltip": true,
              "GridProjection": false,
              "HideWhenFaceDown": true,
              "Hands": true,
              "CardID": 1110611,
              "SidewaysCard": false,
              "CustomDeck": {
                "11106": {
                  "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                  "NumWidth": 10,
                  "NumHeight": 7,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              },
              "LuaScript": "",
              "LuaScriptState": "",
              "XmlUI": ""
            },
            {
              "GUID": "068a6f",
              "Name": "Card",
              "Transform": {
                "posX": 30.4915,
                "posY": 4.77972269,
                "posZ": -2.99660468,
                "rotX": -0.000593652949,
                "rotY": 180.140228,
                "rotZ": 180.001068,
                "scaleX": 1.0,
                "scaleY": 1.0,
                "scaleZ": 1.0
              },
              "Nickname": "",
              "Description": "",
              "GMNotes": "{\n  \"cycle\": \"Standalone\",\n  \"health\": 2,\n  \"id\": \"87045\",\n  \"traits\": \"Monster. Extradimensional. Tindalos.\",\n  \"type\": \"Enemy\"\n}",
              "AltLookAngle": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "ColorDiffuse": {
                "r": 0.713235259,
                "g": 0.713235259,
                "b": 0.713235259
              },
              "LayoutGroupSortIndex": 0,
              "Value": 0,
              "Locked": false,
              "Grid": true,
              "Snap": true,
              "IgnoreFoW": false,
              "MeasureMovement": false,
              "DragSelectable": true,
              "Autoraise": true,
              "Sticky": true,
              "Tooltip": true,
              "GridProjection": false,
              "HideWhenFaceDown": true,
              "Hands": true,
              "CardID": 1110608,
              "SidewaysCard": false,
              "CustomDeck": {
                "11106": {
                  "FaceURL": "https://i.imgur.com/erDgaZx.jpg",
                  "BackURL": "https://steamusercontent-a.akamaihd.net/ugc/931553051989537266/4F8EF28EECA8E2376771AD6B18CA93622216C17A/",
                  "NumWidth": 10,
                  "NumHeight": 7,
                  "BackIsHidden": true,
                  "UniqueBack": false,
                  "Type": 0
                }
              },
              "LuaScript": "",
              "LuaScriptState": "",
              "XmlUI": ""
            }
          ]
        },
        {
          "GUID": "f6f7f9",
          "Name": "Card",
          "Transform": {
            "posX": 23.5012,
            "posY": 1.503805,
            "posZ": -5.5231204,
            "rotX": 0.0108910492,
            "rotY": 180.00441,
            "rotZ": 0.004949093,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Référence",
          "Description": "Machinations au Fil du Temps",
          "GMNotes": "{\n  \"class\": \"Mythos\",\n  \"id\": \"87001\",\n  \"type\": \"ScenarioReference\"\n}",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 1104900,
          "SidewaysCard": false,
          "CustomDeck": {
            "11049": {
              "FaceURL": "https://i.imgur.com/GJ2OQkE.jpg",
              "BackURL": "https://i.imgur.com/KD87ez9.jpg",
              "NumWidth": 10,
              "NumHeight": 7,
              "BackIsHidden": true,
              "UniqueBack": true,
              "Type": 0
            }
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "fa019f",
          "Name": "Custom_PDF",
          "Transform": {
            "posX": -19.5,
            "posY": 1.48149931,
            "posZ": -4.5,
            "rotX": -2.89456182E-07,
            "rotY": 180.0,
            "rotZ": -8.53236557E-08,
            "scaleX": 2.23922753,
            "scaleY": 1.0,
            "scaleZ": 2.23922753
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "CustomPDF": {
            "PDFUrl": "https://steamusercontent-a.akamaihd.net/ugc/2458494293778189247/8159EA32B5A353B5336146EE03F96F4294319515/",
            "PDFPassword": "",
            "PDFPage": 0,
            "PDFPageOffset": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ],
      "AttachedDecals": [
        {
          "Transform": {
            "posX": -0.0021877822,
            "posY": -0.08963572,
            "posZ": -0.00288731651,
            "rotX": 270.0,
            "rotY": 359.869568,
            "rotZ": 0.0,
            "scaleX": 2.00000215,
            "scaleY": 2.00000238,
            "scaleZ": 2.00000262
          },
          "CustomDecal": {
            "Name": "dunwich_back",
            "ImageURL": "https://steamusercontent-a.akamaihd.net/ugc/959719855119695911/931B9829687A20F4DEADB36DA57B7E6D76792231/",
            "Size": 7.4
          }
        }
      ]
    }
  ]
}